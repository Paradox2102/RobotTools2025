{"id":243,"date":"2021-04-06T21:17:47","date_gmt":"2021-04-06T21:17:47","guid":{"rendered":"http:\/\/gabybot.com\/?page_id=243"},"modified":"2025-08-13T02:13:31","modified_gmt":"2025-08-13T02:13:31","slug":"escape","status":"publish","type":"page","link":"http:\/\/gabybot.com\/escape\/","title":{"rendered":"Escape!"},"content":{"rendered":"\n<p>Our final task is going to be to write a program which will give the robot a way to escape from the following box:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/04\/EscapeBoard.jpg\" alt=\"\" class=\"wp-image-248\" width=\"404\" height=\"311\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/EscapeBoard.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/EscapeBoard-300x231.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/EscapeBoard-768x592.jpg 768w\" sizes=\"(max-width: 404px) 100vw, 404px\" \/><\/figure><\/div>\n\n\n\n<p>As you can see, there is a black line which surrounds a orange&nbsp;field and this line has a break on one side. Our goal is to be able to place the robot anywhere within the box, pointing at any angle, and have it find its way out without crossing the black line.<\/p>\n\n\n\n<p>Now there are a number of ways that we could approach solving this problem. The one we are going to choose first is relatively simple and, although not the most efficient, involves the use of a&nbsp;<strong>state machine<\/strong>&nbsp;which makes it a good exercise.<\/p>\n\n\n\n<p>Basically what we are going to do is to program the robot to drive forward until it \u2018sees\u2019 a black line. Then we will have it drive backwards a short distance, turn left or right for a random amount of time and then repeat. Eventually, the robot will be pointed at the exit from which it will make it\u2019s escape.<\/p>\n\n\n\n<p>When implementing a state machine, it is useful to draw a state diagram. The state diagram for our machine looks like:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"413\" height=\"343\" src=\"\/wp-content\/uploads\/2021\/04\/BoxStateMachine.png\" alt=\"\" class=\"wp-image-249\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/BoxStateMachine.png 413w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/BoxStateMachine-300x249.png 300w\" sizes=\"(max-width: 413px) 100vw, 413px\" \/><\/figure><\/div>\n\n\n\n<p>Now we want to create a command that we will use to implement this state machine. Let\u2019s call that command&nbsp;<strong>EscapeCommand<\/strong>. Go ahead and create the framework for the new command. Remember that we are going to need access to the <strong>IR Sensor<\/strong> so be sure to include that as one of the arguments for the constructor.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot.commands;\n\nimport edu.wpi.first.wpilibj2.command.Command;\nimport frc.robot.subsystems.DriveSubsystem;\nimport robotCore.DigitalInput;\nimport robotCore.Logger;\n\n\/**\n * A command to escape from a box.\n *\/\npublic class EscapeCommand extends Command {\n    private final DriveSubsystem m_subsystem;\n    private final DigitalInput m_irSensor;\n\n    \/**\n     * Creates a new EscapeCommand.\n     *\n     * @param subsystem The subsystem used by this command.\n     *\/\n    public EscapeCommand(DriveSubsystem subsystem, DigitalInput irSensor) {\n        Logger.log(\"EscapeCommand\", 3, \"EscapeCommand()\");\n\n        m_subsystem = subsystem;\n        m_irSensor = irSensor;\n\n\n        \/\/ Use addRequirements() here to declare subsystem dependencies.\n        addRequirements(m_subsystem);\n    }\n\n    \/\/ Called when the command is initially scheduled.\n    @Override\n    public void initialize() {\n        Logger.log(\"EscapeCommand\", 2, \"initialize()\");\n    }\n\n    \/\/ Called every time the scheduler runs while the command is scheduled.\n    @Override\n    public void execute() {\n        Logger.log(\"EscapeCommand\", -1, \"execute()\");\n    }\n\n    \/\/ Called once the command ends or is interrupted.\n    @Override\n    public void end(boolean interrupted) {\n        Logger.log(\"EscapeCommand\", 2, String.format(\"end(%b)\", interrupted));\n    }\n\n    \/\/ Returns true when the command should end.\n    @Override\n    public boolean isFinished() {\n        Logger.log(\"EscapeCommand\", -1, \"isFinished()\");\n        return false;\n    }\n}<\/code><\/pre>\n\n\n\n<p>The first thing we need to do is to create an&nbsp;<strong>enum<\/strong>&nbsp;to name our states. We have three states, so our&nbsp;<strong>enum<\/strong>&nbsp;will have three values. We also want to declare&nbsp;a variable to hold the current state:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class EscapeCommand extends Command {\n    private enum State {\n        DriveForward, BackUp, Turn\n    }\n\n    private final DriveSubsystem m_subsystem;\n    private final DigitalInput m_irSensor;\n    private State m_state;<\/code><\/pre>\n\n\n\n<p>In the&nbsp;<strong>initialize()<\/strong>&nbsp;function, we need to set the state to our starting state&nbsp;<strong>DriveForward<\/strong>&nbsp;and start the robot driving forward. Since we will be switching to this state in multiple places we will create a function to do this which we will call from our&nbsp;<strong>initialize()<\/strong>&nbsp;function:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    private void DriveForward() {\n        Logger.log(\"EscapeCommand\", 2, \"DriveForward()\");\n\n        m_state = State.DriveForward;\n\n        m_subsystem.setSpeed(k_driveSpeed, k_driveSpeed);\n    }\n\n    \/\/ Called when the command is initially scheduled.\n    @Override\n    public void initialize() {\n        Logger.log(\"EscapeCommand\", 2, \"initialize()\");\n\n        DriveForward();\n    }\n<\/code><\/pre>\n\n\n\n<p>Note that we have added a&nbsp;<strong>Logger<\/strong>&nbsp;call to our&nbsp;<strong>DriveForward()<\/strong>&nbsp;function. This will enable us to monitor the progress of our state machine which will be useful if we have any problems with it.&nbsp;We also define the&nbsp;constant&nbsp;<strong>k_driveSpeed<\/strong>&nbsp;for the speed so that we can easily change this later if need be:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private static final double k_driveSpeed\t= 0.4;<\/code><\/pre>\n\n\n\n<p>Now in our&nbsp;<strong>execute()<\/strong>&nbsp;function we need to add the logic that will switch the robot from one state to another when the time come. We will use a&nbsp;<strong>switch<\/strong>&nbsp;statement and create functions to handle each of the three states. First let\u2019s just create the&nbsp;<strong>switch<\/strong>&nbsp;with each of the states enumerated:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public void execute() {\n    Logger.log(\"EscapeCommand\", -1, \"execute()\");\n\n    switch (m_state) {\n      case DriveForward:\n        break;\n\n      case BackUp:\n        break;\n\n      case Turn:\n        break;\n    }\n  }<\/code><\/pre>\n\n\n\n<p>Now let\u2019s start with the&nbsp;<strong>DriveForward<\/strong>&nbsp;state. Rather than handle the state logic in-line in the&nbsp;<strong>switch<\/strong>&nbsp;statement, we are going to create a function to do it for us. It is always good practice to break your program into nice small pieces rather than have one long function that handles a lot of complex tasks.<\/p>\n\n\n\n<p>We will call the function that handles the&nbsp;<strong>DriveForward<\/strong>&nbsp;state&nbsp;<strong>DrivingForward<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    private void DrivingForward() {\n\n    }\n\n    \/\/ Called every time the scheduler runs while the command is scheduled.\n    @Override\n    public void execute() {\n        Logger.log(\"EscapeCommand\", -1, \"execute()\");\n\n        switch (m_state) {\n            case DriveForward:\n                DrivingForward();\n                break;\n\n            case BackUp:\n                break;\n\n            case Turn:\n                break;\n        }\n    }<\/code><\/pre>\n\n\n\n<p>Now in our&nbsp;<strong>DrivingForward()<\/strong>&nbsp;function we need to check to see if the robot has encountered a black line which is the condition for switching out of that state. We are also going to need a timer that we can start so that we can time the backup phase so we declare a <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_timer.html\" target=\"_blank\">Timer<\/a> <\/strong>variable at the top of our class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private final Timer m_timer = new Timer();<\/code><\/pre>\n\n\n\n<p>Since we will be using the <a href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1wpilibj_1_1_timer.html\" target=\"_blank\" rel=\"noreferrer noopener\">Timer<\/a> throughout this command we want to <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1wpilibj_1_1_timer.html#aacd54f1b7b8730971bf8c904424e0bf4\" target=\"_blank\">start<\/a> it in the constructor:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    public EscapeCommand(DriveSubsystem subsystem, DigitalInput irSensor) {\n        Logger.log(\"EscapeCommand\", 3, \"EscapeCommand()\");\n\n        m_subsystem = subsystem;\n        m_irSensor = irSensor;\n\n        m_timer.start();\n        \n        \/\/ Use addRequirements() here to declare subsystem dependencies.\n        addRequirements(m_subsystem);\n    }<\/code><\/pre>\n\n\n\n<p>Now we can finish the&nbsp;<strong>DrivingForward()<\/strong>&nbsp;function:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    private void DrivingForward() {\n        if (m_irSensor.get()) {\n            Logger.log(\"EscapeCommand\", 2, \"BackUp\");\n\n            m_state = State.BackUp;\n\n            m_subsystem.setSpeed(-k_driveSpeed, -k_driveSpeed);\n\n            m_timer.reset();\n        }\n    }<\/code><\/pre>\n\n\n\n<p>First we check to see if the robot \u2018sees\u2019 the black line. If so, we need to set the state to&nbsp;<strong>BackUp<\/strong>, start the robot moving backwards, and reset the timer we will use to time the backup. We also add a&nbsp;<strong>Logger<\/strong>&nbsp;call so that we can, once again, monitor the progress of our state machine in case anything goes wrong:<\/p>\n\n\n\n<p>Next we will handle the&nbsp;<strong>BackUp<\/strong>&nbsp;state by adding a function&nbsp;<strong>Backing()<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private void Backing() {\n    if (m_timer.get() &gt;= k_backingTime) {\n      Logger.log(\"EsapeCommand\", 2, \"Turn\");\n\n      m_state = State.Turn;\n\n      if (m_random.nextInt(2) == 1) {\n        m_subsystem.setSpeed(k_turnSpeed, -k_turnSpeed); \/\/ Turn right\n      } else {\n        m_subsystem.setSpeed(-k_turnSpeed, k_turnSpeed); \/\/ Turn left\n      }\n\n      m_turnTime = k_minTurnTime + m_random.nextDouble();\n\n      m_timer.reset();\n    }\n  }\n\n  \/\/ Called every time the scheduler runs while the command is scheduled.\n  @Override\n  public void execute() {\n    Logger.log(\"EscapeCommand\", -1, \"execute()\");\n\n    switch (m_state) {\n      case DriveForward:\n        DrivingForward();\n        break;\n\n      case BackUp:\n        Backing();\n        break;\n\n      case Turn:\n        break;\n    }\n  }<\/code><\/pre>\n\n\n\n<p>First we check to see if the time we have been backing up exceeds the backing time limit (which we will define as the constant&nbsp;<strong>k_backingTime<\/strong>). If the time has expired then we want enter the&nbsp;<strong>Turn<\/strong>&nbsp;state and we want to randomly set the motors to turn the robot either left or right. For this we will need a random number generator and Java provides us with the&nbsp;<strong><a rel=\"noreferrer noopener\" href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/util\/Random.html\" target=\"_blank\">Random<\/a><\/strong> class for this purpose.<\/p>\n\n\n\n<p>Looking at the documentation for the&nbsp;<strong><a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/util\/Random.html\" target=\"_blank\" rel=\"noreferrer noopener\">Random<\/a><\/strong>&nbsp;class we see that if we call the&nbsp;<strong><a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/util\/Random.html#nextInt(int)\" target=\"_blank\" rel=\"noreferrer noopener\">nextInt(int n)<\/a><\/strong>&nbsp;function it will return a random number between zero (inclusive) and&nbsp;<strong>n<\/strong>&nbsp;(exclusive). So if we call&nbsp;<strong>nextInt(2)<\/strong>&nbsp;we will get either a&nbsp;<strong>zero<\/strong>&nbsp;or&nbsp;<strong>one<\/strong>. If the result is&nbsp;<strong>one<\/strong>, we start the robot turning right, and if it is&nbsp;<strong>zero<\/strong>&nbsp;we start it turning left.<\/p>\n\n\n\n<p>We also want to turn for a random amount of time. We see that calling the&nbsp;<strong><a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/util\/Random.html#nextDouble()\">nextDouble()<\/a><\/strong>&nbsp;function of the random number generator will return a value between&nbsp;<strong>0.0<\/strong>&nbsp;and&nbsp;<strong>1.0<\/strong>. We can add this to a&nbsp;<strong>k_minTurnTime<\/strong>&nbsp;to create a turn time between&nbsp;<strong>0.4<\/strong>&nbsp;and&nbsp;<strong>1.5<\/strong>&nbsp;seconds. We store this value in a member variable&nbsp;<strong>m_turnTime<\/strong>&nbsp;and will use this time to determine when the turn is complete.<\/p>\n\n\n\n<p>Finally, we&nbsp;reset the timer, and log the state change.<\/p>\n\n\n\n<p>We, of course, must declare&nbsp;<strong>k_backingTime<\/strong>,&nbsp;<strong>k_turnSpeed<\/strong>,&nbsp;<strong>k_minTurnTime<\/strong>,&nbsp;<strong>m_random<\/strong>,&nbsp;and&nbsp;<strong>m_turnTime<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class EscapeCommand extends Command {\n    private enum State {\n        DriveForward, BackUp, Turn\n    }\n\n    private final DriveSubsystem m_subsystem;\n    private final DigitalInput m_irSensor;\n    private State m_state;\n    private static final double k_driveSpeed = 0.4;\n    private final Timer m_timer = new Timer();\n    private static final double k_backingTime = 0.5;\n    private static final double k_turnSpeed = 0.4;\n    private static final double k_minTurnTime = 0.5;\n    private Random m_random = new Random(System.currentTimeMillis());\n    private double m_turnTime;<\/code><\/pre>\n\n\n\n<p>Note that the constructor for&nbsp;<a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/util\/Random.html#Random(long)\"><strong>Random<\/strong><\/a> takes a&nbsp;<strong>long<\/strong>&nbsp;parameter to act as a&nbsp;<strong>seed<\/strong>&nbsp;for the random number generator. If we pass in the same number every time, we will get the same string of random numbers (yes, random number generators do not really generate random numbers). By passing in the current time, we can ensure that we get a different sequence of random number each time we run our program.<\/p>\n\n\n\n<p>The final state we need to handle is the&nbsp;<strong>Turn<\/strong>&nbsp;state. For this we create the function&nbsp;<strong>Turning()<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  protected void Turning() {\n    if (m_timer.get() &gt;= m_turnTime) {\n      DriveForward();\n    }\n  }\n\n  \/\/ Called every time the scheduler runs while the command is scheduled.\n  @Override\n  public void execute() {\n    Logger.log(\"EscapeCommand\", -1, \"execute()\");\n\n    switch (m_state) {\n      case DriveForward:\n        DrivingForward();\n        break;\n\n      case BackUp:\n        Backing();\n        break;\n\n      case Turn:\n        Turning();\n        break;\n    }\n  }<\/code><\/pre>\n\n\n\n<p>Here we simply wait for the calculated time to expire and then switch back to the&nbsp;<strong>DriveForward<\/strong>&nbsp;state by calling our previously created&nbsp;<strong>DriveForward()<\/strong>&nbsp;function.<\/p>\n\n\n\n<p>At this point your&nbsp;<strong>EscapeCommand.java<\/strong>&nbsp;file should look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot.commands;\n\nimport java.util.Random;\n\nimport edu.wpi.first.wpilibj.Timer;\nimport edu.wpi.first.wpilibj2.command.Command;\nimport frc.robot.subsystems.DriveSubsystem;\nimport robotCore.DigitalInput;\nimport robotCore.Logger;\n\n\/**\n * A command to escape from a box.\n *\/\npublic class EscapeCommand extends Command {\n    private enum State {\n        DriveForward, BackUp, Turn\n    }\n\n    private final DriveSubsystem m_subsystem;\n    private final DigitalInput m_irSensor;\n    private State m_state;\n    private static final double k_driveSpeed = 0.4;\n    private final Timer m_timer = new Timer();\n    private static final double k_backingTime = 0.5;\n    private static final double k_turnSpeed = 0.4;\n    private static final double k_minTurnTime = 0.5;\n    private Random m_random = new Random(System.currentTimeMillis());\n    private double m_turnTime;\n\n    \/**\n     * Creates a new EscapeCommand.\n     *\n     * @param subsystem The subsystem used by this command.\n     *\/\n    public EscapeCommand(DriveSubsystem subsystem, DigitalInput irSensor) {\n        Logger.log(\"EscapeCommand\", 3, \"EscapeCommand()\");\n\n        m_subsystem = subsystem;\n        m_irSensor = irSensor;\n\n        m_timer.start();\n\n        \/\/ Use addRequirements() here to declare subsystem dependencies.\n        addRequirements(m_subsystem);\n    }\n\n    \/\/ Called when the command is initially scheduled.\n    private void DriveForward() {\n        Logger.log(\"EscapeCommand\", 2, \"DriveForward()\");\n\n        m_state = State.DriveForward;\n\n        m_subsystem.setSpeed(k_driveSpeed, k_driveSpeed);\n    }\n\n    \/\/ Called when the command is initially scheduled.\n    @Override\n    public void initialize() {\n        Logger.log(\"EscapeCommand\", 2, \"initialize()\");\n\n        DriveForward();\n    }\n\n    private void DrivingForward() {\n        if (m_irSensor.get()) {\n            Logger.log(\"EscapeCommand\", 2, \"BackUp\");\n\n            m_state = State.BackUp;\n\n            m_subsystem.setSpeed(-k_driveSpeed, -k_driveSpeed);\n\n            m_timer.reset();\n        }\n    }\n\n    private void Backing() {\n        if (m_timer.get() &gt;= k_backingTime) {\n            Logger.log(\"EsapeCommand\", 2, \"Turn\");\n\n            m_state = State.Turn;\n\n            if (m_random.nextInt(2) == 1) {\n                m_subsystem.setSpeed(k_turnSpeed, -k_turnSpeed); \/\/ Turn right\n            } else {\n                m_subsystem.setSpeed(-k_turnSpeed, k_turnSpeed); \/\/ Turn left\n            }\n\n            m_turnTime = k_minTurnTime + m_random.nextDouble();\n\n            m_timer.reset();\n        }\n    }\n\n    protected void Turning() {\n        if (m_timer.get() &gt;= m_turnTime) {\n            DriveForward();\n        }\n    }\n\n    \/\/ Called every time the scheduler runs while the command is scheduled.\n    @Override\n    public void execute() {\n        Logger.log(\"EscapeCommand\", -1, \"execute()\");\n\n        switch (m_state) {\n            case DriveForward:\n                DrivingForward();\n                break;\n\n            case BackUp:\n                Backing();\n                break;\n\n            case Turn:\n                Turning();\n                break;\n        }\n    }\n\n    \/\/ Called once the command ends or is interrupted.\n    @Override\n    public void end(boolean interrupted) {\n        Logger.log(\"EscapeCommand\", 2, String.format(\"end(%b)\", interrupted));\n    }\n\n    \/\/ Returns true when the command should end.\n    @Override\n    public boolean isFinished() {\n        Logger.log(\"EscapeCommand\", -1, \"isFinished()\");\n        return false;\n    }\n}<\/code><\/pre>\n\n\n\n<p>Now in&nbsp;<strong>RobotContainer<\/strong>,&nbsp;connect this new command to button&nbsp;your&nbsp;<strong>8&nbsp;<\/strong>on the joystick. You&nbsp;<strong>RobotContainer.java<\/strong>&nbsp;file should now look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\r\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\r\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\r\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\r\n\/* the project.                                                               *\/\r\n\/*----------------------------------------------------------------------------*\/\r\n\r\npackage frc.robot;\r\n\r\nimport edu.wpi.first.wpilibj.XboxController;\r\nimport edu.wpi.first.wpilibj2.command.Command;\r\nimport edu.wpi.first.wpilibj2.command.button.CommandJoystick;\r\nimport frc.robot.commands.DriveForTimeCommand;\r\nimport frc.robot.commands.DriveToLineCommand;\r\nimport frc.robot.commands.EscapeCommand;\r\nimport frc.robot.commands.TestMotorSpeedCommand;\r\nimport frc.robot.commands.TurnCommand;\r\nimport frc.robot.commands.ArcadeDriveCommand;\r\nimport frc.robot.commands.CalibrateSpeedCommand;\r\nimport frc.robot.commands.DriveCourseCommand;\r\nimport frc.robot.commands.DriveForDistanceCommand;\r\nimport frc.robot.subsystems.DriveSubsystem;\r\nimport frc.robot.subsystems.ExampleSubsystem;\r\nimport robotCore.DigitalInput;\r\nimport robotCore.Minibot;\r\n\r\n\/**\r\n * This class is where the bulk of the robot should be declared. Since\r\n * Command-based is a \"declarative\" paradigm, very little robot logic should\r\n * actually be handled in the {@link Robot} periodic methods (other than the\r\n * scheduler calls). Instead, the structure of the robot (including subsystems,\r\n * commands, and button mappings) should be declared here.\r\n *\/\r\npublic class RobotContainer {\r\n  \/\/ The robot's subsystems and commands are defined here...\r\n  @SuppressWarnings(\"unused\")\r\n  private final ExampleSubsystem m_exampleSubsystem = new ExampleSubsystem();\r\n  private final DriveSubsystem m_driveSubsystem = new DriveSubsystem();\r\n  private final CommandJoystick m_joystick = new CommandJoystick(0);\r\n  private final DigitalInput m_irSensor = new DigitalInput(Minibot.IRSensor);\r\n\r\n\r\n  private final ArcadeDriveCommand m_autoCommand = null; \/\/ new ExampleCommand(m_exampleSubsystem);\r\n\r\n  \/**\r\n   * The container for the robot. Contains subsystems, OI devices, and commands.\r\n   *\/\r\n  public RobotContainer() {\r\n    m_driveSubsystem.setDefaultCommand(new ArcadeDriveCommand(m_driveSubsystem, m_joystick));\r\n\r\n    \/\/ Configure the button bindings\r\n    configureButtonBindings();\r\n  }\r\n\r\n  \/**\r\n   * Use this method to define your button->command mappings. Buttons can be\r\n   * created by instantiating a {@link GenericHID} or one of its subclasses\r\n   * ({@link edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then\r\n   * passing it to a {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.\r\n   *\/\r\n  private void configureButtonBindings() {\r\n    m_joystick.button(1).onTrue(new DriveForTimeCommand(m_driveSubsystem, 0.50, 3.0));\r\n    m_joystick.button(2).onTrue(new DriveForDistanceCommand(m_driveSubsystem, 0.75, 30));\r\n    m_joystick.button(3).onTrue(new TestMotorSpeedCommand(m_driveSubsystem));\r\n    m_joystick.button(4).whileTrue(new CalibrateSpeedCommand(m_driveSubsystem));\r\n    m_joystick.button(5).onTrue(new TurnCommand(m_driveSubsystem, 0.3, -180));\r\n    m_joystick.button(6).onTrue(new DriveCourseCommand(m_driveSubsystem));\r\n    m_joystick.button(7).onTrue(new DriveToLineCommand(m_driveSubsystem, m_irSensor));\r\n    m_joystick.button(8).onTrue(new EscapeCommand(m_driveSubsystem, m_irSensor));\r\n  }\r\n\r\n  \/**\r\n   * Use this to pass the autonomous command to the main {@link Robot} class.\r\n   *\r\n   * @return the command to run in autonomous\r\n   *\/\r\n  public Command getAutonomousCommand() {\r\n    \/\/ An ExampleCommand will run in autonomous\r\n    return m_autoCommand;\r\n  }\r\n}<\/code><\/pre>\n\n\n\n<p>Now deploy and run your program and watch your robot escape from the box. Note that we currently have no way to detect that the robot has actually escaped, so once it is out, you will need to hit the&nbsp;<strong>Disable<\/strong>&nbsp;button on the driver station to stop it.<\/p>\n\n\n\n<p>It would be nice if we added some code to automatically stop the robot once it has escaped. If we were to ensure that there was sufficient white space after the exit (e.g. by putting some white sheets of paper after the exit) then we might be able to use a timer to determine that it had escaped. If we started the timer when we enter the&nbsp;<strong>DriveForward<\/strong>&nbsp;state, then in the&nbsp;<strong>DrivingForward()&nbsp;<\/strong>function we could check the timer and if it exceeded a certain value we would know that the robot had escaped. We would have to choose a time that it is longer than the longest time the robot would drive if it were still contained (i.e. the time it would take to go from corner to corner). If the time expired while we were driving we would then know the robot was out of the box.<\/p>\n\n\n\n<p>Implementation of this idea is left as an exercise to the student.<\/p>\n\n\n\n<p>This concludes the&nbsp;<strong>Minibot&nbsp;<\/strong>tutorial.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Our final task is going to be to write a program which will give the robot a way to escape from the following box: As you can see, there is a black line which surrounds a orange&nbsp;field and this line has a break on one side. Our goal is to be able to place the&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/escape\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Escape!<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/243"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=243"}],"version-history":[{"count":32,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/243\/revisions"}],"predecessor-version":[{"id":4879,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/243\/revisions\/4879"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=243"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}