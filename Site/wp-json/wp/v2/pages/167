{"id":167,"date":"2021-04-06T17:31:00","date_gmt":"2021-04-06T17:31:00","guid":{"rendered":"http:\/\/gabybot.com\/?page_id=167"},"modified":"2025-08-13T01:35:56","modified_gmt":"2025-08-13T01:35:56","slug":"wheel-encoders","status":"publish","type":"page","link":"http:\/\/gabybot.com\/wheel-encoders\/","title":{"rendered":"Wheel Encoders"},"content":{"rendered":"\n<p>So far we have been controlling the motors by setting their power. Unfortunately, this is not ideal because the power only indirectly controls the speed, which is what we are really interested in. As we have already seen, our robot does not exactly drive straight when we apply the same power to both wheels. This is because differences in the motors and the way they are mounted cause them to run at slightly different speeds when the same power is applied.<\/p>\n\n\n\n<p>What we need is some way to tell how far the wheels have turned and how fast. Each of the wheels on this robot have an encoder which will do just that. We will use the encoder to control the distance the robot moves as well as it\u2019s speed.<\/p>\n\n\n\n<p>For our first exercise, we are going to create a new command, similar to our&nbsp;<strong>DriveForTimeCommand<\/strong>,&nbsp;that will drive the robot forward a fixed distance, rather than a fixed time. Before that, a word on encoders and how we use them in software.<\/p>\n\n\n\n<p>The&nbsp;encoders that we are using are handled&nbsp;by the&nbsp;<strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_encoder.html\" target=\"_blank\">Encoder<\/a><\/strong>&nbsp;class. We will need to create a separate&nbsp;instance of this class for the left and right motors.&nbsp;The&nbsp;<strong>DriveSubsystem<\/strong>&nbsp;will eventually need the encoders so&nbsp;we will be adding these to that class. Consulting the&nbsp;<strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_encoder.html\" target=\"_blank\">Encoder<\/a>&nbsp;<\/strong>class documentation, we see that the constructor take a encoder type and two integer parameters which specifies the <strong>Microcontroller <\/strong>pins to which they are connected. Once again these values are provided via the <strong><a href=\"\/RobotCoreDoc\/classrobot_core_1_1_minibot.html\" target=\"_blank\" rel=\"noreferrer noopener\">Minibot<\/a><\/strong> class. Using these values we can create our encoder declarations as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class DriveSubsystem extends SubsystemBase {\n  private PWMMotor m_leftMotor = new PWMMotor(Minibot.LeftMotorPWM, Minibot.LeftMotorDir);\n  private PWMMotor m_rightMotor = new PWMMotor(Minibot.RightMotorPWM, Minibot.RightMotorDir);\n  private Encoder m_leftEncoder = new Encoder(EncoderType.Quadrature, Minibot.LeftEncoderInt, Minibot.LeftEncoderDir);\n  private Encoder m_rightEncoder = new Encoder(EncoderType.Quadrature, Minibot.RightEncoderInt,\n      Minibot.RightEncoderDir);\n<\/code><\/pre>\n\n\n\n<p>When you import the&nbsp;<strong>Encoder<\/strong>&nbsp;class be sure to select the one from&nbsp;<strong>RobotCore<\/strong>. <\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"722\" height=\"334\" src=\"http:\/\/programming.team2102.org\/wp-content\/uploads\/2024\/09\/Encoder-import.png\" alt=\"\" class=\"wp-image-3229\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Encoder-import.png 722w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Encoder-import-300x139.png 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Encoder-import-150x69.png 150w\" sizes=\"(max-width: 722px) 100vw, 722px\" \/><figcaption>Encoder Import<\/figcaption><\/figure>\n\n\n\n<p>The way the encoders are wired, the left encoder works as expected &#8211; when the left wheel moves forward (e.g., moves the robot forward), the encoder counts up.  BUT, the right encoder counts down when the wheel moves forward. Rather than having to deal with this throughout the code, we can tell the encoder that it is &#8220;inverted&#8221; by&nbsp;adding the following to the&nbsp;<strong>DriveSubsystem&nbsp;<\/strong>constructor:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public DriveSubsystem() {\n    Logger.log(\"DriveSubsystem\", 3, \"DriveSubsystem()\");\n\n    m_rightEncoder.setInverted(true);\n  }<\/code><\/pre>\n\n\n\n<p>The call to&nbsp;<strong><a href=\"\/RobotCoreDoc\/classrobot_core_1_1_encoder.html#ab0c5ccc191aea51f930b201bad153964\" target=\"_blank\" rel=\"noreferrer noopener\">setInverted(true)<\/a><\/strong>&nbsp;tells the encoder to report the reverse of its direction, so it becomes &#8220;positive means forward&#8221;, like the left encoder.<\/p>\n\n\n\n<p>Now we need access to these encoders from our&nbsp;<strong>Command<\/strong>&nbsp;classes, so we will create functions to retrieve the left and right encoders.  Add these to <strong>DriveSubsystem<\/strong> above the <em>periodic()<\/em> method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \/\/Return the left encoder value\n  public Encoder getLeftEncoder() {\n    return (m_leftEncoder);\n  }\n\n  \/\/Return the right encoder value\n  public Encoder getRightEncoder() {\n    return (m_rightEncoder);\n  }<\/code><\/pre>\n\n\n\n<p>Your DriveSubsystem.java file should now look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot.subsystems;\n\nimport edu.wpi.first.wpilibj2.command.SubsystemBase;\nimport robotCore.Logger;\nimport robotCore.Minibot;\nimport robotCore.PWMMotor;\nimport robotCore.Encoder;\nimport robotCore.Encoder.EncoderType;\n\npublic class DriveSubsystem extends SubsystemBase {\n  private PWMMotor m_leftMotor = new PWMMotor(Minibot.LeftMotorPWM, Minibot.LeftMotorDir);\n  private PWMMotor m_rightMotor = new PWMMotor(Minibot.RightMotorPWM, Minibot.RightMotorDir);\n  private Encoder m_leftEncoder = new Encoder(EncoderType.Quadrature, Minibot.LeftEncoderInt, Minibot.LeftEncoderDir);\n  private Encoder m_rightEncoder = new Encoder(EncoderType.Quadrature, Minibot.RightEncoderInt,\n      Minibot.RightEncoderDir);\n\n  \/**\n   * Creates a new DriveSubsystem.\n   *\/\n  public DriveSubsystem() {\n    Logger.log(\"DriveSubsystem\", 3, \"DriveSubsystem()\");\n\n    m_rightEncoder.setInverted(true);\n  }\n\n  public void setPower(double leftPower, double rightPower) {\n    m_rightMotor.set(rightPower);\n    m_leftMotor.set(leftPower);\n  }\n\n  public void stop() {\n    setPower(0, 0);\n  }\n\n  \/\/ Return the left encoder value\n  public Encoder getLeftEncoder() {\n    return (m_leftEncoder);\n  }\n\n  \/\/ Return the right encoder value\n  public Encoder getRightEncoder() {\n    return (m_rightEncoder);\n  }\n\n  @Override\n  public void periodic() {\n    \/\/ This method will be called once per scheduler run\n    Logger.log(\"DriveSubsystem\", -1, \"periodic()\");\n  }\n}\n<\/code><\/pre>\n\n\n\n<p>Now it is time to create our new command which we will call&nbsp;<strong>DriveForDistanceCommand<\/strong>. Go ahead and create a new class under the&nbsp;<strong>commands<\/strong>&nbsp;folder. This time instead of using the&nbsp;<strong>ExampleCommand<\/strong>&nbsp;as our starting point, copy the contents of&nbsp;<strong>DriveForTimeCommand.java<\/strong>&nbsp;file into your newly created&nbsp;<strong>DriveForDistanceCommand.java<\/strong>&nbsp;file. Then rename the file and replace all instances of&nbsp;<strong>DriveForTimeCommand<\/strong>&nbsp;with&nbsp;<strong>DriveForDistanceCommand<\/strong>.<\/p>\n\n\n\n<p>Since we will not be using a&nbsp;<strong>Timer<\/strong>&nbsp;for this class, remove all references to the&nbsp;<strong>Timer<\/strong>. This will involve removing the time parameter from the constructor and having&nbsp;<strong>isFinished()<\/strong>&nbsp;function return&nbsp;<strong>false<\/strong>.<\/p>\n\n\n\n<p>This will give us a better starting point. Your new file should look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot.commands;\n\nimport edu.wpi.first.wpilibj2.command.Command;\nimport frc.robot.subsystems.DriveSubsystem;\nimport robotCore.Logger;\n\n\/**\n * A command to drive a fixed distance.\n *\/\npublic class DriveForDistanceCommand extends Command {\n  private final DriveSubsystem m_subsystem;\n  private double m_power; \/\/ motor power percent. 0.0 to 1.0\n\n  \/**\n   * Creates a new DriveForDistanceCommand.\n   *\n   * @param subsystem The subsystem used by this command.\n   *\/\n  public DriveForDistanceCommand(DriveSubsystem subsystem, double power) {\n    Logger.log(\"DriveForDistanceCommand\", 3, \"DriveForDistanceCommand()\");\n\n    m_subsystem = subsystem;\n\n    \/\/ Save the parameter variables for motor power and run time\n    m_power = power;\n\n    \/\/ Use addRequirements() here to declare subsystem dependencies.\n    addRequirements(m_subsystem);\n  }\n\n  \/\/ Called when the command is initially scheduled.\n  @Override\n  public void initialize() {\n    Logger.log(\"DriveForDistanceCommand\", 2, \"initialize()\");\n\n    m_subsystem.setPower(m_power, m_power);\n  }\n\n  \/\/ Called every time the scheduler runs while the command is scheduled.\n  @Override\n  public void execute() {\n    Logger.log(\"DriveForDistanceCommand\", -1, \"execute()\");\n  }\n\n  \/\/ Called once the command ends or is interrupted.\n  @Override\n  public void end(boolean interrupted) {\n    Logger.log(\"DriveForDistanceCommand\", 2, String.format(\"end(%b)\", interrupted));\n\n    m_subsystem.stop();\n  }\n\n  \/\/ Returns true when the command should end.\n  @Override\n  public boolean isFinished() {\n    Logger.log(\"DriveForDistanceCommand\", -1, \"isFinished()\");\n\n    return false;\n  }\n}\n<\/code><\/pre>\n\n\n\n<p>Next we want to change our constructor to take a&nbsp;<strong>distance<\/strong>&nbsp;instead of a time. We also need to get the encoders from the <strong>DriveSubsystem<\/strong>. To measure the distance we can use either of the encoders but for this command we will use the left encoder.<\/p>\n\n\n\n<p>Steps:<\/p>\n\n\n\n<ul><li>Define class variable after the &#8220;class&#8221; line (<em>m_distance, m_leftEncoder)<\/em><\/li><li>Add <em>distance<\/em> variable to the constructor parameters<\/li><li>In the constructor, save the incoming <em>distance<\/em> value to the <em>m_distance<\/em> class variable (so it&#8217;s available to other methods in this class).<\/li><li>In the constructor, get and save the initial value of the left encoder.<\/li><li>Import <em>Encoder<\/em>.<\/li><\/ul>\n\n\n\n<p>The constructor for the <strong>DriveForDistanceCommand<\/strong> should look like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class DriveForDistanceCommand extends Command {\n  private final DriveSubsystem m_subsystem;\n  private final double m_power; \/\/ motor power percent. 0.0 to 1.0\n  private final double m_distance;\n  private final Encoder m_leftEncoder;\n\n  \/**\n   * Creates a new DriveForDistanceCommand.\n   *\n   * @param subsystem The subsystem used by this command.\n   *\/\n  public DriveForDistanceCommand(DriveSubsystem subsystem, double power, double distance) {\n    Logger.log(\"DriveForDistanceCommand\", 3, \"DriveForDistanceCommand()\");\n\n    m_subsystem = subsystem;\n\n    \/\/ Save the parameter variables for motor power and run time\n    m_power = power;\n    m_distance = distance;\n    m_leftEncoder = m_subsystem.getLeftEncoder();\n\n    \/\/ Use addRequirements() here to declare subsystem dependencies.\n    addRequirements(m_subsystem);\n  }<\/code><\/pre>\n\n\n\n<p>Again, when you import the declaration for <strong>Encoder <\/strong>be sure to choose the one from <strong>robotCore<\/strong>.<\/p>\n\n\n\n<p>In the&nbsp;<strong>initialize()<\/strong>&nbsp;function we need to reset the&nbsp;<strong>Encoder&nbsp;<\/strong>so that it counts from zero each time we run this command. Remember that the encoder we receive from the&nbsp;<strong>DriveSubsystem<\/strong>&nbsp;is our own copy so resetting it will not affect the&nbsp;<strong>DriveSubsystem<\/strong>&nbsp;or any other commands with use the encoders.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public void initialize() {\n    Logger.log(\"DriveForDistanceCommand\", 2, \"initialize()\");\n\n    \/\/Set starting power\n    m_subsystem.setPower(m_power, m_power);\n\n    \/\/Reset Encoder before using\n    m_leftEncoder.reset();\n  }<\/code><\/pre>\n\n\n\n<p>The last thing we need to do is change the&nbsp;<strong>isFinished()<\/strong>&nbsp;function to return&nbsp;<strong>true<\/strong>&nbsp;when the distance is greater than or equal to the target distance:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public boolean isFinished() {\n    Logger.log(\"DriveForDistanceCommand\", -1, \"isFinished()\");\n\n    return (m_leftEncoder.get() &gt;= m_distance);\n  }<\/code><\/pre>\n\n\n\n<p>Your <strong>DriveForDistanceCommand.java<\/strong> file should now look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot.commands;\n\nimport edu.wpi.first.wpilibj2.command.Command;\nimport frc.robot.subsystems.DriveSubsystem;\nimport robotCore.Encoder;\nimport robotCore.Logger;\n\n\/**\n * A command to drive a fixed distance.\n *\/\npublic class DriveForDistanceCommand extends Command {\n  private final DriveSubsystem m_subsystem;\n  private final double m_power; \/\/ motor power percent. 0.0 to 1.0\n  private final double m_distance;\n  private final Encoder m_leftEncoder;\n\n  \/**\n   * Creates a new DriveForDistanceCommand.\n   *\n   * @param subsystem The subsystem used by this command.\n   *\/\n  public DriveForDistanceCommand(DriveSubsystem subsystem, double power, double distance) {\n    Logger.log(\"DriveForDistanceCommand\", 3, \"DriveForDistanceCommand()\");\n\n    m_subsystem = subsystem;\n\n    \/\/ Save the parameter variables for motor power and run time\n    m_power = power;\n    m_distance = distance;\n    m_leftEncoder = m_subsystem.getLeftEncoder();\n\n    \/\/ Use addRequirements() here to declare subsystem dependencies.\n    addRequirements(m_subsystem);\n  }\n\n  \/\/ Called when the command is initially scheduled.\n  @Override\n  public void initialize() {\n    Logger.log(\"DriveForDistanceCommand\", 2, \"initialize()\");\n\n    m_subsystem.setPower(m_power, m_power);\n\n    \/\/ Reset Encoder before using\n    m_leftEncoder.reset();\n  }\n\n  \/\/ Called every time the scheduler runs while the command is scheduled.\n  @Override\n  public void execute() {\n    Logger.log(\"DriveForDistanceCommand\", -1, \"execute()\");\n  }\n\n  \/\/ Called once the command ends or is interrupted.\n  @Override\n  public void end(boolean interrupted) {\n    Logger.log(\"DriveForDistanceCommand\", 2, String.format(\"end(%b)\", interrupted));\n\n    m_subsystem.stop();\n  }\n\n  \/\/ Returns true when the command should end.\n  @Override\n  public boolean isFinished() {\n    Logger.log(\"DriveForDistanceCommand\", -1, \"isFinished()\");\n\n    return (m_leftEncoder.get() &gt;= m_distance);\n  }\n}\n<\/code><\/pre>\n\n\n\n<p>We now need configure joystick button 2 so when it is pressed we will run the <strong>DriveForDistanceCommand<\/strong>. Add one line to <strong>RobotContainer<\/strong>&#8216;s <em>configureButtonbindings()<\/em> method:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private void configureButtonBindings() {\n    m_joystick.button(1).onTrue(new DriveForTimeCommand(m_driveSubsystem, 0.50, 3.0));\n    m_joystick.button(2).onTrue(new DriveForDistanceCommand(m_driveSubsystem, 0.75, 2000));\n  }<\/code><\/pre>\n\n\n\n<p>Note that the\u00a0<strong>distance<\/strong>\u00a0that we are passing in are in somewhat arbitrary\u00a0<strong>units<\/strong>. The\u00a0<strong>Encoder<\/strong>\u00a0counts are somewhat arbitrary as they depend on the particular motor\/encoder and the size of the wheel. We have chosen <strong>2000<\/strong>\u00a0here just to test this command. Later we will perform a conversion which will allow us to use real world units such as inches.<\/p>\n\n\n\n<p>Your&nbsp;<strong>RobotContainer.java<\/strong>&nbsp;file should now look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot;\n\nimport edu.wpi.first.wpilibj.XboxController;\nimport edu.wpi.first.wpilibj2.command.Command;\nimport edu.wpi.first.wpilibj2.command.button.CommandJoystick;\nimport frc.robot.commands.ArcadeDriveCommand;\nimport frc.robot.commands.DriveForDistanceCommand;\nimport frc.robot.commands.DriveForTimeCommand;\nimport frc.robot.commands.ExampleCommand;\nimport frc.robot.subsystems.DriveSubsystem;\nimport frc.robot.subsystems.ExampleSubsystem;\n\n\/**\n * This class is where the bulk of the robot should be declared. Since\n * Command-based is a \"declarative\" paradigm, very little robot logic should\n * actually be handled in the {@link Robot} periodic methods (other than the\n * scheduler calls). Instead, the structure of the robot (including subsystems,\n * commands, and button mappings) should be declared here.\n *\/\npublic class RobotContainer {\n  \/\/ The robot's subsystems and commands are defined here...\n  @SuppressWarnings(\"unused\")\n  private final ExampleSubsystem m_exampleSubsystem = new ExampleSubsystem();\n  private final DriveSubsystem m_driveSubsystem = new DriveSubsystem();\n  private final CommandJoystick m_joystick = new CommandJoystick(0);\n\n  private final ExampleCommand m_autoCommand = null; \/\/ new ExampleCommand(m_exampleSubsystem);\n\n  \/**\n   * The container for the robot. Contains subsystems, OI devices, and commands.\n   *\/\n  public RobotContainer() {\n    m_driveSubsystem.setDefaultCommand(new ArcadeDriveCommand(m_driveSubsystem, m_joystick));\n\n    \/\/ Configure the button bindings\n    configureButtonBindings();\n  }\n\n  \/**\n   * Use this method to define your button->command mappings. Buttons can be\n   * created by instantiating a {@link GenericHID} or one of its subclasses\n   * ({@link edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then\n   * passing it to a {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.\n   *\/\n  private void configureButtonBindings() {\n    m_joystick.button(1).onTrue(new DriveForTimeCommand(m_driveSubsystem, 0.50, 3.0));\n    m_joystick.button(2).onTrue(new DriveForDistanceCommand(m_driveSubsystem, 0.75, 2000));\n  }\n\n  \/**\n   * Use this to pass the autonomous command to the main {@link Robot} class.\n   *\n   * @return the command to run in autonomous\n   *\/\n  public Command getAutonomousCommand() {\n    \/\/ An ExampleCommand will run in autonomous\n    return m_autoCommand;\n  }\n}\n<\/code><\/pre>\n\n\n\n<p>Now run your program and click the&nbsp;<strong>B2<\/strong>&nbsp;button. You should find that your robot will drive a short distance and then stop. Also note that since we are now using distance rather than time, we can change the speed and the robot should still move the same distance. Try it out and see.<\/p>\n\n\n\n<p><a href=\"\/speed-control\/\" data-type=\"page\">Next: Speed Control<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>So far we have been controlling the motors by setting their power. Unfortunately, this is not ideal because the power only indirectly controls the speed, which is what we are really interested in. As we have already seen, our robot does not exactly drive straight when we apply the same power to both wheels. This&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/wheel-encoders\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Wheel Encoders<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/167"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=167"}],"version-history":[{"count":39,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/167\/revisions"}],"predecessor-version":[{"id":4867,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/167\/revisions\/4867"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=167"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}