{"id":3114,"date":"2024-09-01T01:22:11","date_gmt":"2024-09-01T01:22:11","guid":{"rendered":"http:\/\/programming.team2102.org\/?page_id=3114"},"modified":"2025-08-19T03:02:11","modified_gmt":"2025-08-19T03:02:11","slug":"path-following-3","status":"publish","type":"page","link":"http:\/\/gabybot.com\/path-following-3\/","title":{"rendered":"Path Following"},"content":{"rendered":"\n<p>The most interesting part of robot programming is the creation of autonomous actions where the robot performs a specific task without any human intervention. One important requirement for such autonomous routines is the ability of the robot to follow some precise path on the field.<\/p>\n\n\n\n<p>To solve this problem we will be using a tool called <strong>PathPlanner <\/strong>which can be found <a rel=\"noreferrer noopener\" href=\"https:\/\/github.com\/mjansen4857\/pathplanner\" target=\"_blank\">here<\/a>. This tool allows you to create these paths and hook them together along with other commands to create fully autonomous routines. In this chapter we will learn how to use this tool to create these paths and how to combine them with our own commands to get the robot to autonomously drive and shoot balls into a series of targets.<\/p>\n\n\n\n<p>Double click on the <strong>pathplanner.exe<\/strong> file in the <strong>PathPlanner <\/strong>folder of utils and you should see:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/PathPlanner1-1024x634.jpg\" alt=\"\" class=\"wp-image-3332\" width=\"564\" height=\"349\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner1-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner1-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner1-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner1-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner1.jpg 1100w\" sizes=\"(max-width: 564px) 100vw, 564px\" \/><\/figure><\/div>\n\n\n\n<p>Here we have set up an example path on the left. Clicking on that will give you:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/PathPlanner2-1024x634.jpg\" alt=\"\" class=\"wp-image-3333\" width=\"562\" height=\"347\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner2-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner2-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner2-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner2-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner2.jpg 1100w\" sizes=\"(max-width: 562px) 100vw, 562px\" \/><\/figure><\/div>\n\n\n\n<p>This display is actually animated and will show you the path of the robot. If you open the Start Point dropdown you can see the robot&#8217;s starting position for this path:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/PathPlanner3-1024x634.jpg\" alt=\"\" class=\"wp-image-3334\" width=\"563\" height=\"348\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner3-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner3-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner3-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner3-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner3.jpg 1100w\" sizes=\"(max-width: 563px) 100vw, 563px\" \/><\/figure><\/div>\n\n\n\n<p> Here we can see that the robot starts at (x,y) = (1,3) (in meters) at a heading of  -45 degrees. Note that the heading specifies the direction the robot will move, not the direction the robot is pointed. You can manually enter new numbers for the position and heading and you can also drag those points around. For example, I can drag the yellow line to that it is horizontal (i.e heading = 0 degrees) and the robot will move differently:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/PathPlanner4-1024x634.jpg\" alt=\"\" class=\"wp-image-3336\" width=\"558\" height=\"346\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner4-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner4-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner4-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner4-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner4.jpg 1100w\" sizes=\"(max-width: 558px) 100vw, 558px\" \/><\/figure><\/div>\n\n\n\n<p>Notice how this change changes the path the robot will take. The grey line shows you the actual path.<\/p>\n\n\n\n<p>The ending point can be edited in a similar manner by opening the <strong>End Point<\/strong> dropdown:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/PathPlanner5-1024x634.jpg\" alt=\"\" class=\"wp-image-3337\" width=\"573\" height=\"354\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner5-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner5-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner5-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner5-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner5.jpg 1100w\" sizes=\"(max-width: 573px) 100vw, 573px\" \/><\/figure><\/div>\n\n\n\n<h4>Autonomous Commands<\/h4>\n\n\n\n<p>Now that we have a path we need to create an autonomous path that we can command the robot to follow. From the main Pathplanner page, click the + button in the upper right corner:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/PathPlanner1anotated-1024x634.jpg\" alt=\"\" class=\"wp-image-3339\" width=\"565\" height=\"349\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner1anotated-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner1anotated-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner1anotated-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner1anotated-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlanner1anotated.jpg 1100w\" sizes=\"(max-width: 565px) 100vw, 565px\" \/><\/figure><\/div>\n\n\n\n<p>and you should see as <strong>New Auto<\/strong> created. Click in the name field and change the name to <strong>Auto1<\/strong>:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/PathPlannerAuto1-1024x634.jpg\" alt=\"\" class=\"wp-image-3338\" width=\"568\" height=\"351\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlannerAuto1-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlannerAuto1-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlannerAuto1-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlannerAuto1-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlannerAuto1.jpg 1100w\" sizes=\"(max-width: 568px) 100vw, 568px\" \/><\/figure><\/div>\n\n\n\n<p>You can now click on <strong>Auto1 <\/strong>to edit it:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/PathPlannerAuto2-1024x634.jpg\" alt=\"\" class=\"wp-image-3340\" width=\"583\" height=\"361\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlannerAuto2-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlannerAuto2-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlannerAuto2-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlannerAuto2-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathPlannerAuto2.jpg 1100w\" sizes=\"(max-width: 583px) 100vw, 583px\" \/><\/figure><\/div>\n\n\n\n<p>The first thing we must do is to set the <strong>Starting Pose<\/strong> so click on that dropdown:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/StartingPose-1024x634.jpg\" alt=\"\" class=\"wp-image-3343\" width=\"587\" height=\"363\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/StartingPose-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/StartingPose-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/StartingPose-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/StartingPose-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/StartingPose.jpg 1100w\" sizes=\"(max-width: 587px) 100vw, 587px\" \/><\/figure><\/div>\n\n\n\n<p>We will always be starting our robot within the view of one of the <strong>Apriltags <\/strong>and the robot&#8217;s position will be set from that so we don&#8217;t want the <strong>Pathplanner <\/strong>to set the initial Pose so be sure to uncheck the <strong>Preset Starting Pose<\/strong> checkbox.<\/p>\n\n\n\n<p>Now we want to add our first command to run which will be the <strong>Example Path<\/strong> we were just looking at. Click on the <strong>&#8220;+&#8221;<\/strong> in the <strong>Sequential Group<\/strong> section:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/AddPath-1024x634.jpg\" alt=\"\" class=\"wp-image-3344\" width=\"589\" height=\"365\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/AddPath-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/AddPath-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/AddPath-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/AddPath-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/AddPath.jpg 1100w\" sizes=\"(max-width: 589px) 100vw, 589px\" \/><\/figure><\/div>\n\n\n\n<p>Then choose the <strong>Follow Path<\/strong> option:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/SelectPath-1024x634.jpg\" alt=\"\" class=\"wp-image-3347\" width=\"598\" height=\"370\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/SelectPath-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/SelectPath-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/SelectPath-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/SelectPath-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/SelectPath.jpg 1100w\" sizes=\"(max-width: 598px) 100vw, 598px\" \/><\/figure><\/div>\n\n\n\n<p>Then click on the <strong>Path Name<\/strong> option and choose the <strong>Example Path<\/strong>:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/PathSaved-1024x634.jpg\" alt=\"\" class=\"wp-image-3349\" width=\"605\" height=\"375\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathSaved-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathSaved-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathSaved-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathSaved-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathSaved.jpg 1100w\" sizes=\"(max-width: 605px) 100vw, 605px\" \/><\/figure><\/div>\n\n\n\n<p>We can see that the robot will follow the <strong>Example Path<\/strong> that we created earlier.<\/p>\n\n\n\n<h4>Configure Pathplanner<\/h4>\n\n\n\n<p>Before we can create any commands we must first configure <strong>Pathplanner<\/strong>. We do this by adding a call to <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classcom_1_1pathplanner_1_1lib_1_1auto_1_1_auto_builder.html#a07495d291a0a77155bc0c891bfd49721\" target=\"_blank\">AutoBuilder.configureHolonomic<\/a><\/strong> in the constructor of our <strong>DriveSubsystem<\/strong>.<\/p>\n\n\n\n<p>Looking at the documentation for this function we will need to supply seven pieces of information:<\/p>\n\n\n\n<p><strong>1)<\/strong> <strong>Robot&#8217;s position and orientation<\/strong>.<\/p>\n\n\n\n<p>The first parameter of the <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classcom_1_1pathplanner_1_1lib_1_1auto_1_1_auto_builder.html#a07495d291a0a77155bc0c891bfd49721\" target=\"_blank\">configureHolonomic<\/a> function is the position and orientation of the robot provided as a <strong>Pose2d <\/strong>structure. Let&#8217;s create a function to return this so we can get it whenever we need.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public Pose2d getPose2d() {\n    return m_poseEstimator.getEstimatedPosition();\n  }<\/code><\/pre>\n\n\n\n<p>Note that we are using the <strong>getEstimatedPosition <\/strong>function to obtain our best guess as to where the robot is.<\/p>\n\n\n\n<p><strong>2) Function that resets the robot&#8217;s pose (position and orientation) to a specified value.<\/strong><\/p>\n\n\n\n<p>Once again, we should create a function which will do this. Note that since we will be tracking the robot&#8217;s position using the <strong>Odometry <\/strong>and <strong>Apriltags<\/strong>, we will never actually let the <strong>Pathplanner <\/strong>set the robot&#8217;s position. Nonetheless we need to provide this function:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private void ResetPose(Pose2d pose) {\n    m_poseEstimator.resetPosition(m_gyro.getRotation2d(), getModulePositions(), pose);\n  }<\/code><\/pre>\n\n\n\n<p><strong>3) Robot&#8217;s relative chassis speed.<\/strong><\/p>\n\n\n\n<p>We need to compute and return the current relative chassis speed which we can do with the following function:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public ChassisSpeeds getChassisSpeeds() {\n    return m_kinematics.toChassisSpeeds(getModuleStates());\n  }<\/code><\/pre>\n\n\n\n<p>Note that we are using the <strong>wpilib <\/strong>function <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1kinematics_1_1_swerve_drive_kinematics.html#a5299d1cd1cc76135726eeecee963284f\" target=\"_blank\">toChassisSpeeds<\/a><\/strong> to perform this calculation (which is fairly complex). This uses a function <strong>getModuleStates <\/strong>which returns the current state for each of the four modules. We can create this function as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public SwerveModuleState&#91;] getModuleStates() {\n    SwerveModuleState&#91;] states = {\n        m_frontLeft.getState(), m_frontRight.getState(), m_backLeft.getState(),\n        m_backRight.getState() };\n    return states;\n  }<\/code><\/pre>\n\n\n\n<p>Pay close attention the order of these states. They must match the order you used when you instantiated your <strong><a href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1kinematics_1_1_swerve_drive_kinematics.html#ae3c0146bcaeff6e893aafb3e15a66708\" target=\"_blank\" rel=\"noreferrer noopener\">SwerveDriveKinematics<\/a> <\/strong>class.<\/p>\n\n\n\n<p><strong>4) Function which sets the chassis speed.<\/strong><\/p>\n\n\n\n<p>This function sets the current chassis speed and can be defined as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public void setChassisSpeeds(ChassisSpeeds chassisSpeeds) {\n    setModuleStates(m_kinematics.toSwerveModuleStates(chassisSpeeds));\n  }<\/code><\/pre>\n\n\n\n<p>Once again this function will use a <strong>wpilib <\/strong>function <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1kinematics_1_1_swerve_drive_kinematics.html#ab42096153568edc426fa990904b31090\" target=\"_blank\">toServeModuleStates<\/a><\/strong> which will compute the necessary state for each of the swerve module to get the robot to move as commanded. Note that this uses the <strong>setModuleStates <\/strong>function which we previously created.<\/p>\n\n\n\n<p><strong>5) Sets the <a href=\"\/RobotCoreDoc\/classcom_1_1pathplanner_1_1lib_1_1util_1_1_holonomic_path_follower_config.html#a1237385cf99650c49fd7ba7097a71e66\" target=\"_blank\" rel=\"noreferrer noopener\">HolonomicPathFollowerConfig<\/a>.<\/strong> <\/p>\n\n\n\n<p>This parameter configures the path following characteristics and can be created as:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>        new HolonomicPathFollowerConfig(\n            new PIDConstants(1, 0, 0),\n            new PIDConstants(1, 0, 0),\n            k_maxDriveSpeedMetersPerSecond,\n            (3.266 * 2.54) \/ 100,\n            new ReplanningConfig(false, false)),\n<\/code><\/pre>\n\n\n\n<p>This class contains a number of fields:<\/p>\n\n\n\n<ul><li>PID values to be used for the robot&#8217;s translation (i.e. horizontal and vertical movement)<\/li><li>PID values to be used for the robot&#8217;s rotation.<\/li><li>The max speed of the individual swerve module wheels in meters\/sec<\/li><li>The <strong>Drive Base Radius<\/strong> which is the distance from the center of the robot to the furthest swerve wheel<\/li><li>The <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classcom_1_1pathplanner_1_1lib_1_1util_1_1_replanning_config.html#abee7139530b10781bb4ce82e9aea0b25\" target=\"_blank\">ReplanningConfig<\/a><\/strong> which controls whether the path is automatically reconfigured at the beginning and ending of the path if the robot isn&#8217;t at the correct position. For our paths, we don&#8217;t want any reconfiguration.<\/li><\/ul>\n\n\n\n<p><strong>6) Boolean supplier specifying whether the path needs to be flipped.<\/strong><\/p>\n\n\n\n<p>This is used for the 2024 FRC field but we will not be needing to flip the path so this parameter will always return <strong>false<\/strong>.<\/p>\n\n\n\n<p><strong>7) Subsystem<\/strong><\/p>\n\n\n\n<p>Specifies the subsystem that controls the swerve modules.<\/p>\n\n\n\n<p>Now that we have defined all the functions we need, we can call the<strong> <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classcom_1_1pathplanner_1_1lib_1_1auto_1_1_auto_builder.html#a07495d291a0a77155bc0c891bfd49721\" target=\"_blank\">configureHolonomic<\/a><\/strong> function in the constructor of our <strong>DriveSubsystem<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    AutoBuilder.configureHolonomic(this::getPose2d,\n        this::ResetPose,\n        this::getChassisSpeeds,\n        this::setChassisSpeeds,\n        new HolonomicPathFollowerConfig(\n            new PIDConstants(1.5, 0, 0),\n            new PIDConstants(3, 0, 0),\n            k_maxDriveSpeedMetersPerSecond,\n            k_driveBaseRadius,\n            new ReplanningConfig(false, false)),\n        () -&gt; false,\n        this);<\/code><\/pre>\n\n\n\n<h4>Creating an autonomous command<\/h4>\n\n\n\n<p>We are now ready to create our first autonomous command. We will create a command that will simply drive the path we create at the beginning of this chapter. We can define the new path command by adding the following to the constructor of the <strong>RobotContainer <\/strong>class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_auto1 = new PathPlannerAuto(\"Auto1\");<\/code><\/pre>\n\n\n\n<p>Where we have defined <strong>m_auto1 <\/strong>as:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private final PathPlannerAuto m_auto1;<\/code><\/pre>\n\n\n\n<p>Now attach the command to a button:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_commandJoystick.button(11).onTrue(m_auto1);<\/code><\/pre>\n\n\n\n<p>Set up the robot so that it starts 2 meters from the center <strong>Apriltag <\/strong>(i.e. tag #4), pointing directly at the tag. Then run the command and the robot should drive to the right of the center and rotate so that it is facing left.<\/p>\n\n\n\n<p>Now when you run the command you may find that the robot does not actually reach the desired point and does not quite turn to the desired angle. This behavior can be improved by increasing the <strong>P terms<\/strong> for the <strong>Translation <\/strong>and <strong>Rotation <\/strong>PID controllers as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    AutoBuilder.configureHolonomic(this::getPose2d,\n        this::ResetPose,\n        this::getChassisSpeeds,\n        this::setChassisSpeeds,\n        new HolonomicPathFollowerConfig(\n            new PIDConstants(2, 0, 0),    \/\/ Change these lines\n            new PIDConstants(2.5, 0, 0),  \/\/ Change these lines\n            k_maxDriveSpeedMetersPerSecond,\n            (3.266 * 2.54) \/ 100,\n            new ReplanningConfig(false, false)),\n        () -&gt; false,\n        this);<\/code><\/pre>\n\n\n\n<p>Note the changes made to the <strong>PIDConstants<\/strong>. By adjusting these numbers you can adjust how fast the robot responds to <strong>Translation <\/strong>and <strong>Rotation <\/strong>commands.<\/p>\n\n\n\n<h4>Adding other commands<\/h4>\n\n\n\n<p>Now we are going to want to do other things in our autonomous routines that just drive. For our autonomous routine, we are going to drive from the start position to a position that will allow us to shoot into target <strong>#1<\/strong>. So we want to add code that will automatically <strong>spin up the shooter<\/strong> and then <strong>shoot 10<\/strong> balls when it reaches the target and finally <strong>stop <\/strong>when complete.<\/p>\n\n\n\n<p>Now we have a <strong>SpinupCommand <\/strong>which we can use to spin-up the shooter wheel. Unfortunately this command never ends automatically (remember that we attached it to a button using <strong>toggleOnTrue<\/strong>) so we can&#8217;t simply run this command followed by the path command because this command will never end.<\/p>\n\n\n\n<p>To get around this problem, we will need to run the <strong>SpinupCommand <\/strong>in parallel with the path command. To do this we will be using one of the <strong>Parallel Commands Groups<\/strong> that allows us to run commands in parallel. There are three such command available but we will choose <strong><a href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1wpilibj2_1_1command_1_1_parallel_race_group.html\">ParallelRaceGroup<\/a><\/strong>. This type of command allow us to run commands in parallel and will end when the first command of the group ends.<\/p>\n\n\n\n<p>In the <strong>Pathplanner<\/strong> Auto editor, click on the <strong>&#8216;+&#8217;<\/strong> and add a new <strong>Parallel Race Group<\/strong>:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/RaceGroup-1024x634.jpg\" alt=\"\" class=\"wp-image-3409\" width=\"602\" height=\"373\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup.jpg 1100w\" sizes=\"(max-width: 602px) 100vw, 602px\" \/><\/figure><\/div>\n\n\n\n<p>This will create a new <strong>ParallelRaceGroup <\/strong>command:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/RaceGroup2-1024x634.jpg\" alt=\"\" class=\"wp-image-3410\" width=\"608\" height=\"376\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup2-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup2-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup2-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup2-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup2.jpg 1100w\" sizes=\"(max-width: 608px) 100vw, 608px\" \/><\/figure><\/div>\n\n\n\n<p>Now, it would really be nice if there was a way to move our <strong>Example Path<\/strong> into the<strong> Race Group<\/strong>, but, as far as I can tell there is not so we need to delete the <strong>Example Path<\/strong> by clicking on the <strong>&#8216;x&#8217;<\/strong> next to it and add it back in later.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/RaceGroup3-1024x634.jpg\" alt=\"\" class=\"wp-image-3413\" width=\"622\" height=\"385\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup3-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup3-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup3-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup3-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RaceGroup3.jpg 1100w\" sizes=\"(max-width: 622px) 100vw, 622px\" \/><\/figure><\/div>\n\n\n\n<p>Now we need to add our <strong>SpinupCommand <\/strong>to the race group. Click on the <strong>&#8216;+&#8217;<\/strong> button within the <strong>Race Group<\/strong> and choose <strong>Named Command<\/strong> and then enter the name <strong>Spinup <\/strong>in the <strong>Command Name<\/strong> box:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/Spinup-1024x634.jpg\" alt=\"\" class=\"wp-image-3416\" width=\"623\" height=\"386\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Spinup-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Spinup-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Spinup-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Spinup-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Spinup.jpg 1100w\" sizes=\"(max-width: 623px) 100vw, 623px\" \/><\/figure><\/div>\n\n\n\n<p>This will cause a command which we have named <strong>Spinup <\/strong>to run. We will need to add code to our project so that <strong>Pathplanner <\/strong>can find this command and we will do that later.<\/p>\n\n\n\n<p>Now, in parallel with the <strong>SpinupCommand <\/strong>we are going to want to run two commands sequentially. The first is the <strong>Example Path<\/strong> command we created earlier which will move the robot to the shooting position, and the second is the <strong>FeederCommand <\/strong>which will actually shoot the balls.<\/p>\n\n\n\n<p>To make this happen, we need to create a <strong>SequentialCommandGroup <\/strong>within the <strong>Race Group<\/strong>. Once again click on the <strong>&#8216;+&#8217;<\/strong> button within the Race Group and choose the <strong>Sequential Command Group<\/strong> option:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/Sequential-1024x634.jpg\" alt=\"\" class=\"wp-image-3419\" width=\"637\" height=\"394\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Sequential-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Sequential-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Sequential-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Sequential-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Sequential.jpg 1100w\" sizes=\"(max-width: 637px) 100vw, 637px\" \/><\/figure><\/div>\n\n\n\n<p>This should result in the following:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/Sequential2-1024x634.jpg\" alt=\"\" class=\"wp-image-3420\" width=\"639\" height=\"396\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Sequential2-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Sequential2-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Sequential2-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Sequential2-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Sequential2.jpg 1100w\" sizes=\"(max-width: 639px) 100vw, 639px\" \/><\/figure><\/div>\n\n\n\n<p>Now add the <strong>Example Path<\/strong> to the <strong>Sequential Group<\/strong> by clicking on the <strong>&#8216;+&#8217; <\/strong>in that group and choosing the <strong>Follow Path<\/strong> option:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/FollowPath2-1024x634.jpg\" alt=\"\" class=\"wp-image-3423\" width=\"639\" height=\"396\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/FollowPath2-1024x634.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/FollowPath2-300x186.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/FollowPath2-150x93.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/FollowPath2-768x475.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/FollowPath2.jpg 1100w\" sizes=\"(max-width: 639px) 100vw, 639px\" \/><\/figure><\/div>\n\n\n\n<p>Then choose <strong>Example Path<\/strong> from the <strong>Path Name<\/strong> dropdown:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/PathName-1024x595.jpg\" alt=\"\" class=\"wp-image-3424\" width=\"639\" height=\"370\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathName-1024x595.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathName-300x174.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathName-150x87.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathName-768x446.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/PathName.jpg 1172w\" sizes=\"(max-width: 639px) 100vw, 639px\" \/><\/figure><\/div>\n\n\n\n<p>Now in the same <strong>Sequential Group<\/strong> add two <strong>Named Command<\/strong>s one called <strong>Aim <\/strong>and a second called <strong>Shoot<\/strong>:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/Aim-1024x668.jpg\" alt=\"\" class=\"wp-image-3428\" width=\"642\" height=\"418\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Aim-1024x668.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Aim-300x196.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Aim-150x98.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Aim-768x501.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/Aim.jpg 1172w\" sizes=\"(max-width: 642px) 100vw, 642px\" \/><\/figure><\/div>\n\n\n\n<p>We are now about ready to run our autonomous command but first we need to define the three <strong>Named Commands<\/strong> in our code. In the <strong>constructor <\/strong>for <strong>RobotContainer <\/strong>add the following lines:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    NamedCommands.registerCommand(\"Shoot\", new FeederCommand(m_feederSubsystem, true, 10));\n    NamedCommands.registerCommand(\"Aim\", new TurnToTarget(m_driveSubsystem, 2));\n    NamedCommands.registerCommand(\"Spinup\", new SpinupCommand(m_shooterSubsystem));\n\n    m_auto1 = new PathPlannerAuto(\"Auto1\");<\/code><\/pre>\n\n\n\n<p>They should be added before you instantiate the auto path.<\/p>\n\n\n\n<p>You are now ready to try out your new auto!<\/p>\n\n\n\n<p><a href=\"\/final-challenge-2\/\" data-type=\"page\" data-id=\"3440\">Next: Final Challenge<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>The most interesting part of robot programming is the creation of autonomous actions where the robot performs a specific task without any human intervention. One important requirement for such autonomous routines is the ability of the robot to follow some precise path on the field. To solve this problem we will be using a tool&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/path-following-3\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Path Following<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/3114"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=3114"}],"version-history":[{"count":53,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/3114\/revisions"}],"predecessor-version":[{"id":4886,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/3114\/revisions\/4886"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=3114"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}