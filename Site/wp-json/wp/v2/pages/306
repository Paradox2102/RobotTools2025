{"id":306,"date":"2021-04-07T01:15:39","date_gmt":"2021-04-07T01:15:39","guid":{"rendered":"http:\/\/gabybot.com\/?page_id=306"},"modified":"2024-09-02T19:05:15","modified_gmt":"2024-09-02T19:05:15","slug":"vision-tracking","status":"publish","type":"page","link":"http:\/\/gabybot.com\/vision-tracking\/","title":{"rendered":"Vision Tracking"},"content":{"rendered":"\n<p>In this chapter we are going to use the camera to control the Turret to automatically track the target. The class that we will use to connect to the camera is called <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_pi_camera.html\" target=\"_blank\">PiCamera<\/a><\/strong>. Now rather than use the <strong>PiCamera <\/strong>class directly, we are going to create our own class which will encapsulate the <strong>PiCamera <\/strong>class and allow us to connect to the camera as well as manage the frame data in an organized way.<\/p>\n\n\n\n<p>Since accessing and manipulating the camera is complex I am going to provide you with code for this <strong>Camera<\/strong> class which handles the connection to the camera and manages retrieving the frames.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package robot;\n\nimport robotCore.Device;\nimport robotCore.DigitalOutput;\nimport robotCore.Logger;\nimport robotCore.PiCamera;\nimport robotCore.PiCamera.PiCameraRegion;\nimport robotCore.PiCamera.PiCameraRegions;\n\npublic class Camera {\n    \/\/ @SuppressWarnings(\"unused\")\n    private final static String m_ip = \"172.24.1.1\";\n\tprivate static final int k_pin = Device.M3_2_PWM;\n\n    private final PiCamera m_camera = new PiCamera();\n    private final DigitalOutput m_light = new DigitalOutput(k_pin);\n\n    public class CameraFrame\n    {\n        PiCameraRegions m_regions = m_camera.getRegions();\n\n        \/*\n         *\n         * Returns true if there is at least one region visible\n         *\/\n        public boolean isVisible()\n        {\n            return (m_regions != null) &amp;&amp; (m_regions.getRegionCount() &gt;= 1);\n        }\n\n        \/*\n         * Returns the horizontal center of the first visible region with respect to the\n         * horizontal target position set by the image viewer\n         * \n         * NOTE: This function should ONLY be called if isVisible returns true\n         *\/\n        public int getTargetCenter() {\n                PiCameraRegion region = m_regions.getRegion(0);\n\n            \/\/ Logger.Log(\"Camera\", 1, String.format(\"left=%d, right=%d\", region.m_topLeft, region.m_topRight));\n    \n            return ((region.m_bounds.m_left + region.m_bounds.m_right) \/ 2) - m_regions.m_targetHorzPos;\n        }    \n    }\n\n    public Camera() {\n        m_camera.connect(m_ip, 5800);\n    }\n\n    public void setLight(boolean on) {\n        Logger.log(\"Camera\", 2, String.format(\"SetLight: %s\", on ? \"on\" : \"off\"));\n\n        m_light.set(on);\n    }\n\n    public CameraFrame getCurrentFrame()\n    {\n        return new CameraFrame();\n    }\n}\n<\/code><\/pre>\n\n\n\n<p>You will also notice that you can control the green <strong>LED<\/strong> via the <strong>setLight<\/strong> function. Before we continue you need to create a <strong>Light <\/strong>command which will let you toggle whether the light is on or off. You will need to use this command in the next section.<\/p>\n\n\n\n<p>Before you can use the camera, you will need to learn how to use the <strong>Image Viewer<\/strong> to preview the camera image and manage the camera settings. Run the program <strong>ImageViewer2020.cmd<\/strong> that resides in the <strong>PiUtil<\/strong> folder and you should see something like:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/04\/ViewerAmbientLight.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/04\/ViewerAmbientLight-1024x640.jpg\" alt=\"\" class=\"wp-image-311\" width=\"613\" height=\"382\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerAmbientLight-1024x640.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerAmbientLight-300x187.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerAmbientLight-768x480.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerAmbientLight.jpg 1124w\" sizes=\"(max-width: 613px) 100vw, 613px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>The image shows the view from the camera. Currently we have the camera set to use ambient light, but we will want to change that. The vision system works by matching a specific color. This works best if the your target is the only thing that is emitting that color. To accomplish this we will be using <strong>retroreflective <\/strong>tape and a <strong>green <\/strong>light. The retroreflective tape will reflect the green light back in the direction of the camera and we will be able to match that green color.<\/p>\n\n\n\n<p>The first thing we need to do is to set the camera parameters so that the camera can only see light sources (everything else will be black). With the Image Viewer running, change the shutter speed to 1000 and the ISO to 150 and the view should become black:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/04\/ViewerBlack.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/04\/ViewerBlack-1024x640.jpg\" alt=\"\" class=\"wp-image-312\" width=\"628\" height=\"392\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerBlack-1024x640.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerBlack-300x187.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerBlack-768x480.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerBlack.jpg 1124w\" sizes=\"(max-width: 628px) 100vw, 628px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Now turn on the light using the command you previously created and you should see a green image from the reflective tape:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/04\/ViewerGreen.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/04\/ViewerGreen-1024x640.jpg\" alt=\"\" class=\"wp-image-313\" width=\"637\" height=\"397\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerGreen-1024x640.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerGreen-300x187.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerGreen-768x480.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerGreen.jpg 1124w\" sizes=\"(max-width: 637px) 100vw, 637px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Next we will adjust the parameters on the right so that the camera system recognizes the target. We recognize the target by looking for a specific color, in this case green. To match the color, we don\u2019t use the <strong>RGB<\/strong> color space, but rather an alternate <strong>HSV<\/strong> color space. <strong>HSV<\/strong> stands for <strong>Hue<\/strong>, <strong>Saturation<\/strong>, and <strong>Value<\/strong>. The <strong>Hue<\/strong> specifies the actual color (green in this case). The <strong>Saturation<\/strong> specifies how vivid the color is with a zero saturation being a black and white image and max saturation being the most robust colors. The <strong>Value<\/strong> specifies how bright the image is.<\/p>\n\n\n\n<p>You can click on any portion of the image and the HSV values for that pixel will be displayed at the bottom. For example in this particular example, a pixel in the green region would show:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"387\" height=\"115\" src=\"\/wp-content\/uploads\/2021\/04\/HSVValues.jpg\" alt=\"\" class=\"wp-image-316\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/HSVValues.jpg 387w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/HSVValues-300x89.jpg 300w\" sizes=\"(max-width: 387px) 100vw, 387px\" \/><\/figure><\/div>\n\n\n\n<p>Here we can see that the pixel at position <strong>(334, 251)<\/strong> has a <strong>Hue<\/strong> of <strong>85<\/strong>, a <strong>Saturation<\/strong> of <strong>255 <\/strong>and a <strong>Value<\/strong> of <strong>223<\/strong>. We can then set ranges for those values on the right and we should get the following:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/04\/ViewerTarget.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/04\/ViewerTarget-1024x640.jpg\" alt=\"\" class=\"wp-image-317\" width=\"646\" height=\"403\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerTarget-1024x640.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerTarget-300x187.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerTarget-768x480.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/ViewerTarget.jpg 1124w\" sizes=\"(max-width: 646px) 100vw, 646px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>In this image, the camera has replaced any green pixels that match the color settings on the right with blue pixels. In addition a bounding box for the image is computed and displayed as a green box. The vertical green line shows the center of the bounding box for the image. You will also notice a vertical red line. The position of this line can be adjusted by changing the <strong>Center Line<\/strong> field on the right. We will later use this line to allow us to fine tune the centering of the <strong>Turret<\/strong>.<\/p>\n\n\n\n<p>Now you are ready to create your <strong>Track Target<\/strong> command. The basic idea is to call the <strong>getCurrentFrame()<\/strong> function within the <strong>execute()<\/strong> function of your command to retrieve the current frame from the camera. Then call <strong>getTargetCenter()<\/strong> to get the offset of the center of the target from the <strong>Center Line<\/strong> as set by the <strong>Image Viewer<\/strong>.  And then set the power of the <strong>Turret<\/strong> motor based on how far off of the center the target is. The further off, the more power you should use. You power calculation should be something like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  power = kp * getTargetCenter();<\/code><\/pre>\n\n\n\n<p>Here you will need adjust the value of <strong>kp<\/strong> as you did for the <strong>P<\/strong> parameter when tuning the motor speeds. You will probably find that you will also need to add a <strong>dead zone<\/strong> to keep the camera from oscillating. This would be a small region around the center line where you turn the motor off. Note that since we are measuring the offset of the center of the bounding box from the red <strong>Center Line<\/strong>, we can control the position of that line from the <strong>Image Viewer<\/strong> and fine tune the shot.<\/p>\n\n\n\n<p>Remember, you should <strong>not<\/strong> call <strong>getTargetCenter()<\/strong> until you have checked to see that the target is visible by calling <strong>isVisible()<\/strong>. If you find that you can no longer see the target then you should stop the motor.<\/p>\n\n\n\n<p>Finally, you should turn on the LED in your <strong>initialize()<\/strong> function and turn it off, along with the motor, in your <strong>end()<\/strong> function. You will also need to tie this command to a toggle button which lets you turn tracking on and off.<\/p>\n\n\n\n<p><a href=\"\/path-following\/\" data-type=\"page\" data-id=\"1399\">Next: Path Planning<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter we are going to use the camera to control the Turret to automatically track the target. The class that we will use to connect to the camera is called PiCamera. Now rather than use the PiCamera class directly, we are going to create our own class which will encapsulate the PiCamera class&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/vision-tracking\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Vision Tracking<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/306"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=306"}],"version-history":[{"count":15,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/306\/revisions"}],"predecessor-version":[{"id":3136,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/306\/revisions\/3136"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=306"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}