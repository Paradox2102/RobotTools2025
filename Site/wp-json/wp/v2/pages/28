{"id":28,"date":"2021-04-06T04:07:44","date_gmt":"2021-04-06T04:07:44","guid":{"rendered":"http:\/\/johngaby-001-site9.gtempurl.com\/?page_id=28"},"modified":"2024-09-02T21:00:43","modified_gmt":"2024-09-02T21:00:43","slug":"creating-the-project","status":"publish","type":"page","link":"http:\/\/gabybot.com\/creating-the-project\/","title":{"rendered":"Creating the project"},"content":{"rendered":"\n<p>Since the project requires a lot of setup and support files, the easiest way to create a project is to copy another project as a template. The project we are going to copy is the&nbsp;<strong>TimedRobot&nbsp;<\/strong>project. It would be nice if there were a nice&nbsp;VS Code wizard to create the project, but in lieu&nbsp;of that, I have created a small Java program called&nbsp;<strong>CreateRobotProjectVSCode<\/strong>&nbsp;which we can use to make a workable copy of the&nbsp;<strong>TimedRobot<\/strong>&nbsp;project and then we can load that new project into VS Code.<\/p>\n\n\n\n<p>To run this program, open the&nbsp;<strong>Windows File Explorer<\/strong>, find the&nbsp;<strong>VSCode&nbsp;<\/strong>folder inside&nbsp;<strong>RobotTools2024<\/strong>&nbsp;\/&nbsp;<strong>VSCode&nbsp;<\/strong>, and then&nbsp;double click on the&nbsp;<strong>CreateRobotProjectVSCode.jar<\/strong>&nbsp;file. This should&nbsp;display the following dialog box.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"330\" height=\"244\" src=\"\/wp-content\/uploads\/2021\/04\/CreateProject.jpg\" alt=\"\" class=\"wp-image-32\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/CreateProject.jpg 330w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/CreateProject-300x222.jpg 300w\" sizes=\"(max-width: 330px) 100vw, 330px\" \/><\/figure><\/div>\n\n\n\n<p>In the&nbsp;<strong>Project Name<\/strong>&nbsp;field, enter the name of your new project (e.g.&nbsp;<strong>Johns<\/strong><strong>Robot<\/strong>) and leave the&nbsp;<strong>Template<\/strong>&nbsp;field set to&nbsp;<strong>TimedRobot<\/strong>. Don\u2019t put spaces or other punctuation in your project name; you\u2019ll regret it later. Then click the&nbsp;<strong>Create<\/strong>&nbsp;button. If all goes well, it should create a project with the name you gave.<\/p>\n\n\n\n<p>Once the project has been created, go back to&nbsp;Visual Studio and choose the&nbsp;<strong>File \/ Open Folder&nbsp;<\/strong>command:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/04\/OpenFolder.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/04\/OpenFolder.jpg\" alt=\"\" class=\"wp-image-39\" width=\"552\" height=\"408\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/OpenFolder.jpg 953w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/OpenFolder-300x222.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/OpenFolder-768x567.jpg 768w\" sizes=\"(max-width: 552px) 100vw, 552px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>&nbsp;And select the&nbsp;folder that you just created (e.g.&nbsp;<strong>JohnsRobot<\/strong>):<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/04\/OpenJohnsRobot.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/04\/OpenJohnsRobot.jpg\" alt=\"\" class=\"wp-image-43\" width=\"583\" height=\"365\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/OpenJohnsRobot.jpg 944w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/OpenJohnsRobot-300x188.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/OpenJohnsRobot-768x482.jpg 768w\" sizes=\"(max-width: 583px) 100vw, 583px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Click the&nbsp;<strong>Select Folder<\/strong>&nbsp;button and it should load your project:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><a href=\"\/wp-content\/uploads\/2022\/05\/GetStarted.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2022\/05\/GetStarted.jpg\" alt=\"\" class=\"wp-image-2100\" width=\"587\" height=\"337\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2022\/05\/GetStarted.jpg 873w, http:\/\/gabybot.com\/wp-content\/uploads\/2022\/05\/GetStarted-300x173.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2022\/05\/GetStarted-150x86.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2022\/05\/GetStarted-768x442.jpg 768w\" sizes=\"(max-width: 587px) 100vw, 587px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Close the \u201c<strong>Get Started<\/strong>\u201d in the right pane and expand the&nbsp;<strong>src <\/strong>tree  in the left pane to see a listing of the source files for your program. Click on <strong>Robot.java<\/strong> in this pane to display this source file in the right pane:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/08\/Robot-1024x711.jpg\" alt=\"\" class=\"wp-image-3051\" width=\"581\" height=\"403\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Robot-1024x711.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Robot-300x208.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Robot-150x104.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Robot-768x533.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Robot.jpg 1238w\" sizes=\"(max-width: 581px) 100vw, 581px\" \/><\/figure><\/div>\n\n\n\n<p>Your program consists of a&nbsp;<strong>Robot&nbsp;<\/strong>class which inherits from the built in&nbsp;<strong>TimedRobot<\/strong>&nbsp;class. Let\u2019s take a look and try and understand the structure of this class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Robot extends TimedRobot {\n    @SuppressWarnings(\"unused\")\n    private RobotContainer m_robotContainer;<\/code><\/pre>\n\n\n\n<p>The first thing we see is the declaration of,&nbsp;<strong>m_robotContainer<\/strong>. This will contain an instance of the&nbsp;<strong>RobotContainer<\/strong>&nbsp;class which will hold many of the resources that we will need for our program. Note that we are not initializing this variable here, instead we wait and do that when the&nbsp;<strong>robotInit<\/strong>&nbsp;function is called:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\t\/**\n\t * This function is run when the robot is first started up and should be used\n\t * for any initialization code.\n\t *\/\n\t@Override\n\tpublic void robotInit() {\n\t\tLogger.log(\"Robot\", 3, \"robotInit()\");\n\t\tm_robotContainer = new RobotContainer();\n\t}<\/code><\/pre>\n\n\n\n<p>As the comment suggests, this function will be called once the robot in initialized and is where we should do any initialization that is required. Here is where we create the instance of&nbsp;<strong>RobotContainer<\/strong>.<\/p>\n\n\n\n<p>The next function we see is&nbsp;<strong>robotPeriodic<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\t\/**\n\t * This function is called every robot packet, no matter the mode. Use this for\n\t * items like diagnostics that you want ran during disabled, autonomous,\n\t * teleoperated and test.\n\t *\n\t * This runs after the mode specific periodic functions, but before LiveWindow\n\t * and SmartDashboard integrated updating.\n\t *\/\n\t@Override\n\tpublic void robotPeriodic() {\n\t\tLogger.log(\"Robot\", -1, \"robotPeriodic()\");\n\t\t\/\/ Runs the Scheduler. This is responsible for polling buttons, adding\n\t\t\/\/ newly-scheduled\n\t\t\/\/ commands, running already-scheduled commands, removing finished or\n\t\t\/\/ interrupted commands,\n\t\t\/\/ and running subsystem periodic() methods. This must be called from the\n\t\t\/\/ robot's periodic\n\t\t\/\/ block in order for anything in the Command-based framework to work.\n\t\tCommandScheduler.getInstance().run();\n\t}<\/code><\/pre>\n\n\n\n<p>As the comment explains, this function will be called periodically as long as your program is running. It is principally used to run the&nbsp;<strong>Command Scheduler<\/strong>, but would be the place to put any code that you needed to run regardless of the mode or whether the robot is enabled or disabled.<\/p>\n\n\n\n<p>Next we see a set of&nbsp;eight&nbsp;functions which are used to control the four modes of the robot,&nbsp;<strong>Disabled<\/strong>,&nbsp;<strong>Autonomous, Teleop,<\/strong>&nbsp;and&nbsp;<strong>Test<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\t\/**\n\t * This function is called once each time the robot enters Disabled mode.\n\t *\/\n\t@Override\n\tpublic void disabledInit() {\n\t\tLogger.log(\"Robot\", 2, \"disabledInit()\");\n\t}\n\n\t@Override\n\tpublic void disabledPeriodic() {\n\t\tLogger.log(\"Robot\", -1, \"disbledPeriodic()\");\n\t}\n\n\t\/**\n\t * This autonomous runs the autonomous command selected by your\n\t * {@link RobotContainer} class.\n\t *\/\n\t@Override\n\tpublic void autonomousInit() {\n\t\tLogger.log(\"Robot\", 2, \"autonomousInit()\");\n\t}\n\n\t\/**\n\t * This function is called periodically during autonomous.\n\t *\/\n\t@Override\n\tpublic void autonomousPeriodic() {\n\t\tLogger.log(\"Robot\", -1, \"autonomousPeriodic()\");\n\t}\n\n\t@Override\n\tpublic void teleopInit() {\n\t\tLogger.log(\"Robot\", 2, \"teleopInit()\");\n\t}\n\n\t\/**\n\t * This function is called periodically during operator control.\n\t *\/\n\t@Override\n\tpublic void teleopPeriodic() {\n\t\tLogger.log(\"Robot\", -1, \"teleopPeriodic()\");\n\t}\n\n\t@Override\n\tpublic void testInit() {\n\t\tLogger.log(\"Robot\", 2, \"testInit()\");\n\t\t\/\/ Cancels all running commands at the start of test mode.\n\t\tCommandScheduler.getInstance().cancelAll();\n\t}\n\n\t\/**\n\t * This function is called periodically during test mode.\n\t *\/\n\t@Override\n\tpublic void testPeriodic() {\n\t\tLogger.log(\"Robot\", -1, \"testPeriodic()\");\n\t}<\/code><\/pre>\n\n\n\n<p>The comments in the code are pretty self explanatory. Each of the modes has a function (e.g.&nbsp;<strong>autonomousInit<\/strong>) which is called when&nbsp;that mode starts. Then, as long as the robot stays in that particular mode, that&nbsp;mode\u2019s \u2018<strong>periodic<\/strong>\u2019 function&nbsp;(e.g.&nbsp;<strong>autonomousPeriodic<\/strong>)&nbsp;will be repeatedly called.<\/p>\n\n\n\n<p>Before we move on, I would like to bring your attention the the numerous calls to&nbsp;<strong>Logger.log(\u2026)<\/strong>. This is a debugging function which allows you to add logging to your program. This can be most useful when trying to figure out why your program is not behaving the way you expect.&nbsp;The&nbsp;<strong>log<\/strong>&nbsp;function takes 3 parameters. The <strong>first <\/strong>is a tag which identifies this particular log and is usually the class name. <\/p>\n\n\n\n<p>The <strong>second <\/strong>is a priority which determines when the log will be displayed. The higher the number, the more likely that this line will be displayed. You can change the logging level by calling <a href=\"\/RobotCoreDoc\/classrobot_core_1_1_logger.html#a60166425c66aa3b8e48a31b07d25ab9f\" target=\"_blank\" rel=\"noreferrer noopener\">setLogLevel<\/a>.<\/p>\n\n\n\n<p> The third parameter is whatever you wish to log.&nbsp;I strongly suggest that you make use of this feature when writing your code. It can make finding an elusive problem much easier later, especially when the problem only manifests itself when running the robot in competition.<\/p>\n\n\n\n<p><a href=\"\/running-the-program\/\" data-type=\"page\" data-id=\"65\">Next: Running the program<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Since the project requires a lot of setup and support files, the easiest way to create a project is to copy another project as a template. The project we are going to copy is the&nbsp;TimedRobot&nbsp;project. It would be nice if there were a nice&nbsp;VS Code wizard to create the project, but in lieu&nbsp;of that, I&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/creating-the-project\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Creating the project<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/28"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=28"}],"version-history":[{"count":34,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/28\/revisions"}],"predecessor-version":[{"id":3054,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/28\/revisions\/3054"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=28"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}