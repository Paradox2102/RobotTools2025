{"id":3037,"date":"2024-08-28T00:33:17","date_gmt":"2024-08-28T00:33:17","guid":{"rendered":"http:\/\/programming.team2102.org\/?page_id=3037"},"modified":"2025-08-19T02:57:12","modified_gmt":"2025-08-19T02:57:12","slug":"adding-a-camera","status":"publish","type":"page","link":"http:\/\/gabybot.com\/adding-a-camera\/","title":{"rendered":"Adding A Camera"},"content":{"rendered":"\n<p>The <strong>Dead Reconning<\/strong> we implemented in the previous chapter is good for keeping track of the robot&#8217;s position over short periods of time but because of the errors that accumulate over time it needs to be corrected by some other source.<\/p>\n\n\n\n<p>To do this we add a camera which will use <strong>Apriltags <\/strong>to compute the robot&#8217;s absolute position on the field. An <strong>Apriltag <\/strong>is a QR like code which encodes a specific number. A typical <strong>Apriltag <\/strong>looks like:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/08\/Apriltag1.jpg\" alt=\"\" class=\"wp-image-3043\" width=\"224\" height=\"239\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Apriltag1.jpg 508w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Apriltag1-281x300.jpg 281w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Apriltag1-150x160.jpg 150w\" sizes=\"(max-width: 224px) 100vw, 224px\" \/><\/figure><\/div>\n\n\n\n<p>This particular <strong>Apriltag <\/strong>encodes the number one. Now if we place these <strong>Apriltags <\/strong>at known locations on the field, then the robot can compute its position relative to the <strong>Apriltag <\/strong>and since we know where the <strong>Apriltag <\/strong>is located we can then compute the absolute location of the robot on the field.<\/p>\n\n\n\n<p>We have already created an instance of the <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1apriltags_1_1_apriltags_camera.html\" target=\"_blank\"><strong>ApriltagsCamera<\/strong><\/a> in the previous chapter. In fact you can already use the <strong>ApriltagsViewer.cmd<\/strong> program in the <strong>Utils <\/strong>folder of <strong>RobotTools2024 <\/strong>do view the camera image as the robot sees it:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/ApriltagsViewer-1.jpg\" alt=\"\" class=\"wp-image-3100\" width=\"591\" height=\"345\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/ApriltagsViewer-1.jpg 934w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/ApriltagsViewer-1-300x175.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/ApriltagsViewer-1-150x88.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/ApriltagsViewer-1-768x449.jpg 768w\" sizes=\"(max-width: 591px) 100vw, 591px\" \/><\/figure><\/div>\n\n\n\n<p>Here we see the camera recognizing the <strong>Apriltag #4<\/strong>. A green bounding box is displayed around the tag. The small number in the upper left shows the <strong>tag number<\/strong> and the number in the lower left shows the <strong>distance of the tag<\/strong> from the camera in <strong>inches<\/strong>.<\/p>\n\n\n\n<p>Now in order for the robot to be able to compute it&#8217;s position from the <strong>Apriltag <\/strong>we need to add some additional code.  In the constructor of your <strong>DriveSubsystem <\/strong>add the following:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    ApriltagLocations.setLocations(m_aprilTags);\n    m_camera.setCameraInfo(0, 5, 0, ApriltagsCameraType.PiCam_640x480);\n    m_camera.connect(k_cameraIP, k_cameraPort);<\/code><\/pre>\n\n\n\n<p>Where we have defined:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private static final String k_cameraIP = \"127.0.1.1\";\n  private static final int k_cameraPort = 5800;\n\n  public static ApriltagLocation m_aprilTags&#91;] = {\n      new ApriltagLocation(1, 3, 2, 90),\n      new ApriltagLocation(2, 4, 3, 180),\n      new ApriltagLocation(3, 3, 4, -90),\n      new ApriltagLocation(4, 3, 3, 0),\n  };<\/code><\/pre>\n\n\n\n<p>The<a href=\"\/RobotCoreDoc\/classrobot_core_1_1apriltags_1_1_apriltag_locations.html#aab94db5303389abc2ee4a06807a123f6\" target=\"_blank\" rel=\"noreferrer noopener\"><strong> ApriltagLocations.setLocations<\/strong><\/a> function allows us to specify the position and orientation of all of the <strong>Apriltags <\/strong>which are on the field. Our field will have 4 <strong>Apriltags <\/strong>at the locations shown above.<\/p>\n\n\n\n<p>The <a href=\"\/RobotCoreDoc\/classrobot_core_1_1apriltags_1_1_apriltags_camera.html#adbfddccd947698c7a29c82368af9f09d\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>setCameraInfo<\/strong><\/a> function allows us to specify the location and orientation of the camera with respect to the center of the robot.<\/p>\n\n\n\n<p>Finally, the <strong><a href=\"\/RobotCoreDoc\/classrobot_core_1_1apriltags_1_1_apriltags_camera.html#a2a8b9aa3602cf18dd99e8160d3619f38\" target=\"_blank\" rel=\"noreferrer noopener\">connect<\/a><\/strong> function connects the robot to the camera server.<\/p>\n\n\n\n<p>Now to compute the robot&#8217;s position using the <strong>Apriltags<\/strong>, we need to use the <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1apriltags_1_1_apriltags_camera.html#ab77a108b737f71f2b86ee6350739814c\" target=\"_blank\">processRegions<\/a> <\/strong>function to update the robot&#8217;s position based on the <strong>Apriltags <\/strong>that the robot can see (if any). We do this by adding a call to this function in the <strong>periodic <\/strong>function of our <strong>DriveSubsystem<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_camera.processRegions(m_poseEstimator);<\/code><\/pre>\n\n\n\n<p>Once we have done this, we can run our program again and start the <strong>PositionViewer<\/strong>. If we position the robot within view of an <strong>Apriltag<\/strong>, the <strong>PositionViewer<\/strong> will now show that actual location of the robot as computed by the camera. The <strong>Dead Reconning<\/strong> will still be used when no <strong>Apriltag <\/strong>is visible, but whenever the robot sees an <strong>Apriltag<\/strong>, it&#8217;s <strong>position <\/strong>and <strong>orientation <\/strong>will be automatically corrected.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/09\/RobotPosition.jpg\" alt=\"\" class=\"wp-image-3109\" width=\"531\" height=\"266\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RobotPosition.jpg 760w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RobotPosition-300x150.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/09\/RobotPosition-150x75.jpg 150w\" sizes=\"(max-width: 531px) 100vw, 531px\" \/><\/figure><\/div>\n\n\n\n<p>There is one last thing we need to do before we move on. When we created the drive function in the <strong>DriveSubsystem <\/strong>you will recall that we obtained the robots orientation by calling <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_gyro.html#a8ce7770e5e95404cdc1533b68af1100f\" target=\"_blank\">gyro.getRotation2d<\/a><\/strong>. I mentioned at the time that this would need to be fixed when we added the camera which corrects any accumulated errors in the gyro. We fix this by making the following change:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public void drive(double xSpeed, double ySpeed, double rot, boolean fieldRelative, double   public void drive(double xSpeed, double ySpeed, double rot, boolean fieldRelative, double periodSeconds) {\n    SwerveModuleState&#91;] swerveModuleStates = m_kinematics.toSwerveModuleStates(\n        ChassisSpeeds.discretize(\n            fieldRelative\n                ? ChassisSpeeds.fromFieldRelativeSpeeds(\n                    xSpeed, ySpeed, rot, m_poseEstimator.getEstimatedPosition().getRotation())\n                : new ChassisSpeeds(xSpeed, ySpeed, rot),\n            periodSeconds));\n\n    setModuleStates(swerveModuleStates);\n  };\n  <\/code><\/pre>\n\n\n\n<p><a href=\"\/turn-to-target\/\" data-type=\"page\" data-id=\"3384\">Next: Turn To Target<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>The Dead Reconning we implemented in the previous chapter is good for keeping track of the robot&#8217;s position over short periods of time but because of the errors that accumulate over time it needs to be corrected by some other source. To do this we add a camera which will use Apriltags to compute the&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/adding-a-camera\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Adding A Camera<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/3037"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=3037"}],"version-history":[{"count":20,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/3037\/revisions"}],"predecessor-version":[{"id":4883,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/3037\/revisions\/4883"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=3037"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}