{"id":2267,"date":"2022-06-18T16:03:11","date_gmt":"2022-06-18T16:03:11","guid":{"rendered":"http:\/\/robotics.gabysoft.com\/?page_id=2267"},"modified":"2024-09-02T19:04:25","modified_gmt":"2024-09-02T19:04:25","slug":"navigation","status":"publish","type":"page","link":"http:\/\/gabybot.com\/navigation\/","title":{"rendered":"Navigation"},"content":{"rendered":"\n<p>We are going to want to program the robot to follow precise paths autonomously and to do that we are going to use a technique called <strong>Pure Pursuit<\/strong> which we will cover later. In order for this technique to work, however, we need a way to keep precise track of the robot position. To do this we will use the <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_navigator.html\" data-type=\"page\" target=\"_blank\"><strong>Navigator<\/strong><\/a> class.<\/p>\n\n\n\n<p>Since the <a href=\"\/RobotCoreDoc\/classrobot_core_1_1_navigator.html\"><strong>Navigator<\/strong><\/a> class requires access to the <strong>DriveSubsystem&#8217;s<\/strong> motor encoders, we will need to create our instance of the <a href=\"\/RobotCoreDoc\/classrobot_core_1_1_navigator.html\"><strong>Navigator<\/strong><\/a> within the <strong>DriveSubysystem<\/strong>. Add the following variable to your <strong>DriveSubsystem <\/strong>class<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private Navigator m_navigator;<\/code><\/pre>\n\n\n\n<p>Now, in the constructor of your <strong>Drive Subsystem<\/strong> add the following:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_navigator = new Navigator(m_leftEncoder, m_rightEncoder);\n    m_navigator.reset(90, 100, 100);\n    m_navigator.setTicksPerFoot(DriveSubsystem.k_ticksPerFoot);<\/code><\/pre>\n\n\n\n<p>And define <strong>k_ticksPerFoot <\/strong>as:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>   public final static double  k_ticksPerFoot = 1;<\/code><\/pre>\n\n\n\n<p>The <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_navigator.html#a7b3cfa3e4058f04e23b44499677ad389\" target=\"_blank\">reset<\/a><\/strong> function lets up set the current <strong>yaw <\/strong>and the <strong>x <\/strong>and <strong>y <\/strong>coordinates. We set them here so that when the robot starts, it is in a known state. Individual commands may need call this reset as well.<\/p>\n\n\n\n<p>The <a href=\"\/RobotCoreDoc\/classrobot_core_1_1_navigator.html#ae37374d8832014ea4364def8b26e7c97\"><strong>setTicksPerFoot<\/strong><\/a> function sets the conversion factor that will convert encoder ticks into feet.<\/p>\n\n\n\n<p>Note that we are temporarily setting the <strong>k_ticksPerFoot <\/strong>to <strong>1 <\/strong>now since we do not yet know the conversion factor that will convert the encoder ticks to feet. <\/p>\n\n\n\n<p>Before we continue, build and run your program. When you do so, you will see that it takes longer to initialize the robot. This is because the initialization of the gyroscope takes some time. While this initialization is happening you will see the following output in the <strong>Terminal <\/strong>window:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>4002:MotorBase(3):MotorBase()\n4027:DriveSubsystem(3):DriveSubsystem()\n4033:Navigator(1):Wait for initialization...\n5038:Navigator(1):Waiting for navigator: state = 0\n6042:Navigator(1):Waiting for navigator: state = 0\n7046:Navigator(1):Waiting for navigator: state = 0\n8049:Navigator(1):Waiting for navigator: state = 0\n9053:Navigator(1):Waiting for navigator: state = 0\n10057:Navigator(1):Waiting for navigator: state = 0\n11060:Navigator(1):Waiting for navigator: state = 1<\/code><\/pre>\n\n\n\n<p>Once you see the line showing <strong>state = 1<\/strong>, the initialization is complete. Note that this process will happen each time you deploy new code to your robot.<\/p>\n\n\n\n<p>Occasionally the <strong>Navigator<\/strong> will not initialize properly and the <strong>state<\/strong> never switches to <strong>1<\/strong>. If this happens, simply kill your program and restart it.<\/p>\n\n\n\n<p>Now we need to compute the conversion factor that will convert ticks to feet. To do this we will create a command that will drive the robot forward at <strong>50%<\/strong> speed for <strong>7000 <\/strong>encoder ticks and we will use the <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_navigator.html\" target=\"_blank\">Navigator<\/a><\/strong> class to measure this distance. <\/p>\n\n\n\n<p>Since we will be needing access to the <strong>Navigator <\/strong>instance within this new command, create a function in your <strong>DriveSubsystem <\/strong>class to return the <strong>Navigator <\/strong>instance:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public Navigator getNavigator() {\n    return m_navigator;\n  }<\/code><\/pre>\n\n\n\n<p>Now create a <strong>CalibrateDistanceCommand <\/strong>that uses the <strong>DriveSubsystem<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CalibrateDistanceCommand extends CommandBase {\n    private final DriveSubsystem m_subsystem;\n    private final Navigator m_navigator;\n\n    public CalibrateDistanceCommand(DriveSubsystem subsystem) {\n        Logger.log(\"CalibrateDistanceCommand\", 3, \"CalibrateDistanceCommand()\");\n\n        m_subsystem = subsystem;\n        m_navigator = m_subsystem.getNavigator();\n\n        \/\/ Use requires() here to declare subsystem dependencies\n        addRequirements(m_subsystem);\n    }<\/code><\/pre>\n\n\n\n<p>Then in your initialize function start the robot moving forward at <strong>50%<\/strong> speed and reset the <strong>Navigator <\/strong>to the coordinate <strong>(0,0) <\/strong>at an angle of <strong>90 degrees<\/strong> using the <strong>Navigator&#8217;s<\/strong> <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_navigator.html#a7b3cfa3e4058f04e23b44499677ad389\" target=\"_blank\"><strong>reset <\/strong><\/a>function as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>        m_navigator.reset(90, 0, 0);<\/code><\/pre>\n\n\n\n<p>Now in your <strong>execute <\/strong>function, use the <strong>Navigator&#8217;s<\/strong> <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_navigator.html#a71eefa364b4a62e1dad06727635760f5\" target=\"_blank\">getPos<\/a><\/strong> function to get and log the current robot position as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    NavigatorPos pos = m_navigator.getPos();\n\n    Logger.log(\"CalibrateDistanceCommand\",1,String.format(\",%.2f,%.3f,%.3f\", pos.yaw, pos.x, pos.y));<\/code><\/pre>\n\n\n\n<p>Finally set your <strong>isFinished <\/strong>function to return <strong>true <\/strong>when the <strong>y <\/strong>coordinate equals or exceeds <strong>7000<\/strong>.<\/p>\n\n\n\n<p>Then mark the starting position of the robot and run your program and measure the distance from the start to the end point. Note that your robot may not drive exactly straight so you want to measure the diagonal. Then compute the number of encoder ticks that the robot moved by computing the hypotenuse of the triangle represented by the ending x and y coordinates. Finally set the appropriate value for your <strong>k_ticksPerFoot<\/strong>.<\/p>\n\n\n\n<p>In my case, the robot drove for <strong>7050.2 ticks<\/strong> at a distance <strong>5.85 feet<\/strong>. So in my <strong>DriveSubsystem <\/strong>I changed the value of <strong>k_ticksPerFoot <\/strong>as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public final static double  k_ticksPerFoot = 7059.2 \/ 5.85;<\/code><\/pre>\n\n\n\n<p>Once you have done this, all further calls to the <strong>Navigator&#8217;s <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_navigator.html#a71eefa364b4a62e1dad06727635760f5\" target=\"_blank\">getPos<\/a><\/strong> function will return the robot&#8217;s position in <strong>feet<\/strong>.<\/p>\n\n\n\n<p><a href=\"\/vision-tracking\/\" data-type=\"page\" data-id=\"306\">Next: Vision Tracking<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>We are going to want to program the robot to follow precise paths autonomously and to do that we are going to use a technique called Pure Pursuit which we will cover later. In order for this technique to work, however, we need a way to keep precise track of the robot position. To do&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/navigation\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Navigation<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/2267"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=2267"}],"version-history":[{"count":15,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/2267\/revisions"}],"predecessor-version":[{"id":3135,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/2267\/revisions\/3135"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=2267"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}