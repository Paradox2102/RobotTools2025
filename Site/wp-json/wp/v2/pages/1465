{"id":1465,"date":"2021-05-22T14:16:28","date_gmt":"2021-05-22T14:16:28","guid":{"rendered":"http:\/\/programming.sdarobotics.org\/?page_id=1465"},"modified":"2022-09-21T22:51:01","modified_gmt":"2022-09-21T22:51:01","slug":"path-following-2","status":"publish","type":"page","link":"http:\/\/gabybot.com\/path-following-2\/","title":{"rendered":"Path Following"},"content":{"rendered":"\n<p>Now that we know how to create paths, let&#8217;s see if we can get the robot to follow one.<\/p>\n\n\n\n<p>First we need to make some changes to our <strong>DriveSubsystem<\/strong>. We are going to use the <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_pure_pursuit.html\" target=\"_blank\">PurePursuit<\/a><\/strong> class to control the motion of the robot so add a <strong>PurePursuit<\/strong> variable:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private final PurePursuit m_pursuit;\n<\/code><\/pre>\n\n\n\n<p>Now the <strong><a href=\"\/RobotCoreDoc\/classrobot_core_1_1_pure_pursuit.html#a7913703f36e2717b0aa27022238d6c1e\" target=\"_blank\" rel=\"noreferrer noopener\">constructor<\/a><\/strong> for <strong>PurePursuit <\/strong>requires a function that will set the speed of the left and right wheels in <strong>feet\/second<\/strong>, so we need to create that:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public void setSpeedFPS(double leftSpeed, double rightSpeed)\n  {\n    \/\/ Change speed from FPS to -1 to 1 range\n    leftSpeed = leftSpeed * k_ticksPerFoot \/ k_maxSpeed;\n    rightSpeed =  rightSpeed * k_ticksPerFoot \/ k_maxSpeed;\n\n    setSpeed(leftSpeed, rightSpeed);\n  }<\/code><\/pre>\n\n\n\n<p>Here we are computing the speed as <strong>percentage <\/strong>of the <strong>max speed<\/strong> by multiplying the speed in <strong>feet\/second<\/strong> by the ratio of the <strong>ticks per foot<\/strong> to the <strong>max speed<\/strong>. We can then call our existing <strong>setSpeed <\/strong>function.<\/p>\n\n\n\n<p>There is one other change we need to make in addition to creating this <strong>setSpeedFPS <\/strong>function. The <strong>PurePursuit <\/strong>path follower runs in it&#8217;s own <strong>thread <\/strong>and will make calls to set the left and right motor speeds via the function you just created. Since these calls will be from a different <strong>thread<\/strong> than your normal calls to <strong>setPower <\/strong>and <strong>setSpeed<\/strong>, we need to enclose any access to the motor classes within a <strong>synchronized <\/strong>command. For example, your <strong>setPower <\/strong>function should look something like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public void setPower(double leftPower, double rightPower)\n  {\n    synchronized (m_lock)\n    {\n      m_leftMotor.setControlMode(SmartMotorMode.Power);\n      m_rightMotor.setControlMode(SmartMotorMode.Power);\n\n      m_leftMotor.set(leftPower);\n      m_rightMotor.set(rightPower);\n    }\n  }<\/code><\/pre>\n\n\n\n<p>Where you have declared <strong>m_lock <\/strong>something like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private final Object m_lock = new Object();<\/code><\/pre>\n\n\n\n<p>You should have a similar <strong>synchronized <\/strong>command in your <strong>setSpeed <\/strong>and any other place in your code that you access the instances of your motors.<\/p>\n\n\n\n<p>We are now ready to create an instance if <strong>PurePursuit <\/strong>in the constructor of our <strong>DriveSubsystem<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_pursuit = new PurePursuit(navigator, (l, r) -&gt; { setSpeedFPS(l, r); }, k_purePersuitUpdateRate);\n    m_pursuit.enableLogging(\"\/home\/pi\/logs\");<\/code><\/pre>\n\n\n\n<p>Of course we must define <strong>k_purePersuitUpdateRate<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code> private final static int k_purePursuitUpdateRate  = 50;<\/code><\/pre>\n\n\n\n<p>Note the call to <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_pure_pursuit.html#aee5a4007c4e1070d5913720bd24906bb\" target=\"_blank\">enableLogging<\/a><\/strong>. This allows us to log details about the followed path to a file on the Raspberry Pi, which will allow us to study how well the robot is following the path.<\/p>\n\n\n\n<p>Finally we will need a few functions to control the path following from our commands:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \/*\n   * This function loads a specified path and the starts the following\n   *\/\n  public void startPath(Path path, boolean isReversed, boolean isExtended) {\n    m_pursuit.loadPath(path, isReversed, isExtended);\n    m_pursuit.startPath();\n  }\n\n  \/*\n   * This function ends the currently followed path (if any)\n   *\/\n  public void endPath() {\n    m_pursuit.stopFollow();\n  }\n\n  \/*\n   * This function returns true if the current path has completed\n   *\/\n  public boolean isPathFinished() {\n    return (m_pursuit.isFinished());\n  }<\/code><\/pre>\n\n\n\n<p>Before we create our first follow path command, we need to do one more thing. The Pure Pursuit path following has a number of tunable parameters. While it is possible to specify a different set of parameters for each path, it is useful to set up a set of defaults that are used for each new path we create. You do this in the RobotContainer&#8217;s constructor by adding the following. Be sure to place these lines <strong>before <\/strong>the call to <strong>configureButtonBindings()<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    Pathfinder.setDefaultLookAheadTime(k_lookAheadTime);\n    Pathfinder.setDefaultMinLookAheadDistance(k_minLookAheadDist);\n    Pathfinder.setDefaultMaxSearchTime(k_maxSearchTime);\n    Pathfinder.setDefaultMinSpeed(k_minSpeed);\n    Pathfinder.setDefaultExtendedLookAheadDistance(k_extendedLookAhead);\n    Pathfinder.SetDefaultCurvatureAdjust(k_curvatureAdjust);<\/code><\/pre>\n\n\n\n<p>Where we have defined the constants as:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private static final double k_lookAheadTime = 0.75;\t\t\/\/ Time along the path of the next target point\t\n  private static final double k_minLookAheadDist = 0.6;\t\t\/\/ Minimum allowed look ahead distance (overrides look ahead time if necessary)\n  private static final double k_maxSearchTime = 1;\t\t\/\/ Max time along the path to search for the closest point to the current position\n  private static final double k_minSpeed = 0.50;\t\t\t\/\/ Minimum allowed speed\n  private static final double k_extendedLookAhead = .75;\t\/\/ Distance to extend path if m_isExtended is true\n  private static final double k_curvatureAdjust = 1.0;\t\t\/\/ Adjusts the curvature to make the path following more or less aggressive<\/code><\/pre>\n\n\n\n<p>Let&#8217;s take a look at what each of these values mean. See the documentation for <strong><a href=\"\/RobotCoreDoc\/classpathfinder_1_1_pathfinder.html\" target=\"_blank\" rel=\"noreferrer noopener\">PathFinder<\/a><\/strong> for further information.<\/p>\n\n\n\n<ul><li><strong>Look Ahead Time<\/strong> &#8211; This is the time that <strong>Pure Pursuit <\/strong>looks ahead on the path to find the point at which to steer. We will use a default of <strong>0.75 seconds<\/strong> along the path.<\/li><li><strong>Minimum Look Ahead Distance<\/strong> &#8211; If the distance computed by using the <strong>Look Ahead Time<\/strong> is less than this minimum, then this value will be used instead. We will set this minimum to default to <strong>0.6 feet<\/strong>.<\/li><li><strong>Maximum Search Time<\/strong> &#8211; On Each update, the path will be searched for the point on the path that is closest to the robot&#8217;s current position. To avoid problems when the robot loops back on it&#8217;s own path, this value specifies the maximum time to look ahead for the closest point. We will set this to default to <strong>0.25 seconds <\/strong>along the path.<\/li><li><strong>Minimum Speed<\/strong> &#8211; This value specifies the minimum speed for the robot that is needed to keep the robot from stalling. We will set this value <strong>0.50 feet\/second<\/strong>.<\/li><li><strong>Extended Look Ahead<\/strong> &#8211; This value specifies the amount to extend the path for navigation purposes if the <strong>isExtended <\/strong>flag is set to true on the call to <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_pure_pursuit.html#aebd4969bae1a876d49dee9f5e05c5bfe\" target=\"_blank\">loadPath<\/a><\/strong>. Note that this extension is used for navigation purposes only and the robot will still stop at the final ending point. We will set this to default to <strong>0.75 feet<\/strong>.<\/li><li><strong>Curvature Adjust<\/strong> &#8211; This value is used to force the robot to more (or less) aggressively steer toward the target point. A value of <strong>1<\/strong> will use the curvature that is computed by the <strong>Pure Pursuit<\/strong> algorithm. A value greater than <strong>1<\/strong> will cause the robot to steer more aggressively towards that point and a value less than <strong>1<\/strong> will cause the robot to steer less aggressively. We set this to the default of <strong>1.0<\/strong>.<\/li><\/ul>\n\n\n\n<p>We are now ready to create our first path following command. For this command we will instruct the robot to drive forward 5 feet. The first thing to do is to create the path in the <strong>PathPlanner <\/strong>program. Graphing the position, velocity and acceleration we see the following:<\/p>\n\n\n<p><a href=\"\/wp-content\/uploads\/2021\/05\/StraightPath.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/StraightPath-1024x787.jpg\" alt=\"\" class=\"wp-image-1562\" width=\"240\" height=\"184\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightPath-1024x787.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightPath-300x231.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightPath-150x115.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightPath-768x590.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightPath.jpg 1246w\" sizes=\"(max-width: 240px) 100vw, 240px\" \/><\/a> <a href=\"\/wp-content\/uploads\/2021\/05\/StraightVelocity.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/StraightVelocity-1024x787.jpg\" alt=\"\" class=\"wp-image-1564\" width=\"241\" height=\"184\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightVelocity-1024x787.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightVelocity-150x115.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightVelocity-768x590.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightVelocity.jpg 1246w\" sizes=\"(max-width: 241px) 100vw, 241px\" \/><\/a> <a href=\"\/wp-content\/uploads\/2021\/05\/StraightAccel.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/StraightAccel-1024x787.jpg\" alt=\"\" class=\"wp-image-1565\" width=\"242\" height=\"185\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightAccel-1024x787.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightAccel-300x231.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightAccel-150x115.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightAccel-768x590.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/StraightAccel.jpg 1246w\" sizes=\"(max-width: 242px) 100vw, 242px\" \/><\/a><\/p>\n\n\n<p>The structure of all of your path following commands will be similar. Below is my example of a command to drive forward <strong>5 feet<\/strong>. Note that I am placing all of my pursuit commands into a <strong>purePursuit <\/strong>subfolder of commands just to keep them organized.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package robot.commands.purePursuit;\n\nimport edu.wpi.first.wpilibj2.command.CommandBase;\nimport pathfinder.Pathfinder;\nimport pathfinder.Pathfinder.Path;\nimport pathfinder.Pathfinder.Waypoint;\nimport robot.subsystems.DriveSubsystem;\nimport robotCore.Logger;\nimport robotCore.Navigator;\n\n\/**\n * An example command that uses an example subsystem.\n *\/\npublic class Drive5ftCommand extends CommandBase {\n  private final DriveSubsystem m_subsystem;\n  private final Path m_path;\n  private final Navigator m_navigator;\n\n  private static final int k_nPoints = 1000;\n  private static final double k_dt = 0.020000;\n  private static final double k_maxSpeed = 1.500000;\n  private static final double k_maxAccel = 2.000000;\n  private static final double k_maxDecl = 2.000000;\n  private static final double k_maxJerk = 15.000000;\n  private static final double k_wheelbase = 0.750000;\n  \/*\n  0,0,90\n  0,5,90\n  *\/\n  private static final Waypoint&#91;] k_path = {\n      new Waypoint(0, 0, Math.toRadians(90)),\n      new Waypoint(0, 5, Math.toRadians(90))\n  };\n\n  \/**\n   * Creates a new Drive5ftCommand.\n   *\n   * @param subsystem The subsystem used by this command.\n   *\/\n  public Drive5ftCommand(DriveSubsystem subsystem, Navigator navigator) {\n    Logger.log(\"Drive5ftCommand\", 3, \"Drive5ftCommand()\");\n\n    m_subsystem = subsystem;\n    m_navigator = navigator;\n    \/\/ Use addRequirements() here to declare subsystem dependencies.\n    addRequirements(m_subsystem);\n\n    m_path = Pathfinder.computePath(k_path, k_nPoints, k_dt, k_maxSpeed, k_maxAccel, k_maxDecl, k_maxJerk, k_wheelbase);\n  }\n\n  \/\/ Called when the command is initially scheduled.\n  @Override\n  public void initialize() {\n    Logger.log(\"Drive5ftCommand\", 2, \"initialize()\");\n\n    \/*\n     * We reset the robot to the starting position and orientation.\n     *  Note that if you end up stringing multiple path following commands together using a group,\n     *  you should do this reset ONLY for the first command int the group\n     *\/\n    m_navigator.reset(90, 0, 0);\n\n    \/\/ Load and start the path following\n    m_subsystem.startPath(m_path, false, true, true);\n  }\n\n  \/\/ Called every time the scheduler runs while the command is scheduled.\n  @Override\n  public void execute() {\n    Logger.log(\"Drive5ftCommand\", -1, \"execute()\");\n\n    \/\/ The path following is handled by the PurePursuit class so we don't need to do anything here\n  }\n\n  \/\/ Called once the command ends or is interrupted.\n  @Override\n  public void end(boolean interrupted) {\n    Logger.log(\"Drive5ftCommand\", 2, String.format(\"end(%b)\", interrupted));\n\n    \/\/ End the path following when the command ends.\n    m_subsystem.endPath();\n  }\n\n  \/\/ Returns true when the command should end.\n  @Override\n  public boolean isFinished() {\n    Logger.log(\"Drive5ftCommand\", -1, \"isFinished()\");\n\n    \/\/ Return true if the path has completed\n    return m_subsystem.isPathFinished();\n  }\n}<\/code><\/pre>\n\n\n\n<p>Lets take a look at a couple of features of this command. First we have the following lines which defines the path.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private static final int k_nPoints = 1000;\n  private static final double k_dt = 0.020000;\n  private static final double k_maxSpeed = 1.500000;\n  private static final double k_maxAccel = 2.000000;\n  private static final double k_maxDecl = 2.000000;\n  private static final double k_maxJerk = 15.000000;\n  private static final double k_wheelbase = 0.750000;\n  \/*\n  0,0,90\n  0,5,90\n  *\/\n  private static final Waypoint&#91;] k_path = {\n      new Waypoint(0, 0, Math.toRadians(90)),\n      new Waypoint(0, 5, Math.toRadians(90))\n  };\n<\/code><\/pre>\n\n\n\n<p>These numbers come directly from the <strong>PathPlanner <\/strong>program. Note, however, you do <strong>not <\/strong>need to type these in. If you click the Copy button in <strong>PathPlanner<\/strong>, these lines will be copied to the clipboard and you can just paste them into your program.<\/p>\n\n\n\n<p>In our constructor we create the path by calling the <strong><a href=\"\/RobotCoreDoc\/classpathfinder_1_1_pathfinder.html#a746c32bad245ee64802814248ab71bba\" target=\"_blank\" rel=\"noreferrer noopener\">computePath<\/a><\/strong> function of the <strong><a href=\"\/RobotCoreDoc\/classpathfinder_1_1_pathfinder.html\" target=\"_blank\" rel=\"noreferrer noopener\">Pathfinder<\/a><\/strong> class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_path = Pathfinder.computePath(k_path, k_nPoints, k_dt, k_maxSpeed, k_maxAccel, k_maxDecl, k_maxJerk, k_wheelbase);\n<\/code><\/pre>\n\n\n\n<p>In our <strong>initialize <\/strong>function we reset the robot to it&#8217;s starting position <strong>(0,0)<\/strong> and starting yaw (angle) of <strong>90 <\/strong>degrees. Note that if we later make a command which consists of multiple path following commands we only want to do this reset in the first of the set.<\/p>\n\n\n\n<p>Also in our <strong>initialize<\/strong> function we start the path following by calling the <strong>startPath<\/strong> function of our <strong>DriveSubsystem<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_subsystem.startPath(m_path, false, true, true);\n<\/code><\/pre>\n\n\n\n<p>Note that the first Boolean parameter controls whether the robot will move forward (false) or backwards (true). We want to go forward so this is set to <strong>false<\/strong>. Setting the second Boolean parameter to <strong>true<\/strong> will help keep the robot from turning as it approaches it&#8217;s destination. The last parameter controls whether the navigator will be automatically reset to the starting position and angle for the path. We always want to set this to <strong>true<\/strong> for the first path. If we have it follow multiple paths, we will set it to <strong>false<\/strong> for the subsequent paths.<\/p>\n\n\n\n<p>In the <strong>end <\/strong>function we end the path following by calling the <strong>endPath <\/strong>function of our <strong>DriveSubsystem<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_subsystem.endPath();<\/code><\/pre>\n\n\n\n<p>Finally in the isFinished function we return whether the path is complete by calling the isPathFinished function of our DriveSubsystem.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    return m_subsystem.isPathFinished();<\/code><\/pre>\n\n\n\n<p>Now connect this command to a button (using <strong>whenPressed<\/strong>) and run your program. When you press the button, the robot should drive forward 5 feet and then stop.<\/p>\n\n\n\n<p>Now try creating a more complicated path that drives the robot from<strong> (3,0)<\/strong> at <strong>90 <\/strong>degrees to <strong>(-3,0)<\/strong> at <strong>-90<\/strong> degrees. You can construct the path using a single <strong>Bezier <\/strong>curve like this:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/SemiCircle1.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/SemiCircle1-1024x787.jpg\" alt=\"\" class=\"wp-image-1594\" width=\"423\" height=\"324\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/SemiCircle1-1024x787.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/SemiCircle1-300x231.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/SemiCircle1-150x115.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/SemiCircle1-768x590.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/SemiCircle1.jpg 1246w\" sizes=\"(max-width: 423px) 100vw, 423px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Or you can connect two <strong>Bezier <\/strong>curves like this:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/SemiCircle2.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/SemiCircle2-1024x787.jpg\" alt=\"\" class=\"wp-image-1597\" width=\"425\" height=\"326\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/SemiCircle2-1024x787.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/SemiCircle2-300x231.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/SemiCircle2-150x115.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/SemiCircle2-768x590.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/SemiCircle2.jpg 1246w\" sizes=\"(max-width: 425px) 100vw, 425px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Note that if we need the robot to go through the point <strong>(0,3)<\/strong> then it is easier to do it with 2 curves rather than one, although it would still be possible with one by changing the <strong>Bezier <\/strong>control points.<\/p>\n\n\n\n<p>Create a new command called <strong>SemiCircleCommand <\/strong>that implements this path. The easiest way is to copy the <strong>Drive5ftCommand <\/strong>and replace the path with your new one. Remember that you can use the <strong>Copy <\/strong>button in the <strong>PathPlanner <\/strong>and paste that code into your command. When you have finished run your program and verify that the robot drives the correct path.<\/p>\n\n\n\n<p>Now before we move on, I want to introduce you to a tool that will let you examine the path the robot took in detail. The way we have configured PurePursuit, it will log detailed information about the path following to a logs folder in the home directory of the pi. <\/p>\n\n\n\n<p>To examine this data, we will first need to upload the log file to our compute. For this we will us the <strong>FTP <\/strong>program <strong>FileZilla<\/strong>. Then connect to the pi by selecting the Pi.AP option from the dropdown shown below:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/Filezilla.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/Filezilla-1024x539.jpg\" alt=\"\" class=\"wp-image-1608\" width=\"419\" height=\"220\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla-1024x539.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla-300x158.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla-150x79.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla-768x405.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla.jpg 1086w\" sizes=\"(max-width: 419px) 100vw, 419px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Create a logs subfolder in your robot project folder and then in the left <strong>Local Site<\/strong> pane navigate to that folder. In the right <strong>Remote Site<\/strong> pane, navigate to the <strong>logs <\/strong>folder as shown below:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/Filezilla2-2.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/Filezilla2-2-1024x525.jpg\" alt=\"\" class=\"wp-image-1614\" width=\"428\" height=\"219\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla2-2-1024x525.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla2-2-300x154.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla2-2-150x77.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla2-2-768x394.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla2-2.jpg 1119w\" sizes=\"(max-width: 428px) 100vw, 428px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Click on the Last modified header of the right pane to show the most recent file first. Then double click on the most recent file to copy it to the logs folder on your computer.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/Filezilla3.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/Filezilla3-1024x524.jpg\" alt=\"\" class=\"wp-image-1617\" width=\"426\" height=\"218\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla3-1024x524.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla3-300x154.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla3-150x77.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla3-768x393.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Filezilla3.jpg 1117w\" sizes=\"(max-width: 426px) 100vw, 426px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Then right click on the file in the left pane and choose <strong>Open<\/strong>. This will open the file in LibreCalc. <\/p>\n\n\n\n<p>First we will compare the Ideal left and right velocities to the Actual left and right velocities. Select the columns D, E, F, and G as shown.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/Log8.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/Log8-1024x549.jpg\" alt=\"\" class=\"wp-image-1641\" width=\"426\" height=\"228\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log8-1024x549.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log8-300x161.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log8-150x80.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log8-768x412.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log8-1536x824.jpg 1536w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log8.jpg 1920w\" sizes=\"(max-width: 426px) 100vw, 426px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Then create a chart choosing Line\/Lines Only options:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/Log2.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/Log2.jpg\" alt=\"\" class=\"wp-image-1625\" width=\"418\" height=\"207\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log2.jpg 919w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log2-300x149.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log2-150x74.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log2-768x381.jpg 768w\" sizes=\"(max-width: 418px) 100vw, 418px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>This will produce a graph showing the <strong>Ideal <\/strong>and <strong>Actual <\/strong>velocity of both wheels and we can see how closely the velocities are being matched.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/Log5.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/Log5.jpg\" alt=\"\" class=\"wp-image-1635\" width=\"424\" height=\"234\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log5.jpg 746w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log5-300x166.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log5-150x83.jpg 150w\" sizes=\"(max-width: 424px) 100vw, 424px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Finally, we can plot the Actual path to the Ideal path to see how well they match as well. Do do this in LibreCalc, we will first need to select all of the <strong>Ideal <\/strong>x and y data (columns <strong>J <\/strong>and <strong>K<\/strong>) and past it onto the end of the <strong>Actual <\/strong>x and y data (columns <strong>H <\/strong>and <strong>I<\/strong>) as shown:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/Log7.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/Log7-1024x549.jpg\" alt=\"\" class=\"wp-image-1640\" width=\"426\" height=\"228\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log7-1024x549.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log7-300x161.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log7-150x80.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log7-768x412.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log7-1536x824.jpg 1536w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log7.jpg 1920w\" sizes=\"(max-width: 426px) 100vw, 426px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Then select columns H and I and create a chart, this time choosing XY (Scatter):<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/Log6.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/Log6.jpg\" alt=\"\" class=\"wp-image-1636\" width=\"420\" height=\"236\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log6.jpg 738w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log6-300x168.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/Log6-150x84.jpg 150w\" sizes=\"(max-width: 420px) 100vw, 420px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>As a final exercise for this section, create a command to follow the following path:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/DrivePath-Anotated.png\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/DrivePath-Anotated.png\" alt=\"\" class=\"wp-image-1644\" width=\"420\" height=\"419\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/DrivePath-Anotated.png 566w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/DrivePath-Anotated-300x300.png 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/DrivePath-Anotated-150x150.png 150w\" sizes=\"(max-width: 420px) 100vw, 420px\" \/><\/a><\/figure><\/div>\n\n\n\n<p><a href=\"\/final-challenge\/\" data-type=\"page\" data-id=\"1647\">Next: Final Challenge<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Now that we know how to create paths, let&#8217;s see if we can get the robot to follow one. First we need to make some changes to our DriveSubsystem. We are going to use the PurePursuit class to control the motion of the robot so add a PurePursuit variable: Now the constructor for PurePursuit requires&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/path-following-2\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Path Following<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/1465"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=1465"}],"version-history":[{"count":118,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/1465\/revisions"}],"predecessor-version":[{"id":2548,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/1465\/revisions\/2548"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=1465"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}