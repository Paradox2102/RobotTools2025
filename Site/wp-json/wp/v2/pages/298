{"id":298,"date":"2021-04-07T01:05:51","date_gmt":"2021-04-07T01:05:51","guid":{"rendered":"http:\/\/gabybot.com\/?page_id=298"},"modified":"2022-06-18T16:06:24","modified_gmt":"2022-06-18T16:06:24","slug":"turret-subsystem","status":"publish","type":"page","link":"http:\/\/gabybot.com\/turret-subsystem\/","title":{"rendered":"Turret Subsystem"},"content":{"rendered":"\n<p>Our final subsystem is used to control the motor that drives the <strong>Turret<\/strong>. The turret is designed so that it can rotate through an angle of 180 degrees with hard stops on each end of that rotation. There are also <strong>limit switches<\/strong> on the ends that will allow us to turn the motor off if an attempt is made to move the turret beyond the hard stops.<\/p>\n\n\n\n<p>You should use the following <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_p_w_m_motor.html#a51a53e0822eaa072286239e99cc2159e\" target=\"_blank\"><strong>constructor<\/strong><\/a>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nrobotCore.PWMMotor.PWMMotor\t(\t\n    int \tpwmPin,\n    int \tdirPin,\n)\t<\/code><\/pre>\n\n\n\n<p>With pin numbers:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\tprivate static final int k_PWMPin = Device.M3_1_PWM;\n\tprivate static final int k_DirPin = Device.M3_1_DIR;<\/code><\/pre>\n\n\n\n<p>We will also need a way to read the limit switches and we will use the <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_digital_input.html\" target=\"_blank\">DigitalInput<\/a><\/strong> class for this. You will need to create two instances of this class, one for the left limit switch and one for the right. You should use the following <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_digital_input.html\" target=\"_blank\"><strong>constructor<\/strong><\/a>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>robotCore.DigitalInput.DigitalInput(int pin)\t<\/code><\/pre>\n\n\n\n<p>Using pin:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\tprivate static final int k_LeftLimit = Device.IO_4;\n\tprivate static final int k_rightLimit = Device.IO_3;<\/code><\/pre>\n\n\n\n<p>Note, the way the robot is wired, the <strong><a href=\"\/RobotCoreDoc\/classrobot_core_1_1_digital_input.html#ad073c2fd160feef0ce16aab1b2ce5180\" target=\"_blank\" rel=\"noreferrer noopener\">get()<\/a><\/strong> function of the <strong><a href=\"\/RobotCoreDoc\/classrobot_core_1_1_digital_input.html\" target=\"_blank\" rel=\"noreferrer noopener\">DigitalInput<\/a><\/strong> class will return <strong>true<\/strong> if the limit switch is activated.<\/p>\n\n\n\n<p>Now you will need to stop the motor when the turntable hits the limit switches. You could do this in the various commands that you create which use the <strong>Turret<\/strong> subsystem, but this would require you to duplicate our code in multiple places. It would also not be very secure since if we forgot to do the check in a command, the motor would not turn off when the turret hit the hard stop.<\/p>\n\n\n\n<p>What we really want is for the <strong>Turret <\/strong>subsystem to automatically handle the limit switches so that we don\u2019t have to do this everywhere we use it. To accomplish this you should create a function which checks the limit switches. In that function, you should turn the motors off if the motor is turning the turret in the direction of a given limit switch and that limit switch is active. Here is some \u2018pseudo\u2019 code which shows you how such a function might be constructed:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>checkLimit() {\n  power = stop motor\n  \n  if (Turning left) {\n    if (Left limit is not pressed) {\n      power = current power\n    }\n  } else if (Turning right) {\n    if (Right limit is not activated) {\n      power = current power\n    }\n  }\n\n  Set motor to power\n}<\/code><\/pre>\n\n\n\n<p>Then for our <strong>setPower()<\/strong> function, we should set the \u2018<strong>current power<\/strong>\u2019 to the power that is passed in and then call our <strong>checkLimit()<\/strong> function. We should also call the <strong>checkLimit()<\/strong> function from the <strong>periodic()<\/strong> function to ensure that once we start the turret rotating it will automatically stop once the limit switch is active.<\/p>\n\n\n\n<p>Once you have completed this subsystem, create a <strong>Turntable <\/strong>command which will rotate the turntable at a constant power either left or right. Then create two instances of this command and tie them to two buttons, one that turns the turntable left and the other that turns it right while the buttons are held.<\/p>\n\n\n\n<p><a href=\"\/navigation\/\">Next: Navigation<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Our final subsystem is used to control the motor that drives the Turret. The turret is designed so that it can rotate through an angle of 180 degrees with hard stops on each end of that rotation. There are also limit switches on the ends that will allow us to turn the motor off if&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/turret-subsystem\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Turret Subsystem<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/298"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=298"}],"version-history":[{"count":20,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/298\/revisions"}],"predecessor-version":[{"id":2271,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/298\/revisions\/2271"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=298"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}