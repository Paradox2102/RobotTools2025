{"id":2971,"date":"2024-08-24T00:42:09","date_gmt":"2024-08-24T00:42:09","guid":{"rendered":"http:\/\/gabybot.com\/?page_id=2971"},"modified":"2025-03-06T16:55:32","modified_gmt":"2025-03-06T16:55:32","slug":"odometry","status":"publish","type":"page","link":"http:\/\/gabybot.com\/odometry\/","title":{"rendered":"Odometry"},"content":{"rendered":"\n<p>Now that we have all of the pieces working the next step is to start working on making the robot operate autonomously. One of the important steps in doing is is to find a way to keep track of the robot&#8217;s position and orientation on the field. Once we have done that we can command the robot to move along precise paths without operator intervention.<\/p>\n\n\n\n<p>The <strong>Odometry <\/strong>works by keeping track of the orientation of each of the drive wheel and the amount each wheel has turned. Every 20 ms these numbers are read and using some fairly complex math, the direction and distance that the robot moved during those 20 ms can be computed. By adding these changes up over time the absolute position of the robot can be determined.<\/p>\n\n\n\n<p>This technique is often referred to as <strong>Dead Reconning<\/strong>. The achilleas heel of this technique is each of these measurements has a slight error associated with it and this error accumulates over time. So the longer the robot drives, the less certain we are of it&#8217;s position. This can be countered if we have some other way to measure the position of the robot. For this we will be using a camera and markers called <strong>Apriltags<\/strong>.<\/p>\n\n\n\n<p>For now, we will concentrate on using the <strong>Odometry<\/strong>. As I said, the calculations are fairly complex, but, fortunately, these calculations are preformed for us via <strong>wpilib<\/strong>. The class we will be using is called <a href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1estimator_1_1_swerve_drive_pose_estimator.html\" target=\"_blank\" rel=\"noreferrer noopener\">SwerveDrivefPoseEstimator<\/a>. Since the <a href=\"\/RobotCoreDoc\/classrobot_core_1_1_gyro.html\" target=\"_blank\" rel=\"noreferrer noopener\">Gyro<\/a> and wheel <a href=\"\/RobotCoreDoc\/classrobot_core_1_1_encoder.html\" target=\"_blank\" rel=\"noreferrer noopener\">Encoders<\/a> are part of the <strong>DriveSubsystem<\/strong>, we will be declaring an instance of this class in the <strong>DriveSubsystem <\/strong>as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>private SwerveDrivePoseEstimator m_poseEstimator;\n\n...\n    \nm_poseEstimator = new SwerveDrivePoseEstimator(m_kinematics, m_gyro.getRotation2d(), getModulePositions(),\n        new Pose2d(1, 1, Rotation2d.fromDegrees(0)));\n<\/code><\/pre>\n\n\n\n<p>The constructor for <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1estimator_1_1_swerve_drive_pose_estimator.html\" target=\"_blank\">SwerveDrivePoseEstimator<\/a> take the <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/interfaceedu_1_1wpi_1_1first_1_1math_1_1kinematics_1_1_kinematics.html\" target=\"_blank\">Kinimatics<\/a> (which we have already defined), the current <a href=\"\/RobotCoreDoc\/classrobot_core_1_1_gyro.html\" target=\"_blank\" rel=\"noreferrer noopener\">Gyro<\/a> reading, the positions for all four modules and the current robot&#8217;s pose.  For the initial pose we are going to arbitrarily choose (1, 1) at an angle of 0 degrees. Later when we add the camera, this pose will be corrected using the <strong>Apriltags<\/strong>.<\/p>\n\n\n\n<p>Since we must pass in an array which contains the current <strong>SwerveModule <\/strong>positions for all four modules, we will need a function to compute that:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private final SwerveDriveKinematics m_kinematics = new SwerveDriveKinematics(\n      m_frontLeftLocation, m_frontRightLocation, m_backLeftLocation, m_backRightLocation);\n\n  private SwerveModulePosition&#91;] getModulePositions() {\n    return new SwerveModulePosition&#91;] {\n        m_frontLeft.getPosition(),\n        m_frontRight.getPosition(),\n        m_backLeft.getPosition(),\n        m_backRight.getPosition()\n    };\n  }<\/code><\/pre>\n\n\n\n<p>Note that the order of the modules returned must match the order in which they are defined when we create the <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1kinematics_1_1_swerve_drive_kinematics.html\" target=\"_blank\">SwerveDriveKinimatics<\/a> instance.<\/p>\n\n\n\n<p>This function calls a function <strong>getPosition <\/strong>in the <strong>SwerveModule<\/strong> to obtain the current position for each module.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    public double getDrivePositionInMeters() {\n        return getDrivePosition() \/ DriveSubsystem.k_ticksPerMeter;\n    }\n\n    public SwerveModulePosition getPosition() {\n        return new SwerveModulePosition(getDrivePositionInMeters(), getSteeringPositionRotation2d());\n    }<\/code><\/pre>\n\n\n\n<p>Now we must periodically calculate the robot&#8217;s position using the current<strong> gyro angle<\/strong> and <strong>wheel positions<\/strong>. We do this by adding the following the the <strong>periodic <\/strong>function of the <strong>DriveSubsystem<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_poseEstimator.updateWithTime(ApriltagsCamera.getTime(), m_gyro.getRotation2d(), getModulePositions());<\/code><\/pre>\n\n\n\n<p>Now we are ready to try this out. To see if it is working we could simply print out the robots position and angle and drive it around and compare the output to the actual robot&#8217;s position. However, as this would be quite tedious, we will use a better solution.<\/p>\n\n\n\n<p>The Apriltags class (which we will be using later when we add the camera) has a built in server which can transmit the robot&#8217;s pose to a program which we will run on the laptop. This program will then display the current robot pose graphically so we can see where it is at any time.<\/p>\n\n\n\n<p>Do use this feature we need to create an instance of the <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1apriltags_1_1_apriltags_camera.html\" target=\"_blank\">ApriltagsCamera<\/a> and the <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1apriltags_1_1_position_server.html\" target=\"_blank\">PositionServer<\/a> in our <strong>DriveSubsystem <\/strong>class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private ApriltagsCamera m_camera = new ApriltagsCamera();\n  private final PositionServer m_posServer = new PositionServer(m_camera);<\/code><\/pre>\n\n\n\n<p>You should  then start the server with a call to:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_posServer.start();<\/code><\/pre>\n\n\n\n<p>An then in the periodic function we can update the <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1apriltags_1_1_position_server.html\" target=\"_blank\">PositionServer<\/a> with the current robot&#8217;s pose:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_posServer.setPosition(m_poseEstimator.getEstimatedPosition());<\/code><\/pre>\n\n\n\n<p>You will find the <strong>Position Viewer<\/strong> app in the <strong>Utils <\/strong>directory of <strong>RobotTools2024<\/strong>. Start your program and then start the <strong>Position Viewer<\/strong> by double clicking on the <strong>PositionViewer.cmd<\/strong> file in the <strong>Utils <\/strong>folder. Then drive your robot around a bit and you will find it&#8217;s path displayed by the <strong>Position Viewer<\/strong>:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/08\/PositionViewer.jpg\" alt=\"\" class=\"wp-image-3035\" width=\"524\" height=\"262\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/PositionViewer.jpg 874w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/PositionViewer-300x150.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/PositionViewer-150x75.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/PositionViewer-768x385.jpg 768w\" sizes=\"(max-width: 524px) 100vw, 524px\" \/><\/figure><\/div>\n\n\n\n<p>The current position of the robot is shown by the <strong>red square<\/strong> and it position history is shown bye the <strong>green dots<\/strong>.<\/p>\n\n\n\n<p><a href=\"\/adding-a-camera\/\" data-type=\"page\">Next: Adding A Camera<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Now that we have all of the pieces working the next step is to start working on making the robot operate autonomously. One of the important steps in doing is is to find a way to keep track of the robot&#8217;s position and orientation on the field. Once we have done that we can command&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/odometry\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Odometry<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/2971"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=2971"}],"version-history":[{"count":27,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/2971\/revisions"}],"predecessor-version":[{"id":4144,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/2971\/revisions\/4144"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=2971"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}