{"id":2875,"date":"2024-08-18T02:15:52","date_gmt":"2024-08-18T02:15:52","guid":{"rendered":"http:\/\/gabybot.com\/?page_id=2875"},"modified":"2025-02-05T18:04:14","modified_gmt":"2025-02-05T18:04:14","slug":"arcade-drive-2","status":"publish","type":"page","link":"http:\/\/gabybot.com\/arcade-drive-2\/","title":{"rendered":"Arcade Drive"},"content":{"rendered":"\n<p>It is time to create the <strong>ArcadeDrive <\/strong>command which will allow you to drive the robot using a <strong>joystick <\/strong>or <strong>XBox controller<\/strong>. As you might guess, the <strong>ArcadeDrive <\/strong>command for a swerve robot is a fair bit more complicated that that of the <strong>Minibot<\/strong>,<strong> <\/strong>but, fear not, as most of the heavy lifting is provided by <strong>wpilib<\/strong>.<\/p>\n\n\n\n<p>We are going to start by using the following <strong>drive <\/strong>function which is provided by <strong>wpilib<\/strong>. This function should be added to the <strong>DriveSubsystem<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \/**\n   * Method to drive the robot using joystick info.\n   *\n   * @param xSpeed        Speed of the robot in the x direction (forward).\n   * @param ySpeed        Speed of the robot in the y direction (sideways).\n   * @param rot           Angular rate of the robot.\n   * @param fieldRelative Whether the provided x and y speeds are relative to the\n   *                      field.\n   *\/\n  public void drive(double xSpeed, double ySpeed, double rot, boolean fieldRelative, double periodSeconds) {\n    SwerveModuleState&#91;] swerveModuleStates = m_kinematics.toSwerveModuleStates(\n        ChassisSpeeds.discretize(\n            fieldRelative\n                ? ChassisSpeeds.fromFieldRelativeSpeeds(\n                    xSpeed, ySpeed, rot, m_gyro.getRotation2d())\n                : new ChassisSpeeds(xSpeed, ySpeed, rot),\n            periodSeconds));\n\n    setModuleStates(swerveModuleStates);\n  }<\/code><\/pre>\n\n\n\n<p>This takes as input the desired speed in the <strong>x <\/strong>and <strong>y <\/strong>directions (in <strong>meters\/sec<\/strong>) and the desired <strong>angular <\/strong>rate of rotation (in <strong>radians\/sec<\/strong>) and sets the module states to get the robot to drive and rotate as required. This function also takes a boolean <strong>fieldRelative <\/strong>which specifies whether the speeds are <strong>relative <\/strong>to the current orientation of the robot or <strong>absolute <\/strong>with respect to the field.<\/p>\n\n\n\n<p>Now to make this work we are going to need to implement a number of things. The first thing we see is that it uses a variable <strong>m_kinematics <\/strong>which is an instance of <a href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1kinematics_1_1_swerve_drive_kinematics.html\" target=\"_blank\" rel=\"noreferrer noopener\">SwerveDriveKinematics<\/a> and is declared like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private final Translation2d m_frontLeftLocation = new Translation2d(0.05842, 0.05842);\n  private final Translation2d m_backLeftLocation = new Translation2d(-0.05842, 0.05842);\n  private final Translation2d m_backRightLocation = new Translation2d(-0.05842, -0.05842);\n  private final Translation2d m_frontRightLocation = new Translation2d(0.05842, -0.05842);\n\n  private final SwerveDriveKinematics m_kinematics = new SwerveDriveKinematics(\n      m_frontLeftLocation, m_backLeftLocation, m_backRightLocation, m_frontRightLocation);<\/code><\/pre>\n\n\n\n<p>The constructor for this class takes the physical positions (in <strong>meters<\/strong>) of the swerve wheels with respect to the center of the robot. Pay close attention to the order of these parameters. There will be a number of places where you will see a list such as this and the order must always be the same.<\/p>\n\n\n\n<p>Now in order to move relative to the field, we will need to know the current orientation of the robot. To do this we will need to add a <a href=\"\/RobotCoreDoc\/classrobot_core_1_1_gyro.html\" target=\"_blank\" rel=\"noreferrer noopener\">Gyro<\/a>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private final Gyro m_gyro = new Gyro();<\/code><\/pre>\n\n\n\n<p>Note that, for the moment, we will be computing the robot&#8217;s orientation solely from the <strong>gyro<\/strong>. Later, when we add a <strong>camera<\/strong>, we will want to incorporate the camera information to correct for gyro drift and this call will need to be changed. Also be sure to <a href=\"\/RobotCoreDoc\/classrobot_core_1_1_gyro.html#a023315318dc6df56ff4fea418e9653c5\">reset<\/a> the <strong>gyro <\/strong>at startup by adding this to the <strong>DriveSubsystem <\/strong>constructor:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_gyro.reset(0);<\/code><\/pre>\n\n\n\n<p>Note that once you create an instance of the <strong>gyro<\/strong>, there will be a gyro initialization process that happens on startup. The output to the console will look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>3655:Robot(3):robotInit()\n3699:ExampleSubsystem(3):ExampleSubsystem()\n3704:Gyro(1):Wait for initialization...\n4709:Gyro(1):Waiting for gyro: state = 0\n5713:Gyro(1):Waiting for gyro: state = 0\n6716:Gyro(1):Waiting for gyro: state = 0\n7720:Gyro(1):Waiting for gyro: state = 0\n8724:Gyro(1):Waiting for gyro: state = 0\n9729:Gyro(1):Waiting for gyro: state = 1\n11511:DriveSubsystem(3):DriveSubsystem()<\/code><\/pre>\n\n\n\n<p>You will need to wait until the initialization is complete before you can connect to the robot. Occasionally this initialization will <strong>fail <\/strong>and you will see a state of <strong>-1<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>3406:ExampleSubsystem(3):ExampleSubsystem()\n3410:Gyro(1):Wait for initialization...\n4412:Gyro(1):Waiting for gyro: state = 0\n5416:Gyro(1):Waiting for gyro: state = -1\n5416:Gyro(1):Init failed, retrying...\n6420:Gyro(1):Waiting for gyro: state = 0<\/code><\/pre>\n\n\n\n<p>The system will try and retry the initialization but this always fails so if this happens you need to stop your program and restart it.<\/p>\n\n\n\n<p>Now the function <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1kinematics_1_1_swerve_drive_kinematics.html#a51287be514d61be18813f7f2e0794731\" target=\"_blank\">toSwerveModuleStates<\/a> performs the complicated calculations required to set the position and velocity of all of the four wheels in order to move in the desired way. The output of this function is an array of <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1kinematics_1_1_swerve_module_state.html\" target=\"_blank\">SwerveModuleState<\/a> with one value for each of the wheels. Note that the order of these states will be the same as the order you used when you created the <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1kinematics_1_1_swerve_drive_kinematics.html\" target=\"_blank\">SwerveDriveKinematics<\/a> instance.<\/p>\n\n\n\n<p>We then need to create a function that will apply these states to all four wheels:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private void setModuleStates(SwerveModuleState&#91;] swerveModuleStates) {\n    SwerveDriveKinematics.desaturateWheelSpeeds(swerveModuleStates, k_maxDriveSpeedMetersPerSecond);\n    m_frontLeft.setDesiredState(swerveModuleStates&#91;0]);\n    m_backLeft.setDesiredState(swerveModuleStates&#91;1]);\n    m_backRight.setDesiredState(swerveModuleStates&#91;2]);\n    m_frontRight.setDesiredState(swerveModuleStates&#91;3]);\n  }<\/code><\/pre>\n\n\n\n<p>The call to <a href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1kinematics_1_1_swerve_drive_kinematics.html#ad84dcb0afe48f30b9d2446855f212cad\" target=\"_blank\" rel=\"noreferrer noopener\">desaturateWheelSpeeds<\/a> guarantees that we don&#8217;t try and run any of the wheels faster than they can go. We then call <strong>setDesiredState <\/strong>for each of the modules. Once again note the order of these. Naturally we need to implement <strong>setDesiredState <\/strong>in our <strong>SwerveModule <\/strong>class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    public void setDesiredState(SwerveModuleState desiredState) {\n\n        Rotation2d encoderRotation = Rotation2d.fromDegrees(getSteeringPosition());\n\n        \/\/ Optimize the reference state to avoid spinning further than 90 degrees\n        SwerveModuleState state = SwerveModuleState.optimize(desiredState, encoderRotation);\n\n        state.speedMetersPerSecond *= state.angle.minus(encoderRotation).getCos();\n\n        setDriveSpeedInMetersPerSecond(state.speedMetersPerSecond);\n        setSteeringPosition(state.angle.getDegrees());\n    }<\/code><\/pre>\n\n\n\n<p>Note the call to <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1kinematics_1_1_swerve_module_state.html#a8012fe3f127fcb3942dcaa8ad45f950a\" target=\"_blank\">optimize<\/a>. This function optimizes the angle and speed by reversing the direction and adding <strong>180 <\/strong>degrees if the amount the wheel must be rotated exceeds <strong>90 <\/strong>degrees. This guarantees that the maximum amount the wheel will have to rotate is <strong>90 <\/strong>degrees.<\/p>\n\n\n\n<h4>ArcadeDrive<\/h4>\n\n\n\n<p>We are now ready to create the <strong>ArcadeDrive <\/strong>command. It is a little complicated so I am going to give you the entire command and then I will discuss the details:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot.commands;\n\nimport java.util.function.DoubleSupplier;\nimport edu.wpi.first.math.MathUtil;\nimport edu.wpi.first.math.filter.SlewRateLimiter;\nimport edu.wpi.first.wpilibj.TimedRobot;\nimport edu.wpi.first.wpilibj2.command.Command;\nimport frc.robot.subsystems.DriveSubsystem;\nimport robotCore.Logger;\nimport robotCore.RobotCoreBase;\n\n\/**\n * An example command that uses an example subsystem.\n *\/\npublic class ArcadeDrive extends Command {\n  private final DriveSubsystem m_subsystem;\n  private final DoubleSupplier m_x;\n  private final DoubleSupplier m_y;\n  private final DoubleSupplier m_turn;\n  private final Boolean m_fieldRelative;\n\n  private final SlewRateLimiter m_xspeedLimiter = new SlewRateLimiter(3);\n  private final SlewRateLimiter m_yspeedLimiter = new SlewRateLimiter(3);\n  private final SlewRateLimiter m_rotLimiter = new SlewRateLimiter(3);\n\n  \/**\n   * Creates a new ArcadeDrive.\n   *\n   * @param subsystem The subsystem used by this command.\n   *\/\n  public ArcadeDrive(DriveSubsystem subsystem, DoubleSupplier x, DoubleSupplier y, DoubleSupplier turn,\n      boolean fieldRelative) {\n    Logger.log(\"ArcadeDrive\", 3, \"ArcadeDrive()\");\n\n    m_subsystem = subsystem;\n    m_x = x;\n    m_y = y;\n    m_turn = turn;\n    m_fieldRelative = fieldRelative;\n\n    \/\/ Use addRequirements() here to declare subsystem dependencies.\n    addRequirements(m_subsystem);\n  }\n\n  \/\/ Called when the command is initially scheduled.\n  @Override\n  public void initialize() {\n    Logger.log(\"ArcadeDrive\", 2, \"initialize()\");\n  }\n\n  \/\/ Called every time the scheduler runs while the command is scheduled.\n  @Override\n  public void execute() {\n    Logger.log(\"ArcadeDrive\", -1, \"execute()\");\n\n    double x = m_x.getAsDouble();\n    double y = m_y.getAsDouble();\n    double turn = m_turn.getAsDouble();\n\n    \/\/ Get the x speed. We are inverting this because Xbox controllers return\n    \/\/ negative values when we push forward.\n    final var xSpeed = -m_xspeedLimiter.calculate(MathUtil.applyDeadband(y, 0.02))\n        * DriveSubsystem.k_maxDriveSpeedMetersPerSecond;\n\n    \/\/ Get the y speed or sideways\/strafe speed. We are inverting this because\n    \/\/ we want a positive value when we pull to the left. Xbox controllers\n    \/\/ return positive values when you pull to the right by default.\n    final var ySpeed = -m_yspeedLimiter.calculate(MathUtil.applyDeadband(x, 0.02))\n        * DriveSubsystem.k_maxDriveSpeedMetersPerSecond;\n\n    \/\/ Get the rate of angular rotation. We are inverting this because we want a\n    \/\/ positive value when we pull to the left (remember, CCW is positive in\n    \/\/ mathematics). Xbox controllers return positive values when you pull to\n    \/\/ the right by default.\n    double rot = -m_rotLimiter.calculate(MathUtil.applyDeadband(turn, 0.20))\n        * DriveSubsystem.k_maxAngularSpeed;\n\n    if ((xSpeed != 0) || (ySpeed != 0) || (rot != 0)) {\n      m_subsystem.drive(xSpeed, ySpeed, rot, m_fieldRelative, ((TimedRobot) RobotCoreBase.getInstance()).getPeriod());\n    } else {\n      m_subsystem.stop();\n    }\n  }\n\n  \/\/ Called once the command ends or is interrupted.\n  @Override\n  public void end(boolean interrupted) {\n    Logger.log(\"ArcadeDrive\", 2, String.format(\"end(%b)\", interrupted));\n  }\n\n  \/\/ Returns true when the command should end.\n  @Override\n  public boolean isFinished() {\n    Logger.log(\"ArcadeDrive\", -1, \"isFinished()\");\n    return false;\n  }\n}\n<\/code><\/pre>\n\n\n\n<p>For the constructor we pass in the <strong>DriveSubsystem<\/strong>, of course, but we also pass in double suppliers which provide the joystick <strong>x<\/strong>, <strong>y<\/strong>, and <strong>rotation <\/strong>values. These will be direct values from the joystick so they will all range from -1 to +1.<\/p>\n\n\n\n<p>The <strong>execute <\/strong>function is where everything happens. We first obtain the current values for the joystick <strong>x<\/strong>, <strong>y<\/strong>, and <strong>rotation <\/strong>settings. We then call the function <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1_math_util.html#aee4b9e7f894e0ebab10f0be65c0f7bfc\" target=\"_blank\">applyDeadband<\/a> which will ignore the input if it is within the specified dead zone. I am using <strong>0.02<\/strong> for the <strong>x <\/strong>and <strong>y <\/strong>and <strong>0.20<\/strong> for the rotation. I am using the larger value for the rotation because I am using the twist function (i.e. Z) of the <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1wpilibj_1_1_joystick.html#a48c1237d6aef3c683b52ca8423ffae0b\" target=\"_blank\">Joystick<\/a> (as opposed to an XBox controller) and it is very difficult not to slightly twist the joystick when moving the robot and I don&#8217;t want it to turn unless I twist it significantly.<\/p>\n\n\n\n<p>We then take this result and pass it into <a href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1math_1_1filter_1_1_slew_rate_limiter.html\" target=\"_blank\" rel=\"noreferrer noopener\">SlewRateLimiter<\/a> to limit the rate at which the values can change.<\/p>\n\n\n\n<p>This result still represents a value from -1 to +1 and we need to convert this to <strong>meters\/sec<\/strong> for the <strong>x<\/strong> and <strong>y <\/strong>and <strong>radians\/sec<\/strong> for the <strong>rotation<\/strong>. We do this by multiplying them by the appropriate conversion factor <strong>k_maxDriveSpeedMetersPerSecond <\/strong>or <strong>k_maxAngularSpeed<\/strong>. Note that we have chosen <strong>2 radians\/sec<\/strong> for the maximum <strong>angular <\/strong>speed. I believe that the robot can actually turn faster than that (I have not actually measured it) but turning faster than that makes the robot more difficult to control. You can, of course, change this number to suit your needs.<\/p>\n\n\n\n<p>We are then ready to call the drive function we created in the <strong>DriveSubsystem<\/strong>. When testing this I found when the input was all zero, the motors were a bit twitchy so when the inputs are all zero, I <strong>stop <\/strong>all the motors instead.<\/p>\n\n\n\n<h4>Set Default Command<\/h4>\n\n\n\n<p>Now, as we did with the <strong>Minibot<\/strong>, we need to set this new <strong>ArcadeDrive <\/strong>command as the default command for the <strong>DriveSubsystem, <\/strong>and we do this in the <strong>RobotConatiner<\/strong>.<\/p>\n\n\n\n<p>If we look at the constructor for <strong>ArcadeDrive <\/strong>we see that it takes three parameters which are declared as <strong>DoubleSupplier<\/strong>. What this is is a <strong>callback function<\/strong> which will return a <strong>double value<\/strong>. We will use these to pass in functions which will supply the <strong>x<\/strong>, <strong>y <\/strong>and <strong>turn <\/strong>values from the <a href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1wpilibj_1_1_joystick.html\">Joy<\/a><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1wpilibj_1_1_joystick.html\" target=\"_blank\">s<\/a><a href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1wpilibj_1_1_joystick.html\">tick<\/a> or <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classedu_1_1wpi_1_1first_1_1wpilibj_1_1_xbox_controller.html\" target=\"_blank\">XboxController<\/a>.<\/p>\n\n\n\n<p>To pass in a function as an argument we use a feature of <strong>Java <\/strong>called <a href=\"https:\/\/www.w3schools.com\/java\/java_lambda.asp\">Lamda Expressions<\/a> (you will need to be connected to the internet for this link to work). So what we are going to want to do is to pass in a pointer to the <strong>Joystick <\/strong>function that will return the <strong>x<\/strong>, <strong>y <\/strong>and <strong>twist <\/strong>of the joystick. For example the form of the <strong>Lamda Expression<\/strong> to pass in the function that will return the <strong>x<\/strong> value for the joystick will look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>() -&gt; m_joystick.getX()<\/code><\/pre>\n\n\n\n<p>Here <strong>m_joystick.getX()<\/strong> is the function which returns the joystick&#8217;s current <strong>x <\/strong>position. This <strong>Lamda Expression<\/strong> creates a <strong>callback function<\/strong> which we can call to return the value from the <strong>getX()<\/strong> function when needed. <\/p>\n\n\n\n<p>Armed with this information we are now ready to set the <strong>default command<\/strong> for the <strong>DriveSubsystem <\/strong>to our <strong>ArcadeDrive <\/strong>command. In the <strong>RobotContainer<\/strong> <strong>constructor<\/strong> you need to add the following:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_driveSubsystem.setDefaultCommand(new ArcadeDrive(m_driveSubsystem, () -&gt; m_joystick.getX(),\n    () -&gt; -m_joystick.getY(), () -&gt; m_joystick.getZ(), true));\n<\/code><\/pre>\n\n\n\n<p>If you are using an <strong>XBoxController <\/strong>instead of a <strong>Joystick<\/strong>, your code should look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    m_driveSubsystem.setDefaultCommand(new ArcadeDrive(m_driveSubsystem, () -&gt; m_xbox.getLeftX(),\n        () -&gt; -m_xbox.getLeftY(), () -&gt; m_xbox.getRightX(), true));\n<\/code><\/pre>\n\n\n\n<h4>Maintain orientation<\/h4>\n\n\n\n<p>You probably will find that as you drive the robot around it&#8217;s orientation is not maintained (even when you are not rotating it with the joystick). This is because the precision of the motors and sensors are not perfect. This is particularly apparent when using these cheap motors and 3d printed gears, but you will find the same behavior with the larger FRC robots.<\/p>\n\n\n\n<p>You can fix this issues by using the <strong>gyro <\/strong>to maintain the current orientation. The basic idea is that when you are not commanding the robot to rotate, you record the current heading. Then as it moves you measure the difference between the current gyro heading and the desired heading. Then you automatically add a rotate vector that is proportional to the difference between the desired heading and the current heading. This will cause the robot to automatically correct itself. You should create a constant that multiplies the heading difference (e.g. <strong>k_p<\/strong>) and adjust it as you would tune the <strong>P <\/strong>of a <strong>PID <\/strong>loop so that it turns to the correct heading as fast as possible without the robot oscellating.<\/p>\n\n\n\n<p>The implementation of this feature is left as an exercise for the reader.<\/p>\n\n\n\n<p><a href=\"\/shooter-subsystem-2\/\" data-type=\"page\" data-id=\"2938\">Next: Shooter Subsystem<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>It is time to create the ArcadeDrive command which will allow you to drive the robot using a joystick or XBox controller. As you might guess, the ArcadeDrive command for a swerve robot is a fair bit more complicated that that of the Minibot, but, fear not, as most of the heavy lifting is provided&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/arcade-drive-2\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Arcade Drive<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/2875"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=2875"}],"version-history":[{"count":42,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/2875\/revisions"}],"predecessor-version":[{"id":4123,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/2875\/revisions\/4123"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=2875"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}