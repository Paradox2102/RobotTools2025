{"id":1399,"date":"2021-05-22T01:33:10","date_gmt":"2021-05-22T01:33:10","guid":{"rendered":"http:\/\/programming.sdarobotics.org\/?page_id=1399"},"modified":"2022-06-18T14:35:32","modified_gmt":"2022-06-18T14:35:32","slug":"path-following","status":"publish","type":"page","link":"http:\/\/gabybot.com\/path-following\/","title":{"rendered":"Path Planning"},"content":{"rendered":"\n<p>In order for the robot to perform autonomous tasks we need a way to instruct the robot to follow a precise path. To accomplish this we use a technique called&nbsp;<strong>Pure Pursuit<\/strong>&nbsp;which described in this&nbsp;<a rel=\"noreferrer noopener\" href=\"https:\/\/www.ri.cmu.edu\/pub_files\/pub3\/coulter_r_craig_1992_1\/coulter_r_craig_1992_1.pdf\" target=\"_blank\"><strong>white paper<\/strong><\/a> by R. Craig Coulter.<\/p>\n\n\n\n<p>The basic idea behind <strong>Pure Pursuit<\/strong>&nbsp;path following is that at any given point in time we find the point on the desired path that is closest to the current robot\u2019s position. We then look ahead on the path a certain distance and attempt to steer the robot to that position.<\/p>\n\n\n\n<p>The Achilles heel of this technique is that we need to be able to keep track of the robots absolute position on the field. As it turns out, this is actually quite hard to do.<\/p>\n\n\n\n<p>To accomplish this tracking, we use the encoders on the drive wheels and a gyro to integrate the robot\u2019s position over time. Periodically we get the current value of the drive wheel encoders and the gyro, and using this information and a little trigonometry compute the change in&nbsp;<strong>x<\/strong>&nbsp;and&nbsp;<strong>y<\/strong>&nbsp;during that interval. The problem with this is that we get an accumulated error which increases over time which can end up with fairly large error. However, we are able to get the robot to follow fairly complex paths reasonably reliably, at least for a short time. <\/p>\n\n\n\n<p>Since doing these calculation requires precise timing, for the <strong>NerfBot, <\/strong>we are using an <strong>Arduino <\/strong>based module to read the encoders and gyro and compute the position.<\/p>\n\n\n\n<p>Now in order for this all to work, we must have a reasonable path for the robot to follow. To define our paths we use 5th order <strong><a href=\"https:\/\/en.wikipedia.org\/wiki\/B%C3%A9zier_curve\">Bezier<\/a> <\/strong>curves and then compute paths for the <strong>left wheel<\/strong>, <strong>robot center<\/strong> and <strong>right wheel<\/strong> simultaneously so as to ensure that neither the left or right speeds exceeded whatever maximum velocity is set. The tool we will use to design these paths is called <strong>PathPlanner <\/strong>and can be found in the <strong>PiUtil<\/strong> folder of the <strong>RobotTools2021<\/strong> that you have installed.<\/p>\n\n\n\n<p>The paths are constructed by a series of 5th order Bezier curves. The parametric curve is defined by 6 control points, <strong>P0<\/strong>, <strong>P1<\/strong>, <strong>P2<\/strong>, <strong>P3<\/strong>, <strong>P4 <\/strong>and <strong>P5<\/strong>. Only the first and last points lie on the curve, the other points control the shape of the curve.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/BezierCurve.png\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/BezierCurve.png\" alt=\"\" class=\"wp-image-1413\" width=\"376\" height=\"317\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/BezierCurve.png 643w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/BezierCurve-300x253.png 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/BezierCurve-150x126.png 150w\" sizes=\"(max-width: 376px) 100vw, 376px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>When two curves of the path are joined, we want the slope (i.e. first derivative) of the curves to match. To achieve this we find that the last two points of the first curve (P4 and P5) must be co-linear with the first two points of the next curve (P0 and P1). In addition, we need the velocity of the left and right wheels to be continuous as well. In order to achieve this, the second derivative of the curves must also match at the join point. This requires that the last 3 points of the first curve (P3, P4, and P5) be co-linear with the first three points of the second curve (P0, P1, and P2). This constrains our choices for the values of the control points but still gives us the ability control the shape of the curves.<\/p>\n\n\n\n<p>Running the <strong>PathPlanner <\/strong>program from the <strong>PiUtils <\/strong>folder should produce the following:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/PathPlanner1-Anotated-1.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/PathPlanner1-Anotated-1-1024x755.jpg\" alt=\"\" class=\"wp-image-1432\" width=\"423\" height=\"311\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner1-Anotated-1-1024x755.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner1-Anotated-1-300x221.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner1-Anotated-1-150x111.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner1-Anotated-1-768x566.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner1-Anotated-1.jpg 1229w\" sizes=\"(max-width: 423px) 100vw, 423px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>The fields in the lower left have the following meanings:<\/p>\n\n\n\n<ul><li><strong># Points<\/strong>&nbsp;\u2013 Specifies the number of points that should be generated along each <strong>Bezier<\/strong> curve. 1000 is a reasonable number here.<\/li><li><strong>DT<\/strong>&nbsp;\u2013 Specifies the time between points generated for the final output<\/li><li><strong>Max Velocity<\/strong>&nbsp;\u2013 Specifies the default maximum velocity for the robot in <strong>feet\/sec<\/strong>.<\/li><li><strong>Max Accel<\/strong>&nbsp;\u2013 Specifies the maximum acceleration for the robot in <strong>feet\/sec*sec<\/strong>.<\/li><li><strong>Max Decel<\/strong> &#8211; Specifies the maximum deceleration for the robot in <strong>feet\/sec*sec<\/strong>.<\/li><li><strong>Max Jerk<\/strong>&nbsp;\u2013 Specifies the maximum jerk for the robot in <strong>feet\/sec*sec*sec<\/strong>.<\/li><li><strong>Wheel Base<\/strong>&nbsp;\u2013 Specifies the distance between the drive wheels of the tank drive robot in <strong>feet<\/strong>.<\/li><\/ul>\n\n\n\n<p>In the&nbsp;<strong>Waypoints<\/strong>&nbsp;edit field we will enter the waypoints of our path. There are a number of&nbsp;formats for these values. The simplest consists of the starting point, angle in the following format:<\/p>\n\n\n\n<p><strong>x, y, angle<\/strong><\/p>\n\n\n\n<p>When you start PathPlanner it will display a simple path which goes from <strong>(0,0)<\/strong> pointing <strong>up <\/strong>(90 degrees) to <strong>(3,3)<\/strong> pointing <strong>right <\/strong>(0 degrees). The green line represents the path of the left wheel, the red line the center of the robot and the blue line the right wheel.<\/p>\n\n\n\n<p>Note that in the above image I have marked the position of the <strong>6 Bezier<\/strong> control points, <strong>P0<\/strong>, <strong>P1<\/strong>, <strong>P2<\/strong>, <strong>P3<\/strong>, <strong>P4<\/strong>, and <strong>P5<\/strong>. Note that when you use this format, the points <strong>P1 <\/strong>and <strong>P2 <\/strong>will always be coincident, as will the points <strong>P3 <\/strong>and <strong>P4<\/strong>. Also the distance the points <strong>P1<\/strong>, <strong>P2<\/strong>, <strong>P3 <\/strong>and <strong>P4 <\/strong>are from their respective end points will be automatically calculated based on the length of the path.<\/p>\n\n\n\n<p>Once you have plotted the curve you can see the required velocities for the <strong>center<\/strong> and <strong>left <\/strong>and <strong>right <\/strong>wheels by clicking the&nbsp;<strong>Velocity<\/strong>&nbsp;radio button:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/PathPlannerVelocity-1.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/PathPlannerVelocity-1-1024x787.jpg\" alt=\"\" class=\"wp-image-1434\" width=\"426\" height=\"326\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlannerVelocity-1-1024x787.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlannerVelocity-1-300x231.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlannerVelocity-1-150x115.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlannerVelocity-1-768x590.jpg 768w\" sizes=\"(max-width: 426px) 100vw, 426px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>You can also see the acceleration that will be required by clicking the&nbsp;<strong>Acceleration<\/strong>&nbsp;radio button:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/PathPlannerAccep.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/PathPlannerAccep-1024x787.jpg\" alt=\"\" class=\"wp-image-1437\" width=\"426\" height=\"326\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlannerAccep-1024x787.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlannerAccep-300x231.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlannerAccep-150x115.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlannerAccep-768x590.jpg 768w\" sizes=\"(max-width: 426px) 100vw, 426px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Now using the basic format to specify the curve endpoints is quick and easy, but we also want to control the position the other four Bezier control points (<strong>P1<\/strong>, <strong>P2<\/strong>, <strong>P3 <\/strong>and <strong>P4<\/strong>). In order to maintain the first and second derivatives, these points are constrained to a line that is tangent to the curve at the endpoints. However, the distance of these control points from the endpoints can be controlled and will affect the shape of the curve and the resultant velocities and accelerations required.<\/p>\n\n\n\n<p>For example, we can specify the distance from the endpoints by using <strong>2.5<\/strong> values for each line instead of the default. If we enter the following into the&nbsp;<strong>Waypoints<\/strong>&nbsp;field and display the curve we will see the following:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/PathPlanner2.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/PathPlanner2-1024x787.jpg\" alt=\"\" class=\"wp-image-1440\" width=\"422\" height=\"323\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2-1024x787.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2-300x231.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2-150x115.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2-768x590.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2.jpg 1246w\" sizes=\"(max-width: 422px) 100vw, 422px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Now you can see that the control points have moved out and this produces a much tighter curve. If we look at the velocity curves we see:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/PathPlanner2Velocity.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/PathPlanner2Velocity-1024x787.jpg\" alt=\"\" class=\"wp-image-1443\" width=\"422\" height=\"323\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2Velocity-1024x787.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2Velocity-300x231.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2Velocity-150x115.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2Velocity-768x590.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2Velocity.jpg 1246w\" sizes=\"(max-width: 422px) 100vw, 422px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>You can see that this tighter curve requires a much greater velocity change for the middle of the path. Looking at the acceleration curves we see:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/PathPlanner2Accel.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/PathPlanner2Accel-1024x787.jpg\" alt=\"\" class=\"wp-image-1445\" width=\"423\" height=\"324\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2Accel-1024x787.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2Accel-300x231.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2Accel-150x115.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2Accel-768x590.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner2Accel.jpg 1246w\" sizes=\"(max-width: 423px) 100vw, 423px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Now to add additional components to the path, we only need to add additional lines. For example:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/PathPlanner3.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/PathPlanner3-1024x787.jpg\" alt=\"\" class=\"wp-image-1449\" width=\"424\" height=\"325\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner3-1024x787.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner3-300x231.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner3-150x115.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner3-768x590.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner3.jpg 1246w\" sizes=\"(max-width: 424px) 100vw, 424px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Here the path starts at position&nbsp;<strong>(-3,0)<\/strong>&nbsp;moves to position&nbsp;<strong>(0,3)<\/strong>&nbsp;and then ends at position&nbsp;<strong>(3,6)<\/strong>.<\/p>\n\n\n\n<p>Now sometimes it is desirable to use different speeds for different pieces of the path. For example, if you need the robot to execute a particularly tight curve you may need to lower the speed in order to keep the required accelerations within reason. To accommodate this, you can add an optional parameter which specifies the speed for that portion of the path.&nbsp; For example, consider the following:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/PathPlanner4Vel.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/PathPlanner4Vel-1024x787.jpg\" alt=\"\" class=\"wp-image-1453\" width=\"427\" height=\"327\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner4Vel-1024x787.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner4Vel-300x231.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner4Vel-150x115.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner4Vel-768x590.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner4Vel.jpg 1246w\" sizes=\"(max-width: 427px) 100vw, 427px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Here we see that the velocity of the robot has been reduced to&nbsp;<strong>0.5<\/strong>&nbsp;for the second portion of the path.<\/p>\n\n\n\n<p>It is also possible to specify different positions for the&nbsp;<strong>P1<\/strong>&nbsp;and&nbsp;<strong>P2<\/strong>&nbsp;control points as well as different values for the&nbsp;<strong>P3<\/strong>&nbsp;and&nbsp;<strong>P4<\/strong>&nbsp;control points. To do that we add 2 more number to the path line. For example:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/05\/PathPlanner5.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/05\/PathPlanner5-1024x787.jpg\" alt=\"\" class=\"wp-image-1457\" width=\"422\" height=\"323\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner5-1024x787.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner5-300x231.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner5-150x115.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner5-768x590.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/05\/PathPlanner5.jpg 1246w\" sizes=\"(max-width: 422px) 100vw, 422px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>As you can see for this new curve,&nbsp;<strong>P1<\/strong>&nbsp;and&nbsp;<strong>P2<\/strong>&nbsp;are no long coincident, as are&nbsp;<strong>P3<\/strong>&nbsp;and&nbsp;<strong>P4<\/strong>. Although you can use this to get even greater control over the shape of the curve, we have found that this is probably not necessary.<\/p>\n\n\n\n<p>To summarize, the following are the possible&nbsp;formats that can be used to specify the waypoints:<\/p>\n\n\n\n<ul><li>x,y,angle<\/li><li>x,y,angle,speed<\/li><li>x,y,angle,p12,p34<\/li><li>x,y,angle,p12,p34,speed<\/li><li>x,y,angle,p1,p4,p2,p3<\/li><li>x,y,angle,p1,p4,p2,p3,speed<\/li><\/ul>\n\n\n\n<p><a href=\"\/path-following-2\/\" data-type=\"page\" data-id=\"1465\">Next: Path Following<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>In order for the robot to perform autonomous tasks we need a way to instruct the robot to follow a precise path. To accomplish this we use a technique called&nbsp;Pure Pursuit&nbsp;which described in this&nbsp;white paper by R. Craig Coulter. The basic idea behind Pure Pursuit&nbsp;path following is that at any given point in time we&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/path-following\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Path Planning<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/1399"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=1399"}],"version-history":[{"count":37,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/1399\/revisions"}],"predecessor-version":[{"id":2249,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/1399\/revisions\/2249"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=1399"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}