{"id":273,"date":"2021-04-06T23:26:33","date_gmt":"2021-04-06T23:26:33","guid":{"rendered":"http:\/\/gabybot.com\/?page_id=273"},"modified":"2024-09-02T19:03:09","modified_gmt":"2024-09-02T19:03:09","slug":"shooter-subsystem","status":"publish","type":"page","link":"http:\/\/gabybot.com\/shooter-subsystem\/","title":{"rendered":"Shooter Subsystem"},"content":{"rendered":"\n<p>The <strong>Shooter Subsystem<\/strong> will control the spinning wheel that shoots the Nerf ball. The design of this subsystem is similar to that of the Drive Subsystem except that there is only one motor involved.<\/p>\n\n\n\n<p>The class which controls this motor is once again <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_p_w_m_motor.html\" target=\"_blank\">PWMMotor<\/a> <\/strong>and you should use the following <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_p_w_m_motor.html#a51a53e0822eaa072286239e99cc2159e\" target=\"_blank\"><strong>con<\/strong><\/a><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_p_w_m_motor.html#a51a53e0822eaa072286239e99cc2159e\" target=\"_blank\"><strong>s<\/strong><\/a><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_p_w_m_motor.html#a51a53e0822eaa072286239e99cc2159e\" target=\"_blank\"><strong>tructor<\/strong><\/a>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>robotCore.PWMMotor.PWMMotor(\t\n    int pwmPin,\n    int dirPin \n  )<\/code><\/pre>\n\n\n\n<p>You will, of course, need the pin numbers:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    private static final int k_PWMPin = Device.M2_2_PWM;\n    private static final int k_DirPin = Device.M2_2_DIR;<\/code><\/pre>\n\n\n\n<p>We will also need to control the speed of this motor so we will need to use the motor\u2019s built in encoder. We will use the <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_encoder.html\" target=\"_blank\">Encoder<\/a> <\/strong>class to read these encoders with the type set to <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/enumrobot_core_1_1_encoder_1_1_encoder_type.html\" target=\"_blank\">EncoderType.Quadrature<\/a><\/strong>. The <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_encoder.html#a880da43fe4949fb6e392e77abb997f41\" target=\"_blank\">constructor<\/a> <\/strong>to use is:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>robotCore.Encoder.Encoder(\t\n    EncoderType type,\n    int pin1,\n    int pin2 \n  )<\/code><\/pre>\n\n\n\n<p>And the pin numbers are:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    private static final int k_encoderPin1 = Device.Q5_INT;\n    private static final int k_encoderPin2 = -1;<\/code><\/pre>\n\n\n\n<p>Note that by setting the second pin number to <strong>-1<\/strong> we are telling the encoder that we only care about the absolute speed and do not need to encode the direction. This is because we will only ever spin the shooter wheel in one direction.<\/p>\n\n\n\n<p>After creating the instance for the <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_encoder.html\" target=\"_blank\"><strong>Encoder<\/strong><\/a>, be sure to set that<strong> <\/strong>instance as the feedback device for the motor using the PWMMotor\u2019s <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_smart_motor.html#a5787f96d5a49ab7c42ce5e0751ca5f9f\" target=\"_blank\">SetFeedbackDevice<\/a> <\/strong>function, which <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_p_w_m_motor.html\" target=\"_blank\">PWMMotor<\/a><\/strong> inherits from <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_smart_motor.html\" target=\"_blank\"><strong>SmartMotor<\/strong><\/a>.<\/p>\n\n\n\n<p>Finally, create <strong>setPower<\/strong> and <strong>setSpeed<\/strong> functions to control the motor via power and speed. You can look back to the <strong>Drive Subsystem<\/strong> to refresh you memory of how to do that.<\/p>\n\n\n\n<p>Now we are ready to tune the shooter. The technique for doing this is the same as for tuning the drive motors:<\/p>\n\n\n\n<ol><li>You should create a <strong>Calibrate Shooter <\/strong>command and tie it to a button.<\/li><li>Using this command, drive the shooter at full power (using <strong>setPower<\/strong>) and log the speed. This will tell you the maximum possible speed for the shooter. In my case I found the max speed to be about 1450.<\/li><li>Since we will be running the shooter motor near full power, set the <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_smart_motor.html#a049efdcb0ef5df4ba5803eab8a20498f\" target=\"_blank\">F t<\/a><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_smart_motor.html#a049efdcb0ef5df4ba5803eab8a20498f\" target=\"_blank\">e<\/a><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_smart_motor.html#a049efdcb0ef5df4ba5803eab8a20498f\" target=\"_blank\">rm<\/a><\/strong> of the PID controller for the motor running at a speed of 1300 (using <strong>setSpeed<\/strong>).<\/li><li>Next add a <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_smart_motor.html#a9131b97e84e9d54bd6ecaa9aab758dd5\" target=\"_blank\">P term<\/a><\/strong> and increase it until you see the speed becoming unstable, and then back off a bit.<\/li><li>Finally add an <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_smart_motor.html#a4869ae9931781ce4dddb31ee653d0905\" target=\"_blank\">I term<\/a><\/strong> and increase it until you see the speed becoming unstable, and then back off a bit. Remember to set an appropriate <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_smart_motor.html#a1f67efaae869080b3b7f3baa57c821a7\" target=\"_blank\">IZone<\/a><\/strong>.<\/li><li>Once you have it tuned for a speed of 1300, check the tuning at 1400 and 1200. Only change the <strong>P<\/strong> and <strong>I<\/strong> terms if there are significant problems at those speeds.<\/li><\/ol>\n\n\n\n<p>The following were the results of my calibration:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><a href=\"\/wp-content\/uploads\/2022\/06\/ShooterCalibration.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2022\/06\/ShooterCalibration.jpg\" alt=\"\" class=\"wp-image-2235\" width=\"351\" height=\"196\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2022\/06\/ShooterCalibration.jpg 738w, http:\/\/gabybot.com\/wp-content\/uploads\/2022\/06\/ShooterCalibration-300x168.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2022\/06\/ShooterCalibration-150x84.jpg 150w\" sizes=\"(max-width: 351px) 100vw, 351px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>Now create a <strong>Spinup Command<\/strong> which will toggle the shooter motor on and off at a specific speed, and tie it to a button. Once you get the feeder working, you will be able to experiment with different speeds and use the speed you find works best. In my case I settled on <strong>1400<\/strong>.<\/p>\n\n\n\n<p>The Shooter wheel will now shoot balls that are fed into it, but we still need a way to do the feeding.<\/p>\n\n\n\n<p><a href=\"\/feeder-subsystem\/\" data-type=\"page\" data-id=\"291\">Next: Feeder Subsystem<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>The Shooter Subsystem will control the spinning wheel that shoots the Nerf ball. The design of this subsystem is similar to that of the Drive Subsystem except that there is only one motor involved. The class which controls this motor is once again PWMMotor and you should use the following constructor: You will, of course,&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/shooter-subsystem\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Shooter Subsystem<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/273"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=273"}],"version-history":[{"count":23,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/273\/revisions"}],"predecessor-version":[{"id":3133,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/273\/revisions\/3133"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=273"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}