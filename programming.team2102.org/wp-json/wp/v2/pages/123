{"id":123,"date":"2021-04-06T15:27:05","date_gmt":"2021-04-06T15:27:05","guid":{"rendered":"http:\/\/gabybot.com\/?page_id=123"},"modified":"2024-09-05T02:12:29","modified_gmt":"2024-09-05T02:12:29","slug":"commands","status":"publish","type":"page","link":"http:\/\/gabybot.com\/commands\/","title":{"rendered":"Commands"},"content":{"rendered":"\n<p>Now that we have a&nbsp;<strong>DriveSubsystem<\/strong>&nbsp;to control the motors we are going to want to do something with it. In this programming model we use&nbsp;<strong>commands<\/strong>&nbsp;to control actions. In this chapter we are going to create a&nbsp;<strong>command<\/strong>&nbsp;which will&nbsp;cause the robot to drive forward for a specific amount of time.<\/p>\n\n\n\n<p> You can think of commands as being a little like the following loop:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\tcommand.init();\n\tdo {\n\t\tcommand.execute();\n\t} while(!command.isFinished());\n\tcommand.end();\n<\/code><\/pre>\n\n\n\n<p>In fact, it\u2019s more complicated, because these calls will be interleaved with other periodic commands, but that\u2019s the basic idea. We do things this way to allow many such loops to run at the same time.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<p>Like with DriveSubsystem, we need to:<\/p>\n\n\n\n<ul><li>Create the new class called&nbsp;<strong>DriveForTimeCommand<\/strong>&nbsp;under the <em>commands <\/em>folder. Like we did with the&nbsp;<strong>DriveSubsystem<\/strong>, copy the&nbsp;<strong>ExampleCommand<\/strong>&nbsp;and paste it into the <em>commands <\/em>folder. <\/li><li>Change the name of the copy to&nbsp;<strong>DriveForTimeCommand.java.<\/strong><\/li><li>&nbsp;In that file, search and replace all instances of&nbsp;<strong>ExampleCommand<\/strong>&nbsp;with&nbsp;<strong>DriveForTimeCommand<\/strong>. <\/li><li><strong><em>Also<\/em><\/strong>, since this command will be using the&nbsp;<strong>DriveSubsystem<\/strong>, replace all instances of&nbsp;<strong>ExampleSubsystem<\/strong>&nbsp;with&nbsp;<strong>DriveSubsystem<\/strong>. <\/li><li>Change the comment describing the purpose of this command (i.e. \u201cAn example command that uses an example subsystem\u201d) to one that describes this command. <\/li><\/ul>\n\n\n\n<p>After you have done that you&nbsp;<strong>DriveForTimeCommand.java<\/strong>&nbsp;file should look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot.commands;\n\nimport edu.wpi.first.wpilibj2.command.Command;\nimport frc.robot.subsystems.DriveSubsystem;\nimport robotCore.Logger;\n\n\/**\n * Command to drive the robot for a fixed amount of time.\n *\/\npublic class DriveForTimeCommand extends Command {\n  private final DriveSubsystem m_subsystem;\n\n  \/**\n   * Creates a new DriveForTiimeCommand.\n   *\n   * @param subsystem The subsystem used by this command.\n   *\/\n  public DriveForTimeCommand(DriveSubsystem subsystem) {\n    Logger.log(\"DriveForTiimeCommand\", 3, \"DriveForTiimeCommand()\");\n\n    m_subsystem = subsystem;\n    \/\/ Use addRequirements() here to declare subsystem dependencies.\n    addRequirements(m_subsystem);\n  }\n\n  \/\/ Called when the command is initially scheduled.\n  @Override\n  public void initialize() {\n    Logger.log(\"DriveForTiimeCommand\", 2, \"initialize()\");\n  }\n\n  \/\/ Called every time the scheduler runs while the command is scheduled.\n  @Override\n  public void execute() {\n    Logger.log(\"DriveForTiimeCommand\", -1, \"execute()\");\n  }\n\n  \/\/ Called once the command ends or is interrupted.\n  @Override\n  public void end(boolean interrupted) {\n    Logger.log(\"DriveForTiimeCommand\", 2, String.format(\"end(%b)\", interrupted));\n  }\n\n  \/\/ Returns true when the command should end.\n  @Override\n  public boolean isFinished() {\n    Logger.log(\"DriveForTiimeCommand\", -1, \"isFinished()\");\n    return false;\n  }\n}<\/code><\/pre>\n\n\n\n<p>Let\u2019s take a look at the constructor:<\/p>\n\n\n\n<p><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public DriveForTimeCommand(DriveSubsystem subsystem) {\n    Logger.log(\"DriveForTimeCommand\", 3, \"DriveForTimeCommand()\");\n\n    m_subsystem = subsystem;\n    \/\/ Use addRequirements() here to declare subsystem dependencies.\n    addRequirements(m_subsystem);\n  }<\/code><\/pre>\n\n\n\n<p>The first thing to do is save a copy of the incoming parameter &#8220;subsystem&#8221; (a <strong>DriveSubsystem<\/strong> object) to a member variable, &#8220;m_subsystem&#8221;.&nbsp; This let&#8217;s us access it later. <\/p>\n\n\n\n<p>Second, it is here that we will specify which&nbsp;<strong>Subsystems<\/strong>&nbsp;this command will require. We do this by calling the&nbsp;<strong>addRequirements(\u2026)<\/strong>&nbsp;passing in the&nbsp;<strong>DriveSubsystem<\/strong>&nbsp;instance we&nbsp;just saved. It is important we do this because this is how the command system keeps track of which commands need which subsystems and makes sure that only one command at a time has access to a particular subsystem.&nbsp;If we get this wrong, we might end up with mysterious problems where two commands are fighting for control of the same motor.<\/p>\n\n\n\n<p>The next function&nbsp;<strong>initialize()<\/strong>&nbsp;is called whenever this command starts. In our case, when the command runs we want to start the robot moving forward. Also we are going to want to have a timer to control how long the robot will drive and we will need to reset that timer when the command starts.<\/p>\n\n\n\n<p>We need to:<\/p>\n\n\n\n<ul><li>Create a Timer object, m_timer<\/li><li>Import the Timer class (we could do this first, but VS helps us import it if we create it first).<\/li><li>Add timer commands to <em>initialize()<\/em>.<\/li><\/ul>\n\n\n\n<p>First, declare and initialize the variable&nbsp;<strong>m_timer<\/strong>&nbsp;at the top of our class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private Timer m_timer = new Timer();<\/code><\/pre>\n\n\n\n<p>Java doesn&#8217;t know where to get the <strong>Timer<\/strong>&nbsp;class, so you need to import it. Click on&nbsp;<strong>Timer<\/strong>&nbsp;and press&nbsp;<strong>CTRL + .<\/strong>, you will see multiple possible choices. We want to choose the version from <strong>edu.wpi.first.wpilibj<\/strong>:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/08\/Timer-1024x664.jpg\" alt=\"\" class=\"wp-image-3086\" width=\"582\" height=\"377\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Timer-1024x664.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Timer-300x195.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Timer-150x97.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Timer-768x498.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Timer.jpg 1241w\" sizes=\"(max-width: 582px) 100vw, 582px\" \/><\/figure><\/div>\n\n\n\n<p>Finally, add the timer commands to <em>initialize()<\/em>.  The commands are <em>reset()<\/em> to set the timer back to zero, and <em>start()<\/em> to start it for this run.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \/\/ Called when the command is initially scheduled.\n  @Override\n  public void initialize() {\n    Logger.log(\"DriveForTimeCommand\", 2, \"initialize()\");\n\n    m_subsystem.setPower(0.75, 0.75);\n    \/\/Set timer to zero\n    m_timer.reset();\n    \/\/Start the timer\n    m_timer.start();\n  }\n<\/code><\/pre>\n\n\n\n<p>The next function in our class,&nbsp;<strong>execute()<\/strong>, is called repeatedly as long as this command is running. Since we are simply going to continue driving until the timer expires, we don\u2019t need to do anything special here.<\/p>\n\n\n\n<p>Next there is the&nbsp;<strong>end()<\/strong>&nbsp;function&nbsp;which is&nbsp;called when a command ends. When this happens&nbsp;we want to turn the motors off:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \/\/ Called once the command ends or is interrupted.\n  @Override\n  public void end(boolean interrupted) {\n    Logger.log(\"DriveForTimeCommand\", 2, String.format(\"end(%b)\", interrupted));\n\n    \/\/Set motor powers to zero.  Stop them!\n    m_subsystem.setPower(0, 0);\n\n  }\n<\/code><\/pre>\n\n\n\n<p>Finally there is&nbsp;the&nbsp;<strong>isFinished()<\/strong>&nbsp;function. This function is also called repeatedly as long as the command is running, and should return&nbsp;<strong>false&nbsp;<\/strong>if it wants the command to continue, and&nbsp;<strong>true&nbsp;<\/strong>if it wants it to end. In our case, we want the command to end when the timer exceeds (or equals) 2 seconds:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \/\/ Returns true when the command should end.\n  @Override\n  public boolean isFinished() {\n    Logger.log(\"DriveForTimeCommand\", -1, \"isFinished()\");\n    \n    return(m_timer.get() >= 2);\n  }<\/code><\/pre>\n\n\n\n<p>Your <strong>DriveForTimeCommand<\/strong>.java file should now look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot.commands;\n\nimport edu.wpi.first.wpilibj.Timer;\nimport edu.wpi.first.wpilibj2.command.Command;\nimport frc.robot.subsystems.DriveSubsystem;\nimport robotCore.Logger;\n\n\/**\n * An example command that uses an example subsystem.\n *\/\npublic class DriveForTimeCommand extends Command {\n  private final DriveSubsystem m_subsystem;\n  private Timer m_timer = new Timer();\n\n  \/**\n   * Creates a new DriveForTimeCommand.\n   *\n   * @param subsystem The subsystem used by this command.\n   *\/\n  public DriveForTimeCommand(DriveSubsystem subsystem) {\n    Logger.log(\"DriveForTimeCommand\", 3, \"DriveForTimeCommand()\");\n\n    m_subsystem = subsystem;\n    \/\/ Use addRequirements() here to declare subsystem dependencies.\n    addRequirements(m_subsystem);\n  }\n\n  \/\/ Called when the command is initially scheduled.\n  @Override\n  public void initialize() {\n    Logger.log(\"DriveForTimeCommand\", 2, \"initialize()\");\n\n    \/\/Set starting power\n    m_subsystem.setPower(0.75, 0.75);\n    \/\/Set timer to zero\n    m_timer.reset();\n    \/\/Start the timer\n    m_timer.start();\n  }\n\n  \/\/ Called every time the scheduler runs while the command is scheduled.\n  @Override\n  public void execute() {\n    Logger.log(\"DriveForTimeCommand\", -1, \"execute()\");\n  }\n\n  \/\/ Called once the command ends or is interrupted.\n  @Override\n  public void end(boolean interrupted) {\n    Logger.log(\"DriveForTimeCommand\", 2, String.format(\"end(%b)\", interrupted));\n\n    \/\/Set motor powers to zero.  Stop them!\n    m_subsystem.setPower(0, 0);\n\n  }\n\n  \/\/ Returns true when the command should end.\n  @Override\n  public boolean isFinished() {\n    Logger.log(\"DriveForTimeCommand\", -1, \"isFinished()\");\n    \n    return(m_timer.get() &gt;= 2);\n  }\n}\n<\/code><\/pre>\n\n\n\n<p>Now we need to provide some way to run this command and we will do this by tying this command to&nbsp;a button on the joystick (or for now, an emulated joystick). The place to do this is in the&nbsp;<strong>RobotContainer<\/strong>&nbsp;class that we mentioned previously. Be sure to save your&nbsp;<strong>DriveForTimeCommand.java<\/strong>&nbsp;file and then open the&nbsp;<strong>RobotContainer.java<\/strong>&nbsp;file by clicking on it in the left pane.<\/p>\n\n\n\n<p>Since we will be using the joystick, we need to&nbsp;create an instance of the&nbsp;<strong>Joystick<\/strong>&nbsp;class. We are also going to need an instance of the&nbsp;<strong>DriveSubsystem<\/strong>&nbsp;so we declare that here as well. We do this by adding the following to the&nbsp;<strong>RobotContainer<\/strong>&nbsp;class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class RobotContainer {\n  \/\/ The robot's subsystems and commands are defined here...\n  @SuppressWarnings(\"unused\")\n  private final ExampleSubsystem m_exampleSubsystem = new ExampleSubsystem();\n  private final DriveSubsystem m_driveSubsystem = new DriveSubsystem(); \n  private final CommandJoystick m_joystick = new CommandJoystick(0);<\/code><\/pre>\n\n\n\n<p>The declaration of&nbsp;<strong>m_driveSubsystem<\/strong>&nbsp;creates an instance of our&nbsp;<strong>DriveSubsystem<\/strong>&nbsp;class.<\/p>\n\n\n\n<p>The declaration of&nbsp;<strong>m_joystick<\/strong>&nbsp;creates an instance&nbsp;<strong>CommandJoystick&nbsp;<\/strong>number&nbsp;<strong>0<\/strong>. Our implementation of the&nbsp;<strong><strong>CommandJoystick&nbsp;<\/strong><\/strong>class really only supports a single joystick, but the&nbsp;joystick number is included in the constructor to be consistent with the FRC library which supports multiple joysticks.<\/p>\n\n\n\n<p>Note that we need to import the packages for these new objects. Do this just like we did earlier: Hover over the class name, then select <em>Quick Fix<\/em>.  Do this for both DriveSubsystem and CommandJoystick.  The latter looks like this:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"834\" height=\"267\" src=\"\/wp-content\/uploads\/2024\/08\/image-2.png\" alt=\"\" class=\"wp-image-3090\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/image-2.png 834w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/image-2-300x96.png 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/image-2-150x48.png 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/image-2-768x246.png 768w\" sizes=\"(max-width: 834px) 100vw, 834px\" \/><\/figure>\n\n\n\n<p>&#8230;and the import lines&#8230;<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"615\" height=\"163\" src=\"\/wp-content\/uploads\/2024\/08\/image-3.png\" alt=\"\" class=\"wp-image-3091\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/image-3.png 615w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/image-3-300x80.png 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/image-3-150x40.png 150w\" sizes=\"(max-width: 615px) 100vw, 615px\" \/><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<p>Now we need to connect a button to our&nbsp;<strong>DriveForTimeCommand<\/strong>. We will do this in the&nbsp;<strong>configureButtonBindings()<\/strong>&nbsp;function of the&nbsp;<strong>RobotContainer<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private void configureButtonBindings() {\n    m_joystick.button(1).onTrue(new DriveForTimeCommand(m_driveSubsystem));\n  }<\/code><\/pre>\n\n\n\n<p>Here we create a instance of our&nbsp;<strong>DriveForTimeCommand<\/strong>, passing in our instance of the&nbsp;<strong>DriveSubsystem<\/strong>, and tell the&nbsp;<strong>CommandJoystick <\/strong>button(1)&nbsp;object to call that instance when the button is pressed. Make sure to get the <em>import<\/em> line for it. <\/p>\n\n\n\n<p>This is an example of <strong>event-driven programming<\/strong>. We\u2019re not checking the state of the button and then doing something; instead we\u2019re defining something that should happen whenever the button is pressed.<\/p>\n\n\n\n<p>Your RobotContainer.java file should now look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot;\n\nimport edu.wpi.first.wpilibj2.command.Command;\nimport edu.wpi.first.wpilibj2.command.button.CommandJoystick;\nimport frc.robot.commands.DriveForTimeCommand;\nimport frc.robot.commands.ExampleCommand;\nimport frc.robot.subsystems.DriveSubsystem;\nimport frc.robot.subsystems.ExampleSubsystem;\n\n\/**\n * This class is where the bulk of the robot should be declared. Since\n * Command-based is a \"declarative\" paradigm, very little robot logic should\n * actually be handled in the {@link Robot} periodic methods (other than the\n * scheduler calls). Instead, the structure of the robot (including subsystems,\n * commands, and button mappings) should be declared here.\n *\/\npublic class RobotContainer {\n  \/\/ The robot's subsystems and commands are defined here...\n  @SuppressWarnings(\"unused\")\n  private final ExampleSubsystem m_exampleSubsystem = new ExampleSubsystem();\n  private final DriveSubsystem m_driveSubsystem = new DriveSubsystem();\n  private final CommandJoystick m_joystick = new CommandJoystick(0);\n\n\n  private final ExampleCommand m_autoCommand = null; \/\/ new ExampleCommand(m_exampleSubsystem);\n\n  \/**\n   * The container for the robot. Contains subsystems, OI devices, and commands.\n   *\/\n  public RobotContainer() {\n    \/\/ Configure the button bindings\n    configureButtonBindings();\n  }\n\n  \/**\n   * Use this method to define your button-&gt;command mappings. Buttons can be\n   * created by instantiating a {@link GenericHID} or one of its subclasses\n   * ({@link edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then\n   * passing it to a {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.\n   *\/\n  private void configureButtonBindings() {\n    m_joystick.button(1).onTrue(new DriveForTimeCommand(m_driveSubsystem));\n  }\n\n  \/**\n   * Use this to pass the autonomous command to the main {@link Robot} class.\n   *\n   * @return the command to run in autonomous\n   *\/\n  public Command getAutonomousCommand() {\n    \/\/ An ExampleCommand will run in autonomous\n    return m_autoCommand;\n  }\n}\n<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<p>Now run your program (remember that if your program is already running, you need to&nbsp;<strong>stop<\/strong>&nbsp;it using the red&nbsp;<strong>stop<\/strong>&nbsp;button&nbsp;&nbsp;<img loading=\"lazy\" width=\"20\" height=\"20\" src=\"\/wp-content\/uploads\/2021\/04\/Stop.jpg\" alt=\"\">) and connect and enable your robot from the&nbsp;<strong>Driver Station<\/strong>. Since you don\u2019t have an actual joystick attached to your computer, click the Enable Virtual Joystick checkbox which will allow you to use a simulated joystick.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/04\/DriverStationJoystick.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/04\/DriverStationJoystick-1024x405.jpg\" alt=\"\" class=\"wp-image-134\" width=\"616\" height=\"243\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/DriverStationJoystick-1024x405.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/DriverStationJoystick-300x119.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/DriverStationJoystick-768x304.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/DriverStationJoystick.jpg 1246w\" sizes=\"(max-width: 616px) 100vw, 616px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>With your robot enabled, click the <strong>B1<\/strong> button and your robot should drive forward for 2 seconds (make sure you put your robot on the floor!)<\/p>\n\n\n\n<p>Before we move on, let\u2019s try and make this command more useful. Right now it is always driving the robot at 75% power, and always for 2 seconds. We would like to change this command so that we can control both the time and the speed.<\/p>\n\n\n\n<p>The place to set these values is when we call the <strong>DriveForTimeCommand <\/strong>constructor. We add two parameters,&nbsp;<strong>power<\/strong>&nbsp;and&nbsp;<strong>time<\/strong>&nbsp;to the constructor and add two member variables&nbsp;<strong>m_power<\/strong>&nbsp;and&nbsp;<strong>m_time<\/strong>&nbsp;to store these values:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class DriveForTimeCommand extends Command {\n  private final DriveSubsystem m_subsystem;\n  private Timer m_timer = new Timer();\n  private double m_power; \/\/motor power percent.  0.0 to 1.0\n  private double m_time;  \/\/motor run time (both motors), seconds\n\n  \/**\n   * Creates a new DriveForTimeCommand.\n   *\n   * @param subsystem The subsystem used by this command.\n   *\/\n  public DriveForTimeCommand(DriveSubsystem subsystem, double power, double time) {\n    Logger.log(\"DriveForTimeCommand\", 3, \"DriveForTimeCommand()\");\n\n    m_subsystem = subsystem;\n\n    \/\/Save the parameter variables for motor power and run time\n    m_power = power;\n    m_time  = time;\n\n    \/\/ Use addRequirements() here to declare subsystem dependencies.\n    addRequirements(m_subsystem);\n  }<\/code><\/pre>\n\n\n\n<p>(Note that good programming practice avoids putting constants in your code.  So creating variables for these, with meaningful variable names and comments, makes for better code.)<\/p>\n\n\n\n<p>Now in our&nbsp;<strong>initialize()<\/strong>&nbsp;function we need to run the robot at the specified&nbsp;<strong>m_power<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public void initialize() {\n    Logger.log(\"DriveForTimeCommand\", 2, \"initialize()\");\n\n    m_subsystem.setPower(m_power, m_power);\n    \/\/Set timer to zero\n    m_timer.reset();\n    \/\/Start the timer\n    m_timer.start();\n  }<\/code><\/pre>\n\n\n\n<p>Finally, we need to change our&nbsp;<strong>isFinished()<\/strong>&nbsp;function to use the specified&nbsp;<strong>m_time:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public boolean isFinished() {\n    Logger.log(\"DriveForTimeCommand\", -1, \"isFinished()\");\n\n    return(m_timer.get() &gt;= m_time);\n  }<\/code><\/pre>\n\n\n\n<p>Your DriveForTimeCommand.java file should now look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot.commands;\n\nimport edu.wpi.first.wpilibj.Timer;\nimport edu.wpi.first.wpilibj2.command.Command;\nimport frc.robot.subsystems.DriveSubsystem;\nimport robotCore.Logger;\n\n\/**\n * An example command that uses an example subsystem.\n *\/\npublic class DriveForTimeCommand extends Command {\n  private final DriveSubsystem m_subsystem;\n  private Timer m_timer = new Timer();\n  private double m_power; \/\/motor power percent.  0.0 to 1.0\n  private double m_time;  \/\/motor run time (both motors), seconds\n\n  \/**\n   * Creates a new DriveForTimeCommand.\n   *\n   * @param subsystem The subsystem used by this command.\n   *\/\n  public DriveForTimeCommand(DriveSubsystem subsystem, double power, double time) {\n    Logger.log(\"DriveForTimeCommand\", 3, \"DriveForTimeCommand()\");\n\n    m_subsystem = subsystem;\n\n    \/\/Save the parameter variables for motor power and run time\n    m_power = power;\n    m_time  = time;\n\n    \/\/ Use addRequirements() here to declare subsystem dependencies.\n    addRequirements(m_subsystem);\n  }\n\n  \/\/ Called when the command is initially scheduled.\n  @Override\n  public void initialize() {\n    Logger.log(\"DriveForTimeCommand\", 2, \"initialize()\");\n\n    \/\/Set starting power\n    m_subsystem.setPower(m_power, m_power);\n    \/\/Set timer to zero\n    m_timer.reset();\n    \/\/Start the timer\n    m_timer.start();\n  }\n\n  \/\/ Called every time the scheduler runs while the command is scheduled.\n  @Override\n  public void execute() {\n    Logger.log(\"DriveForTimeCommand\", -1, \"execute()\");\n  }\n\n  \/\/ Called once the command ends or is interrupted.\n  @Override\n  public void end(boolean interrupted) {\n    Logger.log(\"DriveForTimeCommand\", 2, String.format(\"end(%b)\", interrupted));\n\n    \/\/Set motor powers to zero.  Stop them!\n    m_subsystem.setPower(0, 0);\n\n  }\n\n  \/\/ Returns true when the command should end.\n  @Override\n  public boolean isFinished() {\n    Logger.log(\"DriveForTimeCommand\", -1, \"isFinished()\");\n\n    return(m_timer.get() &gt;= m_time);\n  }\n}\n<\/code><\/pre>\n\n\n\n<p>You will no notice that your&nbsp;<strong>RobotContainer&nbsp;<\/strong>class now has an error on the line where we create an instance of&nbsp;<strong>DriveForTimeCommand<\/strong>. Hovering over the error marker it tells us:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>The constructor DriveForTimeCommand(DriveSubsystem) is undefined<\/code><\/pre>\n\n\n\n<p>The reason it is telling us this is that there is no longer a constructor for this class that takes only one argument (remember that we changed the constructor). So what we must do is provide the proper arguments for the updated constructor. Lets have our robot drive forward at&nbsp;<strong>0.50<\/strong>&nbsp;power for&nbsp;<strong>3<\/strong>&nbsp;seconds:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private void configureButtonBindings() {\r\n    m_joystick.button(1).onTrue(new DriveForTimeCommand(m_driveSubsystem, 0.50, 3.0));\r\n  }<\/code><\/pre>\n\n\n\n<p>Now deploy and run your program.  Verify the robot now drives at half power for three seconds.<\/p>\n\n\n\n<p>You might notice that your robot is not driving quite straight but don\u2019t worry, we will address this issue later.<\/p>\n\n\n\n<p><a href=\"\/arcade-drive\/\" data-type=\"page\">Next: Arcade Drive<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Now that we have a&nbsp;DriveSubsystem&nbsp;to control the motors we are going to want to do something with it. In this programming model we use&nbsp;commands&nbsp;to control actions. In this chapter we are going to create a&nbsp;command&nbsp;which will&nbsp;cause the robot to drive forward for a specific amount of time. You can think of commands as being a&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/commands\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Commands<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/123"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=123"}],"version-history":[{"count":45,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/123\/revisions"}],"predecessor-version":[{"id":3296,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/123\/revisions\/3296"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=123"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}