{"id":291,"date":"2021-04-07T00:58:07","date_gmt":"2021-04-07T00:58:07","guid":{"rendered":"http:\/\/gabybot.com\/?page_id=291"},"modified":"2024-09-02T19:03:45","modified_gmt":"2024-09-02T19:03:45","slug":"feeder-subsystem","status":"publish","type":"page","link":"http:\/\/gabybot.com\/feeder-subsystem\/","title":{"rendered":"Feeder Subsystem"},"content":{"rendered":"\n<p>The Feeder serializes the balls and feeds them one at a time into the shooter. It is a simple mechanism which consists of a rotating spindle with slots. The balls fall into the slots and are then pushed into the shooter. So it seems that all that is required is to simply rotate the spindle as long as we wish to continue shooting. Unfortunately, as with many things, it is not quite a simple as that. The feeding mechanism will occasionally jam and to clear the jam we need to detect that and reverse the feeder motor for a short time to clear it.<\/p>\n\n\n\n<p>The <strong>Feeder Subsystem<\/strong> will need to control a single motor much like the <strong>shooter subsystem<\/strong>. We will need to use the <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_p_w_m_motor.html#a51a53e0822eaa072286239e99cc2159e\" target=\"_blank\">constructor<\/a><\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>robotCore.PWMMotor.PWMMotor(\t\n    int pwmPin,\n    int dirPin \n  )<\/code><\/pre>\n\n\n\n<p>With pins:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\tprivate static final int k_PWMPin\t= Device.M2_1_PWM;\n\tprivate static final int k_DirPin\t= Device.M2_1_DIR;<\/code><\/pre>\n\n\n\n<p>We will <strong>not<\/strong> need precise control over the speed of this motor so we will not calibrate a speed and will control the motor with power only. However, we are going to need to know if the balls jam and the motor stalls. We will use the motor\u2019s encoder for this purpose so we create an instance of <a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_encoder.html\" target=\"_blank\"><strong>Encoder<\/strong><\/a> using this constructor:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>robotCore.Encoder.Encoder(\t\n    EncoderType type,\n    int pin1,\n    int pin2 \n  )<\/code><\/pre>\n\n\n\n<p>With pins:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\tprivate static final int k_encPin1\t= Device.Q4_INT;\n\tprivate static final int k_encPin2  = -1;<\/code><\/pre>\n\n\n\n<p>Once again, we don&#8217;t need to know the direction, only when the motor stalls.<\/p>\n\n\n\n<p>Finally we need to create a public <strong>setPower<\/strong> function which we will use to control the speed and direction of the motor.<\/p>\n\n\n\n<p>Now create a <strong>Feeder Command<\/strong> to feed the balls and tie to to a button. While you hold the button, you want to rotate the spindle in a clockwise direction to feed the balls. While you are doing this you need to monitor the speed of the spindle and if it drops below a certain value for a short period of time, you need to reverse the direction of the spindle for a short period and then resume in a clockwise direction. You should probably allow for a different forward speed than a backward speed with the forward speed being faster.<\/p>\n\n\n\n<p>There are a number of ways you can accomplish this but here is some \u2018pseudo\u2019 code which illustrates one way to achieve this.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  if (Spindle is moving forward)\n  {\n    if (The speed is greater than the minimum speed) {\n      Reset the timer\n    }\n    else if (The timer is greater than the stall time) {\n      Set the spindle to move backwards\n      Reset the timer\n    }\n  }\n  else {\n    if (The timer is greater than the reverse time) {\n      Set the spindle to move forward\n      Reset the timer;\n    }\n  }<\/code><\/pre>\n\n\n\n<p>Here we are using a <strong><a href=\"\/RobotCoreDoc\/classrobot_core_1_1_timer.html\" target=\"_blank\" rel=\"noreferrer noopener\">Timer<\/a> <\/strong>to test both whether the spindle has stalled and to time the reversal. Remember that this timer should also be reset in the <strong>initialize()<\/strong> function of the command.<\/p>\n\n\n\n<p>You can test that the reversal is working properly by using your hand to stop the rotor. It should reverse momentarily and then resume.<\/p>\n\n\n\n<p>Once you have this command working, you should be able to shoot balls. Note that you should <strong>not<\/strong> run the feeder unless the shooter is running as the balls will jam. Adding a way to prevent the feeder from running when the shooter is not would be a nice optional touch.<\/p>\n\n\n\n<p>Before we move on, you are probably going to want to have a way to shoot a specific number of balls when you work on the final challenge. There are a couple of ways you can do this. One would be to run the feeder for a fixed amount of time, or alternately, for a fixed number of degrees using the encoder.<\/p>\n\n\n\n<p>The best way, however, would be to actually count the balls as they are shot. The robot is equipped with a <strong>Beam Break Sensor<\/strong> that the balls pass through which can be used to count the balls. To use this sensor you should use the <strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_digital_counter.html\" target=\"_blank\">DigitalCounter<\/a> <\/strong>class. Note that the sensor is connected to pin <strong>Device.IO_2<\/strong>. You should only create one instance of the <strong>DigitalCounter <\/strong>in your <strong>RobotContainer <\/strong>and pass this instance into whatever commands that need it.<\/p>\n\n\n\n<p> Also note that the counter counts the number of transitions. Since the ball will generate two transitions (one when it blocks the sensor and a second when it clears it), the count you get will be twice the number of balls shot.<\/p>\n\n\n\n<p><a href=\"\/turret-subsystem\/\" data-type=\"page\" data-id=\"298\">Next: Turret Subsystem<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>The Feeder serializes the balls and feeds them one at a time into the shooter. It is a simple mechanism which consists of a rotating spindle with slots. The balls fall into the slots and are then pushed into the shooter. So it seems that all that is required is to simply rotate the spindle&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/feeder-subsystem\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Feeder Subsystem<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/291"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=291"}],"version-history":[{"count":15,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/291\/revisions"}],"predecessor-version":[{"id":3134,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/291\/revisions\/3134"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=291"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}