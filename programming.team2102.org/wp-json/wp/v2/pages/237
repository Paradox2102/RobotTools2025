{"id":237,"date":"2021-04-06T21:12:07","date_gmt":"2021-04-06T21:12:07","guid":{"rendered":"http:\/\/gabybot.com\/?page_id=237"},"modified":"2024-09-04T22:37:17","modified_gmt":"2024-09-04T22:37:17","slug":"using-sensors","status":"publish","type":"page","link":"http:\/\/gabybot.com\/using-sensors\/","title":{"rendered":"Using Sensors"},"content":{"rendered":"\n<p>While these little robots don\u2019t have gyros or cameras, they do have a infrared sensor that we are going to use to detect black lines. Our first command will be one that will simply drive the robot forward until it sees the black line and then stops. Let\u2019s call this new command&nbsp;<strong>DriveToLineCommand<\/strong>. Go ahead and set up the framework for this new command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot.commands;\n\nimport edu.wpi.first.wpilibj2.command.Command;\nimport frc.robot.subsystems.DriveSubsystem;\nimport robotCore.Logger;\n\n\/**\n * An example command that uses an example subsystem.\n *\/\npublic class DriveToLineCommand extends Command {\n  private final DriveSubsystem m_subsystem;\n\n  \/**\n   * Creates a new DriveToLineCommand.\n   *\n   * @param subsystem The subsystem used by this command.\n   *\/\n  public DriveToLineCommand(DriveSubsystem subsystem) {\n    Logger.log(\"DriveToLineCommand\", 3, \"DriveToLineCommand()\");\n\n    m_subsystem = subsystem;\n    \/\/ Use addRequirements() here to declare subsystem dependencies.\n    addRequirements(m_subsystem);\n  }\n\n  \/\/ Called when the command is initially scheduled.\n  @Override\n  public void initialize() {\n    Logger.log(\"DriveToLineCommand\", 2, \"initialize()\");\n  }\n\n  \/\/ Called every time the scheduler runs while the command is scheduled.\n  @Override\n  public void execute() {\n    Logger.log(\"DriveToLineCommand\", -1, \"execute()\");\n  }\n\n  \/\/ Called once the command ends or is interrupted.\n  @Override\n  public void end(boolean interrupted) {\n    Logger.log(\"DriveToLineCommand\", 2, String.format(\"end(%b)\", interrupted));\n  }\n\n  \/\/ Returns true when the command should end.\n  @Override\n  public boolean isFinished() {\n    Logger.log(\"DriveToLineCommand\", -1, \"isFinished()\");\n    return false;\n  }\n}<\/code><\/pre>\n\n\n\n<p>The light sensors are connected to the <strong>Microcontroller <\/strong>via one of its digital input pins. Reading the state of that pin will tell us if the sensor is seeing the line or not. The class that reads the digital input pins is called&nbsp;<a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_digital_input.html\" target=\"_blank\"><strong>DigitalInput<\/strong><\/a> so we will need a variable of this type. <\/p>\n\n\n\n<p>In general, we should not create multiple instances of the same device and since we will be using this sensor in more than one command, we should create the instance in our <strong>RobotContainer <\/strong>class. Looking at it&#8217;s constructor, we see that the constructor for&nbsp;<a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_digital_input.html\" target=\"_blank\"><strong>DigitalInput<\/strong><\/a> takes the number of the pin to be read. The IR sensor is connected to pin&nbsp;<strong>Device.IO_4<\/strong>, so add the following to your <strong>RobotContainer<\/strong>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private final DigitalInput m_irSensor = new DigitalInput(Device.IO_4);<\/code><\/pre>\n\n\n\n<p>Now your <strong>DriveToLineCommand <\/strong>is going to need access to this sensor, so we will pass it in as a parameter to <strong>DriveToLineCommand&#8217;s<\/strong> constructor:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class DriveToLineCommand extends Command {\n  private final DriveSubsystem m_subsystem;\n  private final DigitalInput m_irSensor;\n\n  \/**\n   * Creates a new DriveToLineCommand.\n   *\n   * @param subsystem The subsystem used by this command.\n   *\/\n  public DriveToLineCommand(DriveSubsystem subsystem, DigitalInput irSensor) {\n    Logger.log(\"DriveToLineCommand\", 3, \"DriveToLineCommand()\");\n\n    m_subsystem = subsystem;\n    m_irSensor = irSensor;\n    \/\/ Use addRequirements() here to declare subsystem dependencies.\n    addRequirements(m_subsystem);\n  }<\/code><\/pre>\n\n\n\n<p>In the&nbsp;<strong>initialize()<\/strong>&nbsp;function we need to start our robot driving forward:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public void initialize() {\n    Logger.log(\"DriveToLineCommand\", 2, \"initialize()\");\n\n    m_subsystem.setSpeed(k_speed, k_speed);\n  }<\/code><\/pre>\n\n\n\n<p>while defining&nbsp;<strong>k_speed<\/strong>&nbsp;as:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private static final double k_speed = 0.5;<\/code><\/pre>\n\n\n\n<p>which will make the robot drive forward at half speed.<\/p>\n\n\n\n<p>Next we need to return&nbsp;<strong>true<\/strong>&nbsp;from the&nbsp;<strong>isFinished()<\/strong>&nbsp;function when the sensor \u2018sees\u2019 the line. To check this we call the&nbsp;<strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_digital_input.html#ad073c2fd160feef0ce16aab1b2ce5180\" target=\"_blank\">get()<\/a><\/strong>&nbsp;function of our&nbsp;<a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_digital_input.html\" target=\"_blank\"><strong>DigitalInput<\/strong>&nbsp;<\/a>class. If the light sensor &#8216;sees&#8217; bright (i.e. no black line), then&nbsp;<strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_digital_input.html#ad073c2fd160feef0ce16aab1b2ce5180\" target=\"_blank\">get()<\/a><\/strong>&nbsp;will return&nbsp;<strong>false<\/strong>. If the sensor \u2018sees\u2019 dark (i.e. black line is present), then&nbsp;<strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_digital_input.html#ad073c2fd160feef0ce16aab1b2ce5180\" target=\"_blank\">get()<\/a><\/strong>&nbsp;will return&nbsp;<strong>true<\/strong>. Hence we need to declare our&nbsp;<strong>isFinished()<\/strong>&nbsp;as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code> public boolean isFinished() {\n    Logger.log(\"DriveToLineCommand\", -1, \"isFinished()\");\n\n    return (m_irSensor.get());\n  }<\/code><\/pre>\n\n\n\n<p>Finally, we need to turn off the motors in the&nbsp;<strong>end()<\/strong>&nbsp;functions:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public void end(boolean interrupted) {\n    Logger.log(\"DriveToLineCommand\", 2, String.format(\"end(%b)\", interrupted));\n\n    m_subsystem.setPower(0, 0);\n  }<\/code><\/pre>\n\n\n\n<p>Your&nbsp;<strong>DriveToLineCommand.java<\/strong>&nbsp;file should now look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot.commands;\n\nimport edu.wpi.first.wpilibj2.command.Command;\nimport frc.robot.subsystems.DriveSubsystem;\nimport robotCore.DigitalInput;\nimport robotCore.Logger;\n\n\/**\n * An example command that uses an example subsystem.\n *\/\npublic class DriveToLineCommand extends Command {\n  private final DriveSubsystem m_subsystem;\n  private final DigitalInput m_irSensor;\n  private static final double k_speed = 0.5;\n\n  \/**\n   * Creates a new DriveToLineCommand.\n   *\n   * @param subsystem The subsystem used by this command.\n   *\/\n  public DriveToLineCommand(DriveSubsystem subsystem, DigitalInput irSensor) {\n    Logger.log(\"DriveToLineCommand\", 3, \"DriveToLineCommand()\");\n\n    m_subsystem = subsystem;\n    m_irSensor = irSensor;\n    \/\/ Use addRequirements() here to declare subsystem dependencies.\n    addRequirements(m_subsystem);\n  }\n\n  \/\/ Called when the command is initially scheduled.\n  @Override\n  public void initialize() {\n    Logger.log(\"DriveToLineCommand\", 2, \"initialize()\");\n\n    m_subsystem.setSpeed(k_speed, k_speed);\n  }\n\n  \/\/ Called every time the scheduler runs while the command is scheduled.\n  @Override\n  public void execute() {\n    Logger.log(\"DriveToLineCommand\", -1, \"execute()\");\n  }\n\n  \/\/ Called once the command ends or is interrupted.\n  @Override\n  public void end(boolean interrupted) {\n    Logger.log(\"DriveToLineCommand\", 2, String.format(\"end(%b)\", interrupted));\n\n    m_subsystem.setPower(0, 0);\n  }\n\n  \/\/ Returns true when the command should end.\n  @Override\n  public boolean isFinished() {\n    Logger.log(\"DriveToLineCommand\", -1, \"isFinished()\");\n\n    return (m_irSensor.get());\n  }\n}<\/code><\/pre>\n\n\n\n<p>Finally connect&nbsp;this command to button&nbsp;<strong>7<\/strong>&nbsp;on the joystick:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot;\n\nimport edu.wpi.first.wpilibj.XboxController;\nimport edu.wpi.first.wpilibj2.command.Command;\nimport edu.wpi.first.wpilibj2.command.button.CommandJoystick;\nimport frc.robot.commands.DriveForTimeCommand;\nimport frc.robot.commands.DriveToLineCommand;\nimport frc.robot.commands.TestMotorSpeedCommand;\nimport frc.robot.commands.TurnCommand;\nimport frc.robot.commands.ArcadeDriveCommand;\nimport frc.robot.commands.CalibrateSpeedCommand;\nimport frc.robot.commands.DriveCourseCommand;\nimport frc.robot.commands.DriveForDistanceCommand;\nimport frc.robot.subsystems.DriveSubsystem;\nimport frc.robot.subsystems.ExampleSubsystem;\nimport robotCore.Device;\nimport robotCore.DigitalInput;\n\n\/**\n * This class is where the bulk of the robot should be declared. Since\n * Command-based is a \"declarative\" paradigm, very little robot logic should\n * actually be handled in the {@link Robot} periodic methods (other than the\n * scheduler calls). Instead, the structure of the robot (including subsystems,\n * commands, and button mappings) should be declared here.\n *\/\npublic class RobotContainer {\n  \/\/ The robot's subsystems and commands are defined here...\n  @SuppressWarnings(\"unused\")\n  private final ExampleSubsystem m_exampleSubsystem = new ExampleSubsystem();\n  private final DriveSubsystem m_driveSubsystem = new DriveSubsystem();\n  private final CommandJoystick m_joystick = new CommandJoystick(0);\n  private final DigitalInput m_irSensor = new DigitalInput(Device.IO_4);\n\n\n  private final ArcadeDriveCommand m_autoCommand = null; \/\/ new ExampleCommand(m_exampleSubsystem);\n\n  \/**\n   * The container for the robot. Contains subsystems, OI devices, and commands.\n   *\/\n  public RobotContainer() {\n    m_driveSubsystem.setDefaultCommand(new ArcadeDriveCommand(m_driveSubsystem, m_joystick));\n\n    \/\/ Configure the button bindings\n    configureButtonBindings();\n  }\n\n  \/**\n   * Use this method to define your button-&gt;command mappings. Buttons can be\n   * created by instantiating a {@link GenericHID} or one of its subclasses\n   * ({@link edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then\n   * passing it to a {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.\n   *\/\n  private void configureButtonBindings() {\n    m_joystick.button(1).onTrue(new DriveForTimeCommand(m_driveSubsystem, 0.50, 3.0));\n    m_joystick.button(2).onTrue(new DriveForDistanceCommand(m_driveSubsystem, 0.75, 30));\n    m_joystick.button(3).onTrue(new TestMotorSpeedCommand(m_driveSubsystem));\n    m_joystick.button(4).whileTrue(new CalibrateSpeedCommand(m_driveSubsystem));\n    m_joystick.button(5).onTrue(new TurnCommand(m_driveSubsystem, 0.3, -180));\n    m_joystick.button(6).onTrue(new DriveCourseCommand(m_driveSubsystem));\n    m_joystick.button(7).onTrue(new DriveToLineCommand(m_driveSubsystem, m_irSensor));\n  }\n\n  \/**\n   * Use this to pass the autonomous command to the main {@link Robot} class.\n   *\n   * @return the command to run in autonomous\n   *\/\n  public Command getAutonomousCommand() {\n    \/\/ An ExampleCommand will run in autonomous\n    return m_autoCommand;\n  }\n}\n<\/code><\/pre>\n\n\n\n<p>Now deploy your program. Place the robot a couple of inches from the black line and verify that it stops when it reaches the line.<\/p>\n\n\n\n<p><a href=\"\/escape\/\" data-type=\"page\">Next: Escape!<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>While these little robots don\u2019t have gyros or cameras, they do have a infrared sensor that we are going to use to detect black lines. Our first command will be one that will simply drive the robot forward until it sees the black line and then stops. Let\u2019s call this new command&nbsp;DriveToLineCommand. Go ahead and&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/using-sensors\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Using Sensors<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/237"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=237"}],"version-history":[{"count":19,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/237\/revisions"}],"predecessor-version":[{"id":3278,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/237\/revisions\/3278"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=237"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}