{"id":111,"date":"2021-04-06T14:26:19","date_gmt":"2021-04-06T14:26:19","guid":{"rendered":"http:\/\/johngaby-001-site9.gtempurl.com\/?page_id=111"},"modified":"2024-08-29T17:24:15","modified_gmt":"2024-08-29T17:24:15","slug":"drive-subsystem","status":"publish","type":"page","link":"http:\/\/gabybot.com\/drive-subsystem\/","title":{"rendered":"Drive Subsystem"},"content":{"rendered":"\n<p>In the last chapter we learned how to run our program, but it really didn\u2019t do anything other than print logging information. That is because we have not told it to do anything yet. In this chapter we will create code which can be used to control the two drive motors.<\/p>\n\n\n\n<p>To do this we will create a&nbsp;<strong>Subsystem<\/strong>. Subsystems are designed to control some aspect of the robot, in this case the drive motors. We are going to need to be able to control the motors using a number of different commands. Using a Subsystem lets us control what commands are allowed to access the motors, and when.&#8221;<\/p>\n\n\n\n<p>Rather than create a new subsystem from scratch, we are going to copy the existing&nbsp;<strong>ExampleSubsystem<\/strong> &nbsp;and <strong>CHANGE ALL REFERENCES<\/strong> to &#8216;Example&#8217; to our new subsystem name (that is, replace the text &#8216;Example&#8217; with what we want to call it.)<\/p>\n\n\n\n<p>Open the&nbsp;<strong>subsystems<\/strong>&nbsp;folder (1) in the panel on the left. Right click on the&nbsp;<strong>ExampleSubsystem.java<\/strong>&nbsp;entry (2) and choose&nbsp;<strong>Copy<\/strong> (3).  <\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/08\/RenameExampleSubsystem-849x1024.jpg\" alt=\"\" class=\"wp-image-3071\" width=\"579\" height=\"697\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/RenameExampleSubsystem-849x1024.jpg 849w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/RenameExampleSubsystem-249x300.jpg 249w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/RenameExampleSubsystem-150x181.jpg 150w\" sizes=\"(max-width: 579px) 100vw, 579px\" \/><\/figure><\/div>\n\n\n\n<p>Then click on the&nbsp;<strong>subsystems<\/strong>&nbsp;folder, right click and choose&nbsp;<strong>Paste<\/strong>.<\/p>\n\n\n\n<p>This should result in something like this:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/04\/DriveSubsystem1.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/04\/DriveSubsystem1-1024x649.jpg\" alt=\"\" class=\"wp-image-115\" width=\"593\" height=\"376\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/DriveSubsystem1-1024x649.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/DriveSubsystem1-300x190.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/DriveSubsystem1-768x487.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/DriveSubsystem1.jpg 1164w\" sizes=\"(max-width: 593px) 100vw, 593px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>With the copy in place, we can dismiss the ExampleSubsystem.java tab (so you don&#8217;t accidently edit the original!).&nbsp; <strong>Don&#8217;t delete the file<\/strong> (left window)!&nbsp; We&#8217;ll need it later. But we can close the tab so we aren&#8217;t actively (and accidently!) editing it.<\/p>\n\n\n\n<ul><li>(1) Make sure ExampleSubsystem-Copy.java is there and open.<\/li><li>Find the ExampleSubsystem.java tab.<\/li><li>Mouse-hover over it.&nbsp; This will show the &#8216;x&#8217; at the right of the tab.<\/li><li>(2) Click the &#8216;x&#8217; to dismiss the window.&#8221;<\/li><\/ul>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/08\/Dismiss-1024x598.jpg\" alt=\"\" class=\"wp-image-3079\" width=\"427\" height=\"248\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Dismiss-1024x598.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Dismiss-300x175.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Dismiss-150x88.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Dismiss.jpg 1308w\" sizes=\"(max-width: 427px) 100vw, 427px\" \/><\/figure><\/div>\n\n\n\n<p><\/p>\n\n\n\n<p>Now we need to change all references of <strong>ExampleSubsystem <\/strong>to <strong>DriveSubsystem<\/strong>.&nbsp; This includes the filename itself*, so let&#8217;s do that first.<\/p>\n\n\n\n<p>(*Java requires that a Class and its file have the same name.  This helps Java find the right code when you import a class&#8230;and probably some other things!)<\/p>\n\n\n\n<p>In the left window, Right Click on \u2018<strong>ExampleSubsystem copy.java<\/strong>\u2018, choose&nbsp;<strong>Rename,<\/strong>&nbsp;and rename the file to&nbsp;<strong>DriveSubsystem.java<\/strong>. <\/p>\n\n\n\n<p>Inside the file, change them all, too. Make sure DriverSubsystem.java is selected (1) and, at the top of the VS window, click Edit (2), then Replace (3)  from the drop down menu.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/08\/Replace-1024x426.jpg\" alt=\"\" class=\"wp-image-3074\" width=\"575\" height=\"238\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Replace-1024x426.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Replace-300x125.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Replace-150x62.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/Replace.jpg 1549w\" sizes=\"(max-width: 575px) 100vw, 575px\" \/><\/figure><\/div>\n\n\n\n<p> Then enter&nbsp;<strong>ExampleSubsystem<\/strong>&nbsp;as the search text and&nbsp;<strong>DriveSubsystem<\/strong>&nbsp;as the replacement. Then click the&nbsp;<strong>Replace All<\/strong>&nbsp;button.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"\/wp-content\/uploads\/2021\/04\/DriveSubsystem2.jpg\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2021\/04\/DriveSubsystem2-1024x649.jpg\" alt=\"\" class=\"wp-image-117\" width=\"602\" height=\"381\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/DriveSubsystem2-1024x649.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/DriveSubsystem2-300x190.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/DriveSubsystem2-768x487.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/DriveSubsystem2.jpg 1164w\" sizes=\"(max-width: 602px) 100vw, 602px\" \/><\/a><\/figure><\/div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/08\/ReplaceAll-1024x425.jpg\" alt=\"\" class=\"wp-image-3076\" width=\"318\" height=\"131\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/ReplaceAll-1024x425.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/ReplaceAll-300x125.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/ReplaceAll-150x62.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/ReplaceAll-768x319.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/ReplaceAll-1536x638.jpg 1536w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/ReplaceAll.jpg 1551w\" sizes=\"(max-width: 318px) 100vw, 318px\" \/><\/figure><\/div>\n\n\n\n<p class=\"has-text-align-center\"><strong>Replace All<\/strong>&nbsp;button<\/p>\n\n\n\n<p>At this point your&nbsp;<strong>DriveSubsystem.java<\/strong>&nbsp;file should look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot.subsystems;\n\nimport edu.wpi.first.wpilibj2.command.SubsystemBase;\nimport robotCore.Logger;\n\npublic class DriveSubsystem extends SubsystemBase {\n  \/**\n   * Creates a new DriveSubsystem.\n   *\/\n  public DriveSubsystem() {\n    Logger.log(\"DriveSubsystem\", 3, \"DriveSubsystem()\");\n  }\n\n  @Override\n  public void periodic() {\n    \/\/ This method will be called once per scheduler run\n    Logger.log(\"DriveSubsystem\", -1, \"periodic()\");\n  }\n}\n<\/code><\/pre>\n\n\n\n<p>This code creates a class <strong>DriveSubsystem <\/strong>that <em>inherits <\/em>from <strong>SubsystemBase<\/strong> (which was provided to us).<\/p>\n\n\n\n<p>At the top of the class is <em>DriveSubsystem<\/em>(), the constructor.&nbsp; We will call this with &#8216;new&#8217; later to bring our <strong>DriveSubsytem <\/strong>into existence (and give it a name!).<\/p>\n\n\n\n<p><br>The other method in the class is <em>periodic()<\/em>. It turns out that <strong>SubsystemBase <\/strong>already contains a default &#8216;periodic()&#8217; method. Here we <em>override <\/em>that one with the one we want for our <strong>DriveSubsystem<\/strong> by creating a local method with the same name.&nbsp; While optional, &#8216;@Override&#8217; is recommended.  It let&#8217;s Java know that is what we are trying to do, so if it fails (usually a spelling problem, which is quite common!) the Java compiler will let us know.  Otherwise it won&#8217;t, and Java will keep the default <em>periodic()<\/em> from <strong>SubsystemBase<\/strong><em> and<\/em> create whatever we told it to &#8211; our mal-named method. Debugging this is hard.&nbsp; (@Override is called a <em>compiler directive<\/em>. These are not technically part of the Java language, but are quite helpful to programmers.)  Back to <em>periodic()<\/em>&#8230;<\/p>\n\n\n\n<p>&#8216;<strong>periodic<\/strong>&#8216;&nbsp;will be called periodically (default: every 20ms) as long as your program is running. You can use this function to perform actions that this subsystem might require. We don&#8217;t need to do anything periodically in this tutorial, so we will leave this as it is &#8211; just print a log message. <\/p>\n\n\n\n<p><strong><mark style=\"background-color:rgba(0, 0, 0, 0)\" class=\"has-inline-color has-neve-link-color-color\"><span style=\"text-decoration: underline;\">Adding Code to DriveSubsystem<\/span><\/mark><\/strong><\/p>\n\n\n\n<p>If we are going to drive, we need motors and need to control them in software.&nbsp; WPILib includes a class for motor control called&nbsp;<a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_p_w_m_motor.html\" target=\"_blank\"><strong>PWMMotor<\/strong><\/a>. To use this, we will:&nbsp;<\/p>\n\n\n\n<ul><li>Create variables to hold the <strong>PWMMotor <\/strong>objects (one for each motor, left and right)&nbsp;<\/li><li>Use these to import the correct library<\/li><li>Define some variables needed to initialize the <strong>PWMMotor <\/strong>objects<\/li><li>Create the motor objects with &#8216;new&#8217;<\/li><\/ul>\n\n\n\n<p>The first thing we must do, then, is to create the variables that will be used to control these motors. Add the following two lines to the top of your&nbsp;<strong>DriveSubsystem<\/strong>&nbsp;class (<strong>not <\/strong>the top of the file!):<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private PWMMotor m_leftMotor;\n  private PWMMotor m_rightMotor;<\/code><\/pre>\n\n\n\n<p>You will note that we are prepending the variable names with an \u2018<strong>m_<\/strong>\u2018 to identify them as member variables of our class. Later you will see that we also use the prefix \u2018<strong>k_<\/strong>\u2018 to identify constants.<\/p>\n\n\n\n<p>You will also note that&nbsp;<strong>PWMMotor<\/strong>&nbsp;is underlined in red. This means that there is an error here which must be fixed. If you hover the mouse over it you will get the notice \u2018<strong>PWMMotor cannot be resolved to a type<\/strong>\u2019. The problem here is that we must import the module where this class is defined. We could go to the top of the file and add the required import but there is an easier way.<\/p>\n\n\n\n<p>If you click on one of the&nbsp;<strong>PWMMotor<\/strong>&nbsp;declarations and press&nbsp;<strong>CTRL&nbsp;+ .<\/strong>&nbsp;(i.e. hold the&nbsp;<strong>CTRL<\/strong>&nbsp;key and press the&nbsp;<strong>period<\/strong>), it will give you a list of possible fixes:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"612\" height=\"276\" src=\"\/wp-content\/uploads\/2021\/04\/PWMFix.jpg\" alt=\"\" class=\"wp-image-119\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/PWMFix.jpg 612w, http:\/\/gabybot.com\/wp-content\/uploads\/2021\/04\/PWMFix-300x135.jpg 300w\" sizes=\"(max-width: 612px) 100vw, 612px\" \/><\/figure><\/div>\n\n\n\n<p>We should choose the first option.<\/p>\n\n\n\n<p>Note that this added an import line near the top of the file:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"\/wp-content\/uploads\/2024\/08\/PWMMotor-1024x618.jpg\" alt=\"\" class=\"wp-image-3083\" width=\"408\" height=\"246\" srcset=\"http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/PWMMotor-1024x618.jpg 1024w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/PWMMotor-300x181.jpg 300w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/PWMMotor-150x91.jpg 150w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/PWMMotor-768x464.jpg 768w, http:\/\/gabybot.com\/wp-content\/uploads\/2024\/08\/PWMMotor.jpg 1287w\" sizes=\"(max-width: 408px) 100vw, 408px\" \/><\/figure><\/div>\n\n\n\n<p>We now see that the variable names (e.g.&nbsp;<strong>m_leftMotor<\/strong>) are now underlined in yellow. The yellow underline represents a warning and while warnings will not prevent your program from running they do point to possible problems that may need to be fixed. In this case if we hover over the warning we will see the message \u2018The value of the field&nbsp;<strong>DriveSubsystem.m_leftMotor<\/strong>&nbsp;is not used\u2019. This is ok at this time since we will be adding code which will use these fields and the warning will go away. In general, you should try and eliminate all warnings from your program. If you have a warning that you know that you want to ignore you can make it go away using the&nbsp;<strong>@SuppressWarnings<\/strong>&nbsp;directive. You should, of course, only suppress warnings that you know for a fact are not going to cause problems.<\/p>\n\n\n\n<p>We have declared the variables to control the motors, but we still need to initialize them. We need to be careful when we create the instances of these controllers. When writing code to control hardware, you cannot expect to be able to communicate with that hardware before the robot is initialized so we must make sure that the motor classes are not instantiated until the robot code has been initialized. However, if we wait to create an instance of this class until the robot is initialized, then it will be safe to initialize these variable in this class\u2019s constructor.<\/p>\n\n\n\n<p>Looking at the documentation for&nbsp;<strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_p_w_m_motor.html\" data-type=\"URL\" data-id=\"\/RobotCoreDoc\/classrobot_core_1_1_p_w_m_motor.html\" target=\"_blank\">PWMMotor<\/a><\/strong>&nbsp;we see the constructor requires 2 integers, a&nbsp;<strong>pwmPin<\/strong>&nbsp;and a&nbsp;<strong>dirPin<\/strong>. The first pin will control the power of the motor and the second will control the direction. We are using a&nbsp;<strong>microcontroller <\/strong>to provide these signals and only some of the pins can be configured for&nbsp;<strong>PWM<\/strong>&nbsp;(Pulse Width Modulation) output. To control the power we will be using&nbsp;pin&nbsp;<strong>Device.M1_1_PWM<\/strong>&nbsp;for the right motor and&nbsp;pin&nbsp;<strong>Device.M1_2_PWM<\/strong>&nbsp;for the left motor. To control the direction, we will be using pin&nbsp;<strong>Device.M1_1_DIR<\/strong>&nbsp;for the right motor and pin&nbsp;<strong>Device.M1_2_DIR<\/strong>&nbsp;for the left. Given this, we can call  the <em>PWMMotor()<\/em> constructor to instantiate our <strong>PWMMotor <\/strong>objects, and initialize our motor variables with them by <span style=\"text-decoration: underline;\">adding to the declarations we already wrote<\/span>:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  private static final int k_leftMotorPWMPin = Device.M1_2_PWM;\n  private static final int k_leftMotorDirPin = Device.M1_2_DIR;\n  private static final int k_rightMotorPWMPin = Device.M1_1_PWM;\n  private static final int k_rightMotorDirPin = Device.M1_1_DIR;\n\n  private PWMMotor m_leftMotor = new PWMMotor(k_leftMotorPWMPin, k_leftMotorDirPin); \n  private PWMMotor m_rightMotor = new PWMMotor(k_rightMotorPWMPin, k_rightMotorDirPin);\n<\/code><\/pre>\n\n\n\n<p>Note that motor variables are used in the <strong>PWMMotor<\/strong> constructors, so these must already be defined.  In this case, it means they need to come first in the file.<\/p>\n\n\n\n<p>You will, of course, also need to import <strong>Device <\/strong>from <strong>RobotCore<\/strong>;<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import robotCore.Device;<\/code><\/pre>\n\n\n\n<p>Now that we have defined and initialized the variables that control the motors we need to provide a function that will allow users of this class the ability to set the power on the motors. We will create a function called&nbsp;<strong>setPower<\/strong>&nbsp;which will allow us to set the power of the left and right motors. Once again consulting the documentation for&nbsp;<a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_p_w_m_motor.html\" data-type=\"URL\" data-id=\"\/RobotCoreDoc\/classrobot_core_1_1_p_w_m_motor.html\" target=\"_blank\"><strong>PWMMotor<\/strong><\/a> we find that we can set the power on an individual motor by calling its&nbsp;<strong><a rel=\"noreferrer noopener\" href=\"\/RobotCoreDoc\/classrobot_core_1_1_smart_motor.html#a14f9dea236ecceb69e3c5d097fba54c0\" target=\"_blank\">set(double power)<\/a><\/strong>&nbsp;function. This function takes a single argument which specifies the power and can range from&nbsp;<strong>-1.0<\/strong>&nbsp;for full reverse to&nbsp;<strong>+1.0<\/strong>&nbsp;for full forward. Given this we will define our&nbsp;<strong>setPower<\/strong>&nbsp;function as follows.<\/p>\n\n\n\n<p>Because Constructors come before methods in a class, <em>setPower()<\/em> goes after <em>DriveSubsystem()<\/em>, but can come before <em>periodic()<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  public void setPower(double leftPower, double rightPower) {\n    m_rightMotor.set(rightPower);\n    m_leftMotor.set(leftPower);\n  }<\/code><\/pre>\n\n\n\n<p>Note that there will be many cases where you will want to stop the motor. You can, of course, call <strong>setPower(0, 0)<\/strong> but you could also create a function called <strong>stop()<\/strong> which will do that. <\/p>\n\n\n\n<p>Your&nbsp;<strong>DriveSubsystem.java<\/strong>&nbsp;file should now look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*----------------------------------------------------------------------------*\/\n\/* Copyright (c) 2018-2019 FIRST. All Rights Reserved.                        *\/\n\/* Open Source Software - may be modified and shared by FRC teams. The code   *\/\n\/* must be accompanied by the FIRST BSD license file in the root directory of *\/\n\/* the project.                                                               *\/\n\/*----------------------------------------------------------------------------*\/\n\npackage frc.robot.subsystems;\n\nimport edu.wpi.first.wpilibj2.command.SubsystemBase;\nimport robotCore.Device;\nimport robotCore.Logger;\nimport robotCore.PWMMotor;\n\n\npublic class DriveSubsystem extends SubsystemBase {\n\n  \/\/Define motor constructor arguments before Constructor calls\n  private static final int k_leftMotorPWMPin = Device.M1_2_PWM;\n  private static final int k_leftMotorDirPin = Device.M1_2_DIR;\n  private static final int k_rightMotorPWMPin = Device.M1_1_PWM;\n  private static final int k_rightMotorDirPin = Device.M1_1_DIR;\n \n  \/\/ Define motor variables\n  \/\/and Instantiate and assign PWMMotor objects, left and right\n  private PWMMotor m_leftMotor = new PWMMotor(k_leftMotorPWMPin, k_leftMotorDirPin);\n  private PWMMotor m_rightMotor = new PWMMotor(k_rightMotorPWMPin, k_rightMotorDirPin); \n\n  \/**\n   * Creates a new DriveSubsystem.\n   *\/\n  public DriveSubsystem() {\n    Logger.log(\"DriveSubsystem\", 3, \"DriveSubsystem()\");\n  }\n\n  \/\/Sets the power for the motors.\n  \/\/Sets both motors to the same power.\n  \/\/   leftPower &amp; rightPower are -1.0 (full rev) to 1.0 (full fwd)\n  public void setPower(double leftPower, double rightPower) {\n    m_rightMotor.set(rightPower);\n    m_leftMotor.set(leftPower);\n  }\n\n  @Override\n  public void periodic() {\n    \/\/ This method will be called once per scheduler run\n    Logger.log(\"DriveSubsystem\", -1, \"periodic()\");\n  }\n}<\/code><\/pre>\n\n\n\n<p><a href=\"\/commands\/\" data-type=\"page\">Next: Commands<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>In the last chapter we learned how to run our program, but it really didn\u2019t do anything other than print logging information. That is because we have not told it to do anything yet. In this chapter we will create code which can be used to control the two drive motors. To do this we&hellip;&nbsp;<a href=\"http:\/\/gabybot.com\/drive-subsystem\/\" class=\"\" rel=\"bookmark\">Read More &raquo;<span class=\"screen-reader-text\">Drive Subsystem<\/span><\/a><\/p>\n","protected":false},"author":3,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"neve_meta_sidebar":"","neve_meta_container":"","neve_meta_enable_content_width":"","neve_meta_content_width":0,"neve_meta_title_alignment":"","neve_meta_author_avatar":"","neve_post_elements_order":"","neve_meta_disable_header":"","neve_meta_disable_footer":"","neve_meta_disable_title":""},"_links":{"self":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/111"}],"collection":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/comments?post=111"}],"version-history":[{"count":38,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/111\/revisions"}],"predecessor-version":[{"id":3085,"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/pages\/111\/revisions\/3085"}],"wp:attachment":[{"href":"http:\/\/gabybot.com\/wp-json\/wp\/v2\/media?parent=111"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}